[['<?xml version="1.0" encoding="UTF-8" ?>', '>>>?xml version="1.0" encoding="UTF-8" ?>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>', '<?xml version="1.0" encoding="UTF-8" ?><<<>>>', '<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<?xml version="1.0" encoding="UTF-8" ?>AAA', '<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?>', '<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?>', '<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?>', '', '<<<<?xml version="1.0" encoding="UTF-8" ?>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?>', '<????xml version="1.0" encoding="UTF-8" ?>', '<???????????????????????????????xml version="1.0" encoding="UTF-8" ?>', '<?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?>', '<?AAAxml version="1.0" encoding="UTF-8" ?>', '<?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?>', '<?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?>', '<?xml    version="1.0" encoding="UTF-8" ?>', '<?xml                               version="1.0" encoding="UTF-8" ?>', '<?xml                                                             version="1.0" encoding="UTF-8" ?>', '<?xml AAAversion="1.0" encoding="UTF-8" ?>', '<?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?>', '<?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?>', '<?xml version===="1.0" encoding="UTF-8" ?>', '<?xml version==============================="1.0" encoding="UTF-8" ?>', '<?xml version============================================================="1.0" encoding="UTF-8" ?>', '<?xml version=""""1.0" encoding="UTF-8" ?>', '<?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?>', '<?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?>', '<?xml version="1111.0" encoding="UTF-8" ?>', '<?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?>', '<?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?>', '<?xml version="1....0" encoding="UTF-8" ?>', '<?xml version="1...............................0" encoding="UTF-8" ?>', '<?xml version="1.............................................................0" encoding="UTF-8" ?>', '<?xml version="1.1110" encoding="UTF-8" ?>', '<?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?>', '<?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?>', '<?xml version="1.0"""" encoding="UTF-8" ?>', '<?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?>', '<?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?>', '<?xml version="1.0"    encoding="UTF-8" ?>', '<?xml version="1.0"                               encoding="UTF-8" ?>', '<?xml version="1.0"                                                             encoding="UTF-8" ?>', '<?xml version="1.0" AAAencoding="UTF-8" ?>', '<?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?>', '<?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?>', '<?xml version="1.0" encoding===="UTF-8" ?>', '<?xml version="1.0" encoding==============================="UTF-8" ?>', '<?xml version="1.0" encoding============================================================="UTF-8" ?>', '<?xml version="1.0" encoding=""""UTF-8" ?>', '<?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?>', '<?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?>', '<?xml version="1.0" encoding="AAAUTF-8" ?>', '<?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?>', '<?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?>', '<?xml version="1.0" encoding="UTF----8" ?>', '<?xml version="1.0" encoding="UTF-------------------------------8" ?>', '<?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?>', '<?xml version="1.0" encoding="UTF-1118" ?>', '<?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?>', '<?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?>', '<?xml version="1.0" encoding="UTF-8"""" ?>', '<?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?>', '<?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?>', '<?xml version="1.0" encoding="UTF-8"    ?>', '<?xml version="1.0" encoding="UTF-8"                               ?>', '<?xml version="1.0" encoding="UTF-8"                                                             ?>', '<?xml version="1.0" encoding="UTF-8" ????>', '<?xml version="1.0" encoding="UTF-8" ???????????????????????????????>', '<?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????>', '<?xml version="1.0" encoding="UTF-8" ?>>>>', '<?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['<dt-api library="Responsive">', '>>>dt-api library="Responsive">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive">', '<dt-api library="Responsive"><<<>>>', '<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<dt-api library="Responsive">AAA', '<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive">', '<dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive">', '<dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive">', '', '<<<<dt-api library="Responsive">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive">', '<AAAdt-api library="Responsive">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive">', '<dt----api library="Responsive">', '<dt-------------------------------api library="Responsive">', '<dt-------------------------------------------------------------api library="Responsive">', '<dt-AAAapi library="Responsive">', '<dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive">', '<dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive">', '<dt-api    library="Responsive">', '<dt-api                               library="Responsive">', '<dt-api                                                             library="Responsive">', '<dt-api AAAlibrary="Responsive">', '<dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive">', '<dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive">', '<dt-api library===="Responsive">', '<dt-api library==============================="Responsive">', '<dt-api library============================================================="Responsive">', '<dt-api library=""""Responsive">', '<dt-api library="""""""""""""""""""""""""""""""Responsive">', '<dt-api library="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive">', '<dt-api library="AAAResponsive">', '<dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive">', '<dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive">', '<dt-api library="Responsive"""">', '<dt-api library="Responsive""""""""""""""""""""""""""""""">', '<dt-api library="Responsive""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""">', '<dt-api library="Responsive">>>>', '<dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t', '\n\t<<<>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\tAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '', '\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<name>', '>>>name>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>', '<name><<<>>>', '<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<name>AAA', '<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<name><name><name>', '<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name>', '<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name>', '', '<<<<name>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name>', '<AAAname>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname>', '<name>>>>', '<name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['responsive.recalc()', 'responsive.recalc()<<<>>>', 'responsive.recalc()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'responsive.recalc()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'responsive.recalc()AAA', 'responsive.recalc()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'responsive.recalc()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'responsive.recalc()responsive.recalc()responsive.recalc()', 'responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()', 'responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()', '', 'AAAresponsive.recalc()', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()', 'responsive....recalc()', 'responsive...............................recalc()', 'responsive.............................................................recalc()', 'responsive.AAArecalc()', 'responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()', 'responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()', 'responsive.recalc(((()', 'responsive.recalc((((((((((((((((((((((((((((((()', 'responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()', 'responsive.recalc())))', 'responsive.recalc()))))))))))))))))))))))))))))))', 'responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))'], ['</name>', '>>>/name>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>', '</name><<<>>>', '</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</name>AAA', '</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</name></name></name>', '</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name>', '</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name>', '', '<<<</name>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name>', '<////name>', '<///////////////////////////////name>', '</////////////////////////////////////////////////////////////name>', '</AAAname>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname>', '</name>>>>', '</name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t', '\n\t<<<>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\tAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '', '\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<summary>', '>>>summary>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>', '<summary><<<>>>', '<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<summary>AAA', '<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<summary><summary><summary>', '<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary>', '<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary>', '', '<<<<summary>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary>', '<AAAsummary>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary>', '<summary>>>>', '<summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['Recalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the display<<<>>>', 'Recalculate the widths used by responsive after a change in the display<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'Recalculate the widths used by responsive after a change in the display<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'Recalculate the widths used by responsive after a change in the displayAAA', 'Recalculate the widths used by responsive after a change in the displayAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Recalculate the widths used by responsive after a change in the displayAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', '', 'AAARecalculate the widths used by responsive after a change in the display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the widths used by responsive after a change in the display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the widths used by responsive after a change in the display', 'Recalculate    the widths used by responsive after a change in the display', 'Recalculate                               the widths used by responsive after a change in the display', 'Recalculate                                                             the widths used by responsive after a change in the display', 'Recalculate AAAthe widths used by responsive after a change in the display', 'Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe widths used by responsive after a change in the display', 'Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe widths used by responsive after a change in the display', 'Recalculate the    widths used by responsive after a change in the display', 'Recalculate the                               widths used by responsive after a change in the display', 'Recalculate the                                                             widths used by responsive after a change in the display', 'Recalculate the AAAwidths used by responsive after a change in the display', 'Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by responsive after a change in the display', 'Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by responsive after a change in the display', 'Recalculate the widths    used by responsive after a change in the display', 'Recalculate the widths                               used by responsive after a change in the display', 'Recalculate the widths                                                             used by responsive after a change in the display', 'Recalculate the widths AAAused by responsive after a change in the display', 'Recalculate the widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by responsive after a change in the display', 'Recalculate the widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by responsive after a change in the display', 'Recalculate the widths used    by responsive after a change in the display', 'Recalculate the widths used                               by responsive after a change in the display', 'Recalculate the widths used                                                             by responsive after a change in the display', 'Recalculate the widths used AAAby responsive after a change in the display', 'Recalculate the widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby responsive after a change in the display', 'Recalculate the widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby responsive after a change in the display', 'Recalculate the widths used by    responsive after a change in the display', 'Recalculate the widths used by                               responsive after a change in the display', 'Recalculate the widths used by                                                             responsive after a change in the display', 'Recalculate the widths used by AAAresponsive after a change in the display', 'Recalculate the widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive after a change in the display', 'Recalculate the widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive after a change in the display', 'Recalculate the widths used by responsive    after a change in the display', 'Recalculate the widths used by responsive                               after a change in the display', 'Recalculate the widths used by responsive                                                             after a change in the display', 'Recalculate the widths used by responsive AAAafter a change in the display', 'Recalculate the widths used by responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a change in the display', 'Recalculate the widths used by responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a change in the display', 'Recalculate the widths used by responsive after    a change in the display', 'Recalculate the widths used by responsive after                               a change in the display', 'Recalculate the widths used by responsive after                                                             a change in the display', 'Recalculate the widths used by responsive after AAAa change in the display', 'Recalculate the widths used by responsive after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa change in the display', 'Recalculate the widths used by responsive after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa change in the display', 'Recalculate the widths used by responsive after a    change in the display', 'Recalculate the widths used by responsive after a                               change in the display', 'Recalculate the widths used by responsive after a                                                             change in the display', 'Recalculate the widths used by responsive after a AAAchange in the display', 'Recalculate the widths used by responsive after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in the display', 'Recalculate the widths used by responsive after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in the display', 'Recalculate the widths used by responsive after a change    in the display', 'Recalculate the widths used by responsive after a change                               in the display', 'Recalculate the widths used by responsive after a change                                                             in the display', 'Recalculate the widths used by responsive after a change AAAin the display', 'Recalculate the widths used by responsive after a change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the display', 'Recalculate the widths used by responsive after a change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the display', 'Recalculate the widths used by responsive after a change in    the display', 'Recalculate the widths used by responsive after a change in                               the display', 'Recalculate the widths used by responsive after a change in                                                             the display', 'Recalculate the widths used by responsive after a change in AAAthe display', 'Recalculate the widths used by responsive after a change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display', 'Recalculate the widths used by responsive after a change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display', 'Recalculate the widths used by responsive after a change in the    display', 'Recalculate the widths used by responsive after a change in the                               display', 'Recalculate the widths used by responsive after a change in the                                                             display', 'Recalculate the widths used by responsive after a change in the AAAdisplay', 'Recalculate the widths used by responsive after a change in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay', 'Recalculate the widths used by responsive after a change in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay'], ['</summary>', '>>>/summary>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>', '</summary><<<>>>', '</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</summary>AAA', '</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</summary></summary></summary>', '</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary>', '</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary>', '', '<<<</summary>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary>', '<////summary>', '<///////////////////////////////summary>', '</////////////////////////////////////////////////////////////summary>', '</AAAsummary>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary>', '</summary>>>>', '</summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t', '\n\t<<<>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\tAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '', '\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<since>', '>>>since>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>', '<since><<<>>>', '<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<since>AAA', '<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<since><since><since>', '<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since>', '<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since>', '', '<<<<since>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since>', '<AAAsince>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince>', '<since>>>>', '<since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['1.0.1', '1.0.1<<<>>>', '1.0.1<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '1.0.1<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '1.0.1AAA', '1.0.1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '1.0.1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '1.0.11.0.11.0.1', '1.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.1', '1.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.11.0.1', '', '1111.0.1', '1111111111111111111111111111111.0.1', '1111111111111111111111111111111111111111111111111111111111111.0.1', '1....0.1', '1...............................0.1', '1.............................................................0.1', '1.1110.1', '1.1111111111111111111111111111110.1', '1.1111111111111111111111111111111111111111111111111111111111110.1', '1.0....1', '1.0...............................1', '1.0.............................................................1', '1.0.1111', '1.0.1111111111111111111111111111111', '1.0.1111111111111111111111111111111111111111111111111111111111111'], ['</since>', '>>>/since>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>', '</since><<<>>>', '</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</since>AAA', '</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</since></since></since>', '</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since>', '</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since>', '', '<<<</since>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since>', '<////since>', '<///////////////////////////////since>', '</////////////////////////////////////////////////////////////since>', '</AAAsince>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince>', '</since>>>>', '</since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\n\t', '\n\n\t<<<>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\tAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<type type="function">', '>>>type type="function">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function">', '<type type="function"><<<>>>', '<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<type type="function">AAA', '<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<type type="function"><type type="function"><type type="function">', '<type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function">', '<type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function">', '', '<<<<type type="function">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function">', '<AAAtype type="function">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function">', '<type    type="function">', '<type                               type="function">', '<type                                                             type="function">', '<type AAAtype="function">', '<type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function">', '<type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function">', '<type type===="function">', '<type type==============================="function">', '<type type============================================================="function">', '<type type=""""function">', '<type type="""""""""""""""""""""""""""""""function">', '<type type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""function">', '<type type="AAAfunction">', '<type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction">', '<type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction">', '<type type="function"""">', '<type type="function""""""""""""""""""""""""""""""">', '<type type="function""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""">', '<type type="function">>>>', '<type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t\t', '\n\t\t<<<>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\tAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '', '\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<signature>', '>>>signature>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature>', '<signature><<<>>>', '<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<signature>AAA', '<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<signature><signature><signature>', '<signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature>', '<signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature>', '', '<<<<signature>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature>', '<AAAsignature>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature>', '<signature>>>>', '<signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['responsive.recalc()', 'responsive.recalc()<<<>>>', 'responsive.recalc()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'responsive.recalc()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'responsive.recalc()AAA', 'responsive.recalc()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'responsive.recalc()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'responsive.recalc()responsive.recalc()responsive.recalc()', 'responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()', 'responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()responsive.recalc()', '', 'AAAresponsive.recalc()', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()', 'responsive....recalc()', 'responsive...............................recalc()', 'responsive.............................................................recalc()', 'responsive.AAArecalc()', 'responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()', 'responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()', 'responsive.recalc(((()', 'responsive.recalc((((((((((((((((((((((((((((((()', 'responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()', 'responsive.recalc())))', 'responsive.recalc()))))))))))))))))))))))))))))))', 'responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))'], ['</signature>', '>>>/signature>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature>', '</signature><<<>>>', '</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</signature>AAA', '</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</signature></signature></signature>', '</signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature>', '</signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature>', '', '<<<</signature>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature>', '<////signature>', '<///////////////////////////////signature>', '</////////////////////////////////////////////////////////////signature>', '</AAAsignature>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature>', '</signature>>>>', '</signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t\t', '\n\t\t<<<>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\tAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '', '\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<description>', '>>>description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>', '<description><<<>>>', '<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description>AAA', '<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<description><description><description>', '<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description>', '<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description>', '', '<<<<description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description>', '<AAAdescription>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '<description>>>>', '<description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['Recalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the display<<<>>>', 'Recalculate the widths used by responsive after a change in the display<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'Recalculate the widths used by responsive after a change in the display<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'Recalculate the widths used by responsive after a change in the displayAAA', 'Recalculate the widths used by responsive after a change in the displayAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Recalculate the widths used by responsive after a change in the displayAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', 'Recalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the displayRecalculate the widths used by responsive after a change in the display', '', 'AAARecalculate the widths used by responsive after a change in the display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the widths used by responsive after a change in the display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the widths used by responsive after a change in the display', 'Recalculate    the widths used by responsive after a change in the display', 'Recalculate                               the widths used by responsive after a change in the display', 'Recalculate                                                             the widths used by responsive after a change in the display', 'Recalculate AAAthe widths used by responsive after a change in the display', 'Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe widths used by responsive after a change in the display', 'Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe widths used by responsive after a change in the display', 'Recalculate the    widths used by responsive after a change in the display', 'Recalculate the                               widths used by responsive after a change in the display', 'Recalculate the                                                             widths used by responsive after a change in the display', 'Recalculate the AAAwidths used by responsive after a change in the display', 'Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by responsive after a change in the display', 'Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by responsive after a change in the display', 'Recalculate the widths    used by responsive after a change in the display', 'Recalculate the widths                               used by responsive after a change in the display', 'Recalculate the widths                                                             used by responsive after a change in the display', 'Recalculate the widths AAAused by responsive after a change in the display', 'Recalculate the widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by responsive after a change in the display', 'Recalculate the widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by responsive after a change in the display', 'Recalculate the widths used    by responsive after a change in the display', 'Recalculate the widths used                               by responsive after a change in the display', 'Recalculate the widths used                                                             by responsive after a change in the display', 'Recalculate the widths used AAAby responsive after a change in the display', 'Recalculate the widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby responsive after a change in the display', 'Recalculate the widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby responsive after a change in the display', 'Recalculate the widths used by    responsive after a change in the display', 'Recalculate the widths used by                               responsive after a change in the display', 'Recalculate the widths used by                                                             responsive after a change in the display', 'Recalculate the widths used by AAAresponsive after a change in the display', 'Recalculate the widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive after a change in the display', 'Recalculate the widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive after a change in the display', 'Recalculate the widths used by responsive    after a change in the display', 'Recalculate the widths used by responsive                               after a change in the display', 'Recalculate the widths used by responsive                                                             after a change in the display', 'Recalculate the widths used by responsive AAAafter a change in the display', 'Recalculate the widths used by responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a change in the display', 'Recalculate the widths used by responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a change in the display', 'Recalculate the widths used by responsive after    a change in the display', 'Recalculate the widths used by responsive after                               a change in the display', 'Recalculate the widths used by responsive after                                                             a change in the display', 'Recalculate the widths used by responsive after AAAa change in the display', 'Recalculate the widths used by responsive after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa change in the display', 'Recalculate the widths used by responsive after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa change in the display', 'Recalculate the widths used by responsive after a    change in the display', 'Recalculate the widths used by responsive after a                               change in the display', 'Recalculate the widths used by responsive after a                                                             change in the display', 'Recalculate the widths used by responsive after a AAAchange in the display', 'Recalculate the widths used by responsive after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in the display', 'Recalculate the widths used by responsive after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in the display', 'Recalculate the widths used by responsive after a change    in the display', 'Recalculate the widths used by responsive after a change                               in the display', 'Recalculate the widths used by responsive after a change                                                             in the display', 'Recalculate the widths used by responsive after a change AAAin the display', 'Recalculate the widths used by responsive after a change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the display', 'Recalculate the widths used by responsive after a change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the display', 'Recalculate the widths used by responsive after a change in    the display', 'Recalculate the widths used by responsive after a change in                               the display', 'Recalculate the widths used by responsive after a change in                                                             the display', 'Recalculate the widths used by responsive after a change in AAAthe display', 'Recalculate the widths used by responsive after a change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display', 'Recalculate the widths used by responsive after a change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display', 'Recalculate the widths used by responsive after a change in the    display', 'Recalculate the widths used by responsive after a change in the                               display', 'Recalculate the widths used by responsive after a change in the                                                             display', 'Recalculate the widths used by responsive after a change in the AAAdisplay', 'Recalculate the widths used by responsive after a change in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay', 'Recalculate the widths used by responsive after a change in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay'], ['</description>', '>>>/description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>', '</description><<<>>>', '</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description>AAA', '</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</description></description></description>', '</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description>', '</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description>', '', '<<<</description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description>', '<////description>', '<///////////////////////////////description>', '</////////////////////////////////////////////////////////////description>', '</AAAdescription>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '</description>>>>', '</description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t\t', '\n\t\t<<<>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t\tAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t', '', '\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<returns type="DataTables.Api">', '>>>returns type="DataTables.Api">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="DataTables.Api">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="DataTables.Api">', '<returns type="DataTables.Api"><<<>>>', '<returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<returns type="DataTables.Api">AAA', '<returns type="DataTables.Api">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<returns type="DataTables.Api">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api">', '<returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api">', '<returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api">', '', '<<<<returns type="DataTables.Api">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="DataTables.Api">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="DataTables.Api">', '<AAAreturns type="DataTables.Api">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="DataTables.Api">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="DataTables.Api">', '<returns    type="DataTables.Api">', '<returns                               type="DataTables.Api">', '<returns                                                             type="DataTables.Api">', '<returns AAAtype="DataTables.Api">', '<returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="DataTables.Api">', '<returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="DataTables.Api">', '<returns type===="DataTables.Api">', '<returns type==============================="DataTables.Api">', '<returns type============================================================="DataTables.Api">', '<returns type=""""DataTables.Api">', '<returns type="""""""""""""""""""""""""""""""DataTables.Api">', '<returns type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""DataTables.Api">', '<returns type="AAADataTables.Api">', '<returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables.Api">', '<returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables.Api">', '<returns type="DataTables....Api">', '<returns type="DataTables...............................Api">', '<returns type="DataTables.............................................................Api">', '<returns type="DataTables.AAAApi">', '<returns type="DataTables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApi">', '<returns type="DataTables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApi">', '<returns type="DataTables.Api"""">', '<returns type="DataTables.Api""""""""""""""""""""""""""""""">', '<returns type="DataTables.Api""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""">', '<returns type="DataTables.Api">>>>', '<returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['DataTables API instance', 'DataTables API instance<<<>>>', 'DataTables API instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'DataTables API instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', 'DataTables API instanceAAA', 'DataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'DataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'DataTables API instanceDataTables API instanceDataTables API instance', 'DataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instance', 'DataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instance', '', 'AAADataTables API instance', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instance', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instance', 'DataTables    API instance', 'DataTables                               API instance', 'DataTables                                                             API instance', 'DataTables AAAAPI instance', 'DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPI instance', 'DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPI instance', 'DataTables API    instance', 'DataTables API                               instance', 'DataTables API                                                             instance', 'DataTables API AAAinstance', 'DataTables API AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance', 'DataTables API AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance'], ['</returns>', '>>>/returns>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns>', '</returns><<<>>>', '</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</returns>AAA', '</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</returns></returns></returns>', '</returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns>', '</returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns>', '', '<<<</returns>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns>', '<////returns>', '<///////////////////////////////returns>', '</////////////////////////////////////////////////////////////returns>', '</AAAreturns>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns>', '</returns>>>>', '</returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\t', '\n\t<<<>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\tAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t', '', '\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['</type>', '>>>/type>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>', '</type><<<>>>', '</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</type>AAA', '</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</type></type></type>', '</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type>', '</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type>', '', '<<<</type>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type>', '<////type>', '<///////////////////////////////type>', '</////////////////////////////////////////////////////////////type>', '</AAAtype>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype>', '</type>>>>', '</type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\n\t', '\n\n\t<<<>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\tAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<description>', '>>>description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>', '<description><<<>>>', '<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description>AAA', '<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<description><description><description>', '<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description>', '<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description>', '', '<<<<description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description>', '<AAAdescription>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '<description>>>>', '<description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ["\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t<<<>>>", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\tAAA", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", '', "\n\n\n\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tAAAIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf    a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf                               a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf                                                             a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf AAAa table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a    table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a                               table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a                                                             table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a AAAtable is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table    is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table                               is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table                                                             is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table AAAis initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is    initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is                               initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is                                                             initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is AAAinitialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised    while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised                               while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised                                                             while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised AAAwhile it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhile it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhile it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while    it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while                               it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while                                                             it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while AAAit is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it    is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it                               is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it                                                             is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it AAAis hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is    hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is                               hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is                                                             hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is AAAhidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden    (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden                               (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden                                                             (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden ((((i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (((((((((((((((((((((((((((((((i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (AAAi.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i....e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i...............................e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.............................................................e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.AAAe. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e.... `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e............................... `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e............................................................. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e.    `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e.                               `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e.                                                             `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. ````display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. ```````````````````````````````display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `````````````````````````````````````````````````````````````display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `AAAdisplay: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display:::: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display::::::::::::::::::::::::::::::: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display:    none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display:                               none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display:                                                             none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: AAAnone`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnone`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnone`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none````) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none```````````````````````````````) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`````````````````````````````````````````````````````````````) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`)))) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`))))))))))))))))))))))))))))))) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`)    the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`)                               the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`)                                                             the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) AAAthe browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the    browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the                               browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the                                                             browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the AAAbrowser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbrowser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbrowser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser    will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser                               will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser                                                             will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser AAAwill not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will    not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will                               not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will                                                             not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will AAAnot calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not    calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not                               calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not                                                             calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not AAAcalculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate    the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate                               the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate                                                             the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate AAAthe width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the    width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the                               width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the                                                             width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the AAAwidth of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width    of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width                               of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width                                                             of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width AAAof columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of    columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of                               columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of                                                             columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of AAAcolumns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns    (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns                               (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns                                                             (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns ((((since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (((((((((((((((((((((((((((((((since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (AAAsince the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since    the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since                               the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since                                                             the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since AAAthe non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the    non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the                               non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the                                                             non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the AAAnon-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnon-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnon-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non----displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-------------------------------displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-------------------------------------------------------------displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-AAAdisplayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed    element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed                               element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed                                                             element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed AAAelement has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element    has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element                               has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element                                                             has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element AAAhas no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has    no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has                               no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has                                                             no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has AAAno width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAno width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAno width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no    width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no                               width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no                                                             width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no AAAwidth!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!!!!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!)))). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!))))))))))))))))))))))))))))))). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!).... As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!)............................... As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!)............................................................. As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!).    As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!).                               As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!).                                                             As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). AAAAs such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As    such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As                               such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As                                                             such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As AAAsuch, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsuch, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsuch, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,,,, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,    Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,                               Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such,                                                             Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, AAAResponsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive''''s calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive'''''''''''''''''''''''''''''''s calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''s calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive'AAAs calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's    calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's                               calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's                                                             calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's AAAcalculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations    for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations                               for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations                                                             for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations AAAfor which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for    which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for                               which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for                                                             which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for AAAwhich columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which    columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which                               columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which                                                             columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which AAAcolumns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns    to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns                               to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns                                                             to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns AAAto show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to    show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to                               show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to                                                             show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to AAAshow at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show    at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show                               at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show                                                             at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show AAAat the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at    the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at                               the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at                                                             the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at AAAthe various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the    various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the                               various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the                                                             various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the AAAvarious widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvarious widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvarious widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various    widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various                               widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various                                                             widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various AAAwidths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths    will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths                               will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths                                                             will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths AAAwill be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will    be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will                               be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will                                                             be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will AAAbe incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be    incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be                               incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be                                                             incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be AAAincorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAincorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAincorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect    in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect                               in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect                                                             in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect AAAin this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in    this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in                               this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in                                                             this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in AAAthis situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this    situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this                               situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this                                                             situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this AAAsituation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsituation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsituation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation....\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation...............................\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.............................................................\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tAAATo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo    resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo                               resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo                                                             resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo AAAresolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve    this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve                               this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve                                                             this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve AAAthis problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this    problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this                               problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this                                                             problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this AAAproblem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproblem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproblem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,,,, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,    this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,                               this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem,                                                             this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, AAAthis method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this    method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this                               method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this                                                             method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this AAAmethod is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method    is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method                               is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method                                                             is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method AAAis made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is    made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is                               made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is                                                             made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is AAAmade available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made    available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made                               available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made                                                             available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made AAAavailable to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAavailable to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAavailable to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available    to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available                               to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available                                                             to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available AAAto trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to    trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to                               trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to                                                             trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to AAAtrigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtrigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtrigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger    a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger                               a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger                                                             a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger AAAa recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a    recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a                               recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a                                                             recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a AAArecalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation    of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation                               of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation                                                             of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation AAAof the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of    the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of                               the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of                                                             the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of AAAthe column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the    column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the                               column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the                                                             column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the AAAcolumn widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column    widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column                               widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column                                                             widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column AAAwidths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths    used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths                               used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths                                                             used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths AAAused by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used    by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used                               by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used                                                             by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used AAAby Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by    Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by                               Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by                                                             Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by AAAResponsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive.... Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive............................... Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive............................................................. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive.    Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive.                               Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive.                                                             Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. AAACall it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACall it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACall it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call    it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call                               it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call                                                             it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call AAAit once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it    once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it                               once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it                                                             once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it AAAonce the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAonce the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAonce the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once    the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once                               the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once                                                             the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once AAAthe table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the    table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the                               table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the                                                             table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the AAAtable is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table    is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table                               is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table                                                             is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table AAAis made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is    made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is                               made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is                                                             made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is AAAmade visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made    visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made                               visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made                                                             visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made AAAvisible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible    to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible                               to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible                                                             to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible AAAto have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to    have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to                               have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to                                                             have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to AAAhave Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have    Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have                               Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have                                                             Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have AAAResponsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive    display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive                               display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive                                                             display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive AAAdisplay correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display    correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display                               correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display                                                             correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display AAAcorrectly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcorrectly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcorrectly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly....\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly...............................\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.............................................................\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tAAAIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt    is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt                               is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt                                                             is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt AAAis worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is    worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is                               worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is                                                             worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is AAAworth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAworth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAworth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth    noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth                               noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth                                                             noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth AAAnoting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnoting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnoting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting    that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting                               that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting                                                             that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting AAAthat in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that    in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that                               in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that                                                             in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that AAAin many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in    many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in                               many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in                                                             many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in AAAmany ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmany ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmany ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many    ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many                               ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many                                                             ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many AAAways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways    this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways                               this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways                                                             this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways AAAthis method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this    method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this                               method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this                                                             method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this AAAmethod is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method    is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method                               is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method                                                             is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method AAAis similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is    similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is                               similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is                                                             similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is AAAsimilar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsimilar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsimilar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar    to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar                               to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar                                                             to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar AAAto `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to    `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to                               `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to                                                             `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to ````dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to ```````````````````````````````dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `````````````````````````````````````````````````````````````dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `AAAdt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt----api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-------------------------------api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-------------------------------------------------------------api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-AAAapi columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api    columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api                               columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api                                                             columns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api AAAcolumns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns....adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns...............................adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.............................................................adjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.AAAadjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust(((()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust((((((((((((((((((((((((((((((()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust())))` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()))))))))))))))))))))))))))))))` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()```` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()``````````````````````````````` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()````````````````````````````````````````````````````````````` and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()`    and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()`                               and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()`                                                             and you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` AAAand you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and    you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and                               you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and                                                             you will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and AAAyou will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you    will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you                               will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you                                                             will likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you AAAwill likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will    likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will                               likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will                                                             likely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will AAAlikely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlikely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlikely wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely    wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely                               wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely                                                             wish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely AAAwish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish    to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish                               to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish                                                             to use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish AAAto use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to    use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to                               use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to                                                             use both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to AAAuse both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuse both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuse both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use    both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use                               both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use                                                             both together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use AAAboth together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAboth together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAboth together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both    together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both                               together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both                                                             together (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both AAAtogether (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtogether (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtogether (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together    (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together                               (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together                                                             (see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together ((((see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (((((((((((((((((((((((((((((((see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((see examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (AAAsee examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsee examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsee examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see    examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see                               examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see                                                             examples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see AAAexamples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexamples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexamples below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples    below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples                               below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples                                                             below).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples AAAbelow).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbelow).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbelow).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below)))).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below))))))))))))))))))))))))))))))).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below)....\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below)...............................\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).............................................................\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\n\n\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\t\t\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\n\t\tIf a table is initialised while it is hidden (i.e. `display: none`) the browser will not calculate the width of columns (since the non-displayed element has no width!). As such, Responsive's calculations for which columns to show at the various widths will be incorrect in this situation.\n\n\t\tTo resolve this problem, this method is made available to trigger a recalculation of the column widths used by Responsive. Call it once the table is made visible to have Responsive display correctly.\n\n\t\tIt is worth noting that in many ways this method is similar to `dt-api columns.adjust()` and you will likely wish to use both together (see examples below).\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"], ['</description>', '>>>/description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>', '</description><<<>>>', '</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description>AAA', '</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</description></description></description>', '</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description>', '</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description>', '', '<<<</description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description>', '<////description>', '<///////////////////////////////description>', '</////////////////////////////////////////////////////////////description>', '</AAAdescription>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription>', '</description>>>>', '</description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\n\t', '\n\n\t<<<>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\tAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<example title="Recalculate the responsive actions once the table is made visible">', '>>>example title="Recalculate the responsive actions once the table is made visible">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Recalculate the responsive actions once the table is made visible">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Recalculate the responsive actions once the table is made visible">', '<example title="Recalculate the responsive actions once the table is made visible"><<<>>>', '<example title="Recalculate the responsive actions once the table is made visible"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Recalculate the responsive actions once the table is made visible"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Recalculate the responsive actions once the table is made visible">AAA', '<example title="Recalculate the responsive actions once the table is made visible">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<example title="Recalculate the responsive actions once the table is made visible">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible">', '<example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible">', '<example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible"><example title="Recalculate the responsive actions once the table is made visible">', '', '<<<<example title="Recalculate the responsive actions once the table is made visible">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Recalculate the responsive actions once the table is made visible">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Recalculate the responsive actions once the table is made visible">', '<AAAexample title="Recalculate the responsive actions once the table is made visible">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Recalculate the responsive actions once the table is made visible">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Recalculate the responsive actions once the table is made visible">', '<example    title="Recalculate the responsive actions once the table is made visible">', '<example                               title="Recalculate the responsive actions once the table is made visible">', '<example                                                             title="Recalculate the responsive actions once the table is made visible">', '<example AAAtitle="Recalculate the responsive actions once the table is made visible">', '<example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Recalculate the responsive actions once the table is made visible">', '<example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Recalculate the responsive actions once the table is made visible">', '<example title===="Recalculate the responsive actions once the table is made visible">', '<example title==============================="Recalculate the responsive actions once the table is made visible">', '<example title============================================================="Recalculate the responsive actions once the table is made visible">', '<example title=""""Recalculate the responsive actions once the table is made visible">', '<example title="""""""""""""""""""""""""""""""Recalculate the responsive actions once the table is made visible">', '<example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Recalculate the responsive actions once the table is made visible">', '<example title="AAARecalculate the responsive actions once the table is made visible">', '<example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the responsive actions once the table is made visible">', '<example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the responsive actions once the table is made visible">', '<example title="Recalculate    the responsive actions once the table is made visible">', '<example title="Recalculate                               the responsive actions once the table is made visible">', '<example title="Recalculate                                                             the responsive actions once the table is made visible">', '<example title="Recalculate AAAthe responsive actions once the table is made visible">', '<example title="Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe responsive actions once the table is made visible">', '<example title="Recalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe responsive actions once the table is made visible">', '<example title="Recalculate the    responsive actions once the table is made visible">', '<example title="Recalculate the                               responsive actions once the table is made visible">', '<example title="Recalculate the                                                             responsive actions once the table is made visible">', '<example title="Recalculate the AAAresponsive actions once the table is made visible">', '<example title="Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive actions once the table is made visible">', '<example title="Recalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive actions once the table is made visible">', '<example title="Recalculate the responsive    actions once the table is made visible">', '<example title="Recalculate the responsive                               actions once the table is made visible">', '<example title="Recalculate the responsive                                                             actions once the table is made visible">', '<example title="Recalculate the responsive AAAactions once the table is made visible">', '<example title="Recalculate the responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAactions once the table is made visible">', '<example title="Recalculate the responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAactions once the table is made visible">', '<example title="Recalculate the responsive actions    once the table is made visible">', '<example title="Recalculate the responsive actions                               once the table is made visible">', '<example title="Recalculate the responsive actions                                                             once the table is made visible">', '<example title="Recalculate the responsive actions AAAonce the table is made visible">', '<example title="Recalculate the responsive actions AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAonce the table is made visible">', '<example title="Recalculate the responsive actions AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAonce the table is made visible">', '<example title="Recalculate the responsive actions once    the table is made visible">', '<example title="Recalculate the responsive actions once                               the table is made visible">', '<example title="Recalculate the responsive actions once                                                             the table is made visible">', '<example title="Recalculate the responsive actions once AAAthe table is made visible">', '<example title="Recalculate the responsive actions once AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table is made visible">', '<example title="Recalculate the responsive actions once AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table is made visible">', '<example title="Recalculate the responsive actions once the    table is made visible">', '<example title="Recalculate the responsive actions once the                               table is made visible">', '<example title="Recalculate the responsive actions once the                                                             table is made visible">', '<example title="Recalculate the responsive actions once the AAAtable is made visible">', '<example title="Recalculate the responsive actions once the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is made visible">', '<example title="Recalculate the responsive actions once the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable is made visible">', '<example title="Recalculate the responsive actions once the table    is made visible">', '<example title="Recalculate the responsive actions once the table                               is made visible">', '<example title="Recalculate the responsive actions once the table                                                             is made visible">', '<example title="Recalculate the responsive actions once the table AAAis made visible">', '<example title="Recalculate the responsive actions once the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made visible">', '<example title="Recalculate the responsive actions once the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis made visible">', '<example title="Recalculate the responsive actions once the table is    made visible">', '<example title="Recalculate the responsive actions once the table is                               made visible">', '<example title="Recalculate the responsive actions once the table is                                                             made visible">', '<example title="Recalculate the responsive actions once the table is AAAmade visible">', '<example title="Recalculate the responsive actions once the table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade visible">', '<example title="Recalculate the responsive actions once the table is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmade visible">', '<example title="Recalculate the responsive actions once the table is made    visible">', '<example title="Recalculate the responsive actions once the table is made                               visible">', '<example title="Recalculate the responsive actions once the table is made                                                             visible">', '<example title="Recalculate the responsive actions once the table is made AAAvisible">', '<example title="Recalculate the responsive actions once the table is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible">', '<example title="Recalculate the responsive actions once the table is made AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible">', '<example title="Recalculate the responsive actions once the table is made visible"""">', '<example title="Recalculate the responsive actions once the table is made visible""""""""""""""""""""""""""""""">', '<example title="Recalculate the responsive actions once the table is made visible""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""">', '<example title="Recalculate the responsive actions once the table is made visible">>>>', '<example title="Recalculate the responsive actions once the table is made visible">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Recalculate the responsive actions once the table is made visible">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ["<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", ">>>![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><<<>>>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>AAA", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]><![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", '', "<<<<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<!!!![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![[[[CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![AAACDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[[[[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nAAAvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar    table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar                               table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar                                                             table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar AAAtable = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table    = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table                               = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table                                                             = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table ==== $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table =============================== $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table ============================================================= $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table =    $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table =                               $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table =                                                             $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $$$$('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $(((('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $((((((((((((((((((((((((((((((('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $(''''#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('''''''''''''''''''''''''''''''#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('####example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('###############################example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#############################################################example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#AAAexample').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example'''').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example''''''''''''''''''''''''''''''').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example')))).DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example'))))))))))))))))))))))))))))))).DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example')....DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example')...............................DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').............................................................DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').AAADataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable(((();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable((((((((((((((((((((((((((((((();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable())));\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable()))))))))))))))))))))))))))))));\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();;;;\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$$$$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$(((('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$((((((((((((((((((((((((((((((('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$(''''#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('''''''''''''''''''''''''''''''#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('####example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('###############################example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#############################################################example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#AAAexample').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example'''').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example''''''''''''''''''''''''''''''').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example')))).css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example'))))))))))))))))))))))))))))))).css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example')....css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example')...............................css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').............................................................css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').AAAcss( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css(((( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css((((((((((((((((((((((((((((((( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css(    'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css(                               'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css(                                                             'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( ''''display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( '''''''''''''''''''''''''''''''display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''display', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'AAAdisplay', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display'''', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display''''''''''''''''''''''''''''''', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',,,, 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',    'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',                               'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display',                                                             'table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', ''''table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', '''''''''''''''''''''''''''''''table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''table' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'AAAtable' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table'''' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table''''''''''''''''''''''''''''''' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table'    );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table'                               );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table'                                                             );\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' ))));\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' )))))))))))))))))))))))))))))));\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );;;;\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\nAAAtable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable....responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable...............................responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.............................................................responsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.AAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive....recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive...............................recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.............................................................recalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.AAArecalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc(((();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc((((((((((((((((((((((((((((((();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc())));\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc()))))))))))))))))))))))))))))));\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();;;;\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>>>>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\nvar table = $('#example').DataTable();\n\n$('#example').css( 'display', 'table' );\n\ntable.responsive.recalc();\n\n]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"], ['</example>', '>>>/example>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>', '</example><<<>>>', '</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example>AAA', '</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</example></example></example>', '</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example>', '</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example>', '', '<<<</example>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example>', '<////example>', '<///////////////////////////////example>', '</////////////////////////////////////////////////////////////example>', '</AAAexample>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample>', '</example>>>>', '</example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['\n\n\t', '\n\n\t<<<>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\t<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '\n\n\tAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t', '', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t', '\n\n\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'], ['<example title="Use `columns.adjust()` and `responsive.recalc()`">', '>>>example title="Use `columns.adjust()` and `responsive.recalc()`">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Use `columns.adjust()` and `responsive.recalc()`">', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Use `columns.adjust()` and `responsive.recalc()`">', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><<<>>>', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Use `columns.adjust()` and `responsive.recalc()`">AAA', '<example title="Use `columns.adjust()` and `responsive.recalc()`">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<example title="Use `columns.adjust()` and `responsive.recalc()`">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`">', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`">', '<example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`"><example title="Use `columns.adjust()` and `responsive.recalc()`">', '', '<<<<example title="Use `columns.adjust()` and `responsive.recalc()`">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Use `columns.adjust()` and `responsive.recalc()`">', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Use `columns.adjust()` and `responsive.recalc()`">', '<AAAexample title="Use `columns.adjust()` and `responsive.recalc()`">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Use `columns.adjust()` and `responsive.recalc()`">', '<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Use `columns.adjust()` and `responsive.recalc()`">', '<example    title="Use `columns.adjust()` and `responsive.recalc()`">', '<example                               title="Use `columns.adjust()` and `responsive.recalc()`">', '<example                                                             title="Use `columns.adjust()` and `responsive.recalc()`">', '<example AAAtitle="Use `columns.adjust()` and `responsive.recalc()`">', '<example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Use `columns.adjust()` and `responsive.recalc()`">', '<example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Use `columns.adjust()` and `responsive.recalc()`">', '<example title===="Use `columns.adjust()` and `responsive.recalc()`">', '<example title==============================="Use `columns.adjust()` and `responsive.recalc()`">', '<example title============================================================="Use `columns.adjust()` and `responsive.recalc()`">', '<example title=""""Use `columns.adjust()` and `responsive.recalc()`">', '<example title="""""""""""""""""""""""""""""""Use `columns.adjust()` and `responsive.recalc()`">', '<example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Use `columns.adjust()` and `responsive.recalc()`">', '<example title="AAAUse `columns.adjust()` and `responsive.recalc()`">', '<example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse `columns.adjust()` and `responsive.recalc()`">', '<example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse `columns.adjust()` and `responsive.recalc()`">', '<example title="Use    `columns.adjust()` and `responsive.recalc()`">', '<example title="Use                               `columns.adjust()` and `responsive.recalc()`">', '<example title="Use                                                             `columns.adjust()` and `responsive.recalc()`">', '<example title="Use ````columns.adjust()` and `responsive.recalc()`">', '<example title="Use ```````````````````````````````columns.adjust()` and `responsive.recalc()`">', '<example title="Use `````````````````````````````````````````````````````````````columns.adjust()` and `responsive.recalc()`">', '<example title="Use `AAAcolumns.adjust()` and `responsive.recalc()`">', '<example title="Use `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()` and `responsive.recalc()`">', '<example title="Use `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()` and `responsive.recalc()`">', '<example title="Use `columns....adjust()` and `responsive.recalc()`">', '<example title="Use `columns...............................adjust()` and `responsive.recalc()`">', '<example title="Use `columns.............................................................adjust()` and `responsive.recalc()`">', '<example title="Use `columns.AAAadjust()` and `responsive.recalc()`">', '<example title="Use `columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()` and `responsive.recalc()`">', '<example title="Use `columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()` and `responsive.recalc()`">', '<example title="Use `columns.adjust(((()` and `responsive.recalc()`">', '<example title="Use `columns.adjust((((((((((((((((((((((((((((((()` and `responsive.recalc()`">', '<example title="Use `columns.adjust((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()` and `responsive.recalc()`">', '<example title="Use `columns.adjust())))` and `responsive.recalc()`">', '<example title="Use `columns.adjust()))))))))))))))))))))))))))))))` and `responsive.recalc()`">', '<example title="Use `columns.adjust()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))` and `responsive.recalc()`">', '<example title="Use `columns.adjust()```` and `responsive.recalc()`">', '<example title="Use `columns.adjust()``````````````````````````````` and `responsive.recalc()`">', '<example title="Use `columns.adjust()````````````````````````````````````````````````````````````` and `responsive.recalc()`">', '<example title="Use `columns.adjust()`    and `responsive.recalc()`">', '<example title="Use `columns.adjust()`                               and `responsive.recalc()`">', '<example title="Use `columns.adjust()`                                                             and `responsive.recalc()`">', '<example title="Use `columns.adjust()` AAAand `responsive.recalc()`">', '<example title="Use `columns.adjust()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand `responsive.recalc()`">', '<example title="Use `columns.adjust()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand `responsive.recalc()`">', '<example title="Use `columns.adjust()` and    `responsive.recalc()`">', '<example title="Use `columns.adjust()` and                               `responsive.recalc()`">', '<example title="Use `columns.adjust()` and                                                             `responsive.recalc()`">', '<example title="Use `columns.adjust()` and ````responsive.recalc()`">', '<example title="Use `columns.adjust()` and ```````````````````````````````responsive.recalc()`">', '<example title="Use `columns.adjust()` and `````````````````````````````````````````````````````````````responsive.recalc()`">', '<example title="Use `columns.adjust()` and `AAAresponsive.recalc()`">', '<example title="Use `columns.adjust()` and `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()`">', '<example title="Use `columns.adjust()` and `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()`">', '<example title="Use `columns.adjust()` and `responsive....recalc()`">', '<example title="Use `columns.adjust()` and `responsive...............................recalc()`">', '<example title="Use `columns.adjust()` and `responsive.............................................................recalc()`">', '<example title="Use `columns.adjust()` and `responsive.AAArecalc()`">', '<example title="Use `columns.adjust()` and `responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()`">', '<example title="Use `columns.adjust()` and `responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()`">', '<example title="Use `columns.adjust()` and `responsive.recalc(((()`">', '<example title="Use `columns.adjust()` and `responsive.recalc((((((((((((((((((((((((((((((()`">', '<example title="Use `columns.adjust()` and `responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()`">', '<example title="Use `columns.adjust()` and `responsive.recalc())))`">', '<example title="Use `columns.adjust()` and `responsive.recalc()))))))))))))))))))))))))))))))`">', '<example title="Use `columns.adjust()` and `responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`">', '<example title="Use `columns.adjust()` and `responsive.recalc()````">', '<example title="Use `columns.adjust()` and `responsive.recalc()```````````````````````````````">', '<example title="Use `columns.adjust()` and `responsive.recalc()`````````````````````````````````````````````````````````````">', '<example title="Use `columns.adjust()` and `responsive.recalc()`"""">', '<example title="Use `columns.adjust()` and `responsive.recalc()`""""""""""""""""""""""""""""""">', '<example title="Use `columns.adjust()` and `responsive.recalc()`""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""">', '<example title="Use `columns.adjust()` and `responsive.recalc()`">>>>', '<example title="Use `columns.adjust()` and `responsive.recalc()`">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '<example title="Use `columns.adjust()` and `responsive.recalc()`">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ["<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", ">>>![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><<<>>>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>AAA", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]><![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", '', "<<<<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<!!!![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![[[[CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![AAACDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[[[[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$$$$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$(((('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$((((((((((((((((((((((((((((((('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$(''''#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('''''''''''''''''''''''''''''''#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('####example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('###############################example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#############################################################example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#AAAexample').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example'''').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example''''''''''''''''''''''''''''''').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example')))).DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example'))))))))))))))))))))))))))))))).DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example')....DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example')...............................DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').............................................................DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').AAADataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable(((()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable((((((((((((((((((((((((((((((()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable())))\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()))))))))))))))))))))))))))))))\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\n\n\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t\t\t\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t....columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t...............................columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.............................................................columns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.AAAcolumns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns.adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns....adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns...............................adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.............................................................adjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.AAAadjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadjust()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust(((()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust((((((((((((((((((((((((((((((()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust())))\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()))))))))))))))))))))))))))))))\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\n\n\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t\t\t\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t....responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t...............................responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.............................................................responsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.AAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive....recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive...............................recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.............................................................recalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.AAArecalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc(((();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc((((((((((((((((((((((((((((((();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc())));\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc()))))))))))))))))))))))))))))));\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();;;;\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>>>>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "<![CDATA[\n\n$('#example').DataTable()\n\t.columns.adjust()\n\t.responsive.recalc();\n\n]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"], ['</example>', '>>>/example>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>', '</example><<<>>>', '</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example>AAA', '</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</example></example></example>', '</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example>', '</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example>', '', '<<<</example>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example>', '<////example>', '<///////////////////////////////example>', '</////////////////////////////////////////////////////////////example>', '</AAAexample>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample>', '</example>>>>', '</example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['</dt-api>', '>>>/dt-api>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api>', '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api>', '</dt-api><<<>>>', '</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</dt-api>AAA', '</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', '</dt-api></dt-api></dt-api>', '</dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api>', '</dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api>', '', '<<<</dt-api>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api>', '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api>', '<////dt-api>', '<///////////////////////////////dt-api>', '</////////////////////////////////////////////////////////////dt-api>', '</AAAdt-api>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api>', '</AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api>', '</dt----api>', '</dt-------------------------------api>', '</dt-------------------------------------------------------------api>', '</dt-AAAapi>', '</dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi>', '</dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi>', '</dt-api>>>>', '</dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', '</dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>']]