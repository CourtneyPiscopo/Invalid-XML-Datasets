<?xml version="1.0" encoding="UTF-8" ?>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>AAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><????xml version="1.0" encoding="UTF-8" ?><???????????????????????????????xml version="1.0" encoding="UTF-8" ?><?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?><?AAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?xml    version="1.0" encoding="UTF-8" ?><?xml                               version="1.0" encoding="UTF-8" ?><?xml                                                             version="1.0" encoding="UTF-8" ?><?xml AAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml version===="1.0" encoding="UTF-8" ?><?xml version==============================="1.0" encoding="UTF-8" ?><?xml version============================================================="1.0" encoding="UTF-8" ?><?xml version=""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="1111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1....0" encoding="UTF-8" ?><?xml version="1...............................0" encoding="UTF-8" ?><?xml version="1.............................................................0" encoding="UTF-8" ?><?xml version="1.1110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.0"""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0"    encoding="UTF-8" ?><?xml version="1.0"                               encoding="UTF-8" ?><?xml version="1.0"                                                             encoding="UTF-8" ?><?xml version="1.0" AAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" encoding===="UTF-8" ?><?xml version="1.0" encoding==============================="UTF-8" ?><?xml version="1.0" encoding============================================================="UTF-8" ?><?xml version="1.0" encoding=""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="AAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="UTF----8" ?><?xml version="1.0" encoding="UTF-------------------------------8" ?><?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?><?xml version="1.0" encoding="UTF-1118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-8"""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8"    ?><?xml version="1.0" encoding="UTF-8"                               ?><?xml version="1.0" encoding="UTF-8"                                                             ?><?xml version="1.0" encoding="UTF-8" ????><?xml version="1.0" encoding="UTF-8" ???????????????????????????????><?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????><?xml version="1.0" encoding="UTF-8" ?>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">>>>dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-option library="Responsive"><dt-option library="Responsive"><<<>>><dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">AAA<dt-option library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-option library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><<<<dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-option library="Responsive"><AAAdt-option library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option library="Responsive"><dt----option library="Responsive"><dt-------------------------------option library="Responsive"><dt-------------------------------------------------------------option library="Responsive"><dt-AAAoption library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption library="Responsive"><dt-option    library="Responsive"><dt-option                               library="Responsive"><dt-option                                                             library="Responsive"><dt-option AAAlibrary="Responsive"><dt-option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-option library===="Responsive"><dt-option library==============================="Responsive"><dt-option library============================================================="Responsive"><dt-option library=""""Responsive"><dt-option library="""""""""""""""""""""""""""""""Responsive"><dt-option library="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive"><dt-option library="AAAResponsive"><dt-option library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-option library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-option library="Responsive""""><dt-option library="Responsive"""""""""""""""""""""""""""""""><dt-option library="Responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><dt-option library="Responsive">>>><dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<name>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name><name><<<>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>AAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><AAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><name>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.details.typeresponsive.details.type<<<>>>responsive.details.type<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.details.type<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.details.typeAAAresponsive.details.typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeresponsive.details.typeAAAresponsive.details.typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.typeresponsive....details.typeresponsive...............................details.typeresponsive.............................................................details.typeresponsive.AAAdetails.typeresponsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails.typeresponsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails.typeresponsive.details....typeresponsive.details...............................typeresponsive.details.............................................................typeresponsive.details.AAAtyperesponsive.details.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtyperesponsive.details.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype</name>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name></name><<<>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>AAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name><<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><////name><///////////////////////////////name></////////////////////////////////////////////////////////////name></AAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></name>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<summary>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary><summary><<<>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>AAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><AAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><summary>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the child row display control typeSet the child row display control type<<<>>>Set the child row display control type<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the child row display control type<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the child row display control typeAAASet the child row display control typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the child row display control typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeSet the child row display control typeAAASet the child row display control typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the child row display control typeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the child row display control typeSet    the child row display control typeSet                               the child row display control typeSet                                                             the child row display control typeSet AAAthe child row display control typeSet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe child row display control typeSet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe child row display control typeSet the    child row display control typeSet the                               child row display control typeSet the                                                             child row display control typeSet the AAAchild row display control typeSet the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display control typeSet the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display control typeSet the child    row display control typeSet the child                               row display control typeSet the child                                                             row display control typeSet the child AAArow display control typeSet the child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display control typeSet the child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display control typeSet the child row    display control typeSet the child row                               display control typeSet the child row                                                             display control typeSet the child row AAAdisplay control typeSet the child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay control typeSet the child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay control typeSet the child row display    control typeSet the child row display                               control typeSet the child row display                                                             control typeSet the child row display AAAcontrol typeSet the child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol typeSet the child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol typeSet the child row display control    typeSet the child row display control                               typeSet the child row display control                                                             typeSet the child row display control AAAtypeSet the child row display control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtypeSet the child row display control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype</summary>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary></summary><<<>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>AAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary><<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><////summary><///////////////////////////////summary></////////////////////////////////////////////////////////////summary></AAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></summary>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<since>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since><since><<<>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>AAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><AAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><since>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0Responsive 1.0.0<<<>>>Responsive 1.0.0<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0AAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0AAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0Responsive    1.0.0Responsive                               1.0.0Responsive                                                             1.0.0Responsive 1111.0.0Responsive 1111111111111111111111111111111.0.0Responsive 1111111111111111111111111111111111111111111111111111111111111.0.0Responsive 1....0.0Responsive 1...............................0.0Responsive 1.............................................................0.0Responsive 1.1110.0Responsive 1.1111111111111111111111111111110.0Responsive 1.1111111111111111111111111111111111111111111111111111111111110.0Responsive 1.0....0Responsive 1.0...............................0Responsive 1.0.............................................................0Responsive 1.0.1110Responsive 1.0.1111111111111111111111111111110Responsive 1.0.1111111111111111111111111111111111111111111111111111111111110</since>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since></since><<<>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>AAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since><<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><////since><///////////////////////////////since></////////////////////////////////////////////////////////////since></AAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></since>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<type type="string">>>>type type="string">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="string">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="string"><type type="string"><<<>>><type type="string"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="string"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="string">AAA<type type="string">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="string">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><type type="string"><<<<type type="string"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="string"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="string"><AAAtype type="string"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="string"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="string"><type    type="string"><type                               type="string"><type                                                             type="string"><type AAAtype="string"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="string"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="string"><type type===="string"><type type==============================="string"><type type============================================================="string"><type type=""""string"><type type="""""""""""""""""""""""""""""""string"><type type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""string"><type type="AAAstring"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring"><type type="string""""><type type="string"""""""""""""""""""""""""""""""><type type="string"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><type type="string">>>><type type="string">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="string">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		<<<>>>
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		AAA
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		



			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		






























			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		




























































			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
						The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																	The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																																															The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
						The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																	The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																																															The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
						The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																	The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
																																																															The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			AAAThe child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The    child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The                               child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The                                                             child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The AAAchild row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child    row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child                               row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child                                                             row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child AAArow display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row    display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row                               display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row                                                             display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row AAAdisplay type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display    type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display                               type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display                                                             type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display AAAtype to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type    to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type                               to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type                                                             to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type AAAto use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to    use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to                               use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to                                                             use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to AAAuse. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuse. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuse. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use.... This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use............................... This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use............................................................. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use.    This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use.                               This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use.                                                             This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. AAAThis can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This    can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This                               can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This                                                             can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This AAAcan be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can    be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can                               be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can                                                             be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can AAAbe one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be    one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be                               one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be                                                             one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be AAAone of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAone of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAone of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one    of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one                               of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one                                                             of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one AAAof:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of::::

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:::::::::::::::::::::::::::::::

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:




			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:































			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:





























































			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:




			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:































			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:





























































			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

						* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																	* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																																															* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

						* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																	* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																																															* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

						* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																	* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

																																																															* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			**** `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			******************************* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			************************************************************* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			*    `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			*                               `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			*                                                             `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* ````-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* ```````````````````````````````-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `````````````````````````````````````````````````````````````-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `----string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-------------------------------string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-------------------------------------------------------------string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-AAAstring inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string    inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string                               inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string                                                             inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string AAAinline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline```` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline``````````````````````````````` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline````````````````````````````````````````````````````````````` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline`    - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline`                               - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline`                                                             - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` ---- Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` ------------------------------- Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` ------------------------------------------------------------- Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` -    Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` -                               Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` -                                                             Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - AAAUse the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use    the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use                               the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use                                                             the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use AAAthe first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the    first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the                               first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the                                                             first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the AAAfirst column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first    column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first                               column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first                                                             column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first AAAcolumn to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column    to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column                               to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column                                                             to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column AAAto display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to    display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to                               display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to                                                             display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to AAAdisplay the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display    the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display                               the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display                                                             the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display AAAthe control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the    control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the                               control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the                                                             control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the AAAcontrol element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control    element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control                               element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control                                                             element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control AAAelement
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element



			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element






























			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element




























































			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
						* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																	* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																																															* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
						* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																	* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																																															* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
						* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																	* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
																																																															* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			**** `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			******************************* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			************************************************************* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			*    `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			*                               `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			*                                                             `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* ````-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* ```````````````````````````````-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `````````````````````````````````````````````````````````````-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `----string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-------------------------------string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-------------------------------------------------------------string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-AAAstring column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstring column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string    column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string                               column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string                                                             column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string AAAcolumn` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column```` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column``````````````````````````````` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column````````````````````````````````````````````````````````````` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column`    - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column`                               - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column`                                                             - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` ---- Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` ------------------------------- Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` ------------------------------------------------------------- Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` -    Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` -                               Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` -                                                             Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - AAAUse a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use    a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use                               a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use                                                             a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use AAAa whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a    whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a                               whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a                                                             whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a AAAwhole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole    column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole                               column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole                                                             column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole AAAcolumn to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column    to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column                               to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column                                                             to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column AAAto display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to    display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to                               display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to                                                             display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to AAAdisplay the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display    the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display                               the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display                                                             the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display AAAthe control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the    control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the                               control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the                                                             control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the AAAcontrol element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control    element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control                               element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control                                                             element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control AAAelement. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element.... Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element............................... Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element............................................................. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element.    Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element.                               Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element.                                                             Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. AAANote that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note    that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note                               that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note                                                             that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note AAAthat if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that    if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that                               if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that                                                             if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that AAAif used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if    used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if                               used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if                                                             used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if AAAused as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used    as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used                               as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used                                                             as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used AAAas a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as    a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as                               a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as                                                             a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as AAAa column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a    column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a                               column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a                                                             column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a AAAcolumn type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column    type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column                               type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column                                                             type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column AAAtype and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type    and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type                               and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type                                                             and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type AAAand the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and    the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and                               the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and                                                             the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and AAAthe `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the    `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the                               `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the                                                             `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the ````target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the ```````````````````````````````target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `````````````````````````````````````````````````````````````target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `AAAtarget` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtarget` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtarget` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target```` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target``````````````````````````````` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target````````````````````````````````````````````````````````````` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target`    option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target`                               option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target`                                                             option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` AAAoption is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option    is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option                               is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option                                                             is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option AAAis set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is    set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is                               set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is                                                             set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is AAAset to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set    to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set                               to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set                                                             to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set AAAto be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to    be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to                               be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to                                                             be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to AAAbe a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be    a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be                               a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be                                                             a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be AAAa column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a    column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a                               column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a                                                             column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a AAAcolumn index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column    index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column                               index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column                                                             index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column AAAindex, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,,,, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,    the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,                               the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index,                                                             the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, AAAthe class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the    class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the                               class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the                                                             class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the AAAclass assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class    assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class                               assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class                                                             assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class AAAassigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAassigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAassigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned    to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned                               to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned                                                             to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned AAAto that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to    that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to                               that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to                                                             that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to AAAthat column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that    column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that                               column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that                                                             column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that AAAcolumn in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column    in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column                               in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column                                                             in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column AAAin the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in    the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in                               the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in                                                             the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in AAAthe DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the    DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the                               DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the                                                             DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the AAADataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable    should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable                               should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable                                                             should be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable AAAshould be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should    be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should                               be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should                                                             be `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should AAAbe `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be    `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be                               `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be                                                             `control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be ````control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be ```````````````````````````````control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `````````````````````````````````````````````````````````````control` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `AAAcontrol` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control```` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control``````````````````````````````` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control````````````````````````````````````````````````````````````` to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control`    to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control`                               to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control`                                                             to allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` AAAto allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to    allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to                               allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to                                                             allow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to AAAallow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallow the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow    the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow                               the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow                                                             the CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow AAAthe CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the    CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the                               CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the                                                             CSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the AAACSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSS to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS    to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS                               to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS                                                             to display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS AAAto display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to    display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to                               display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to                                                             display a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to AAAdisplay a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display    a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display                               a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display                                                             a visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display AAAa visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a    visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a                               visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a                                                             visual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a AAAvisual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisual show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual    show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual                               show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual                                                             show / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual AAAshow / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show    / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show                               / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show                                                             / hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show //// hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show /////////////////////////////// hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show ///////////////////////////////////////////////////////////// hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show /    hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show /                               hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show /                                                             hide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / AAAhide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhide control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide    control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide                               control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide                                                             control to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide AAAcontrol to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control    to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control                               to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control                                                             to the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control AAAto the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to    the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to                               the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to                                                             the end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to AAAthe end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the    end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the                               end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the                                                             end user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the AAAend user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAend user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAend user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end    user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end                               user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end                                                             user.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end AAAuser.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser.
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user....
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user...............................
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.............................................................
		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.



		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.






























		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.




























































		
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
					
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
																																
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
																																																														
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
					
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
																																
			The child row display type to use. This can be one of:

			* `-string inline` - Use the first column to display the control element
			* `-string column` - Use a whole column to display the control element. Note that if used as a column type and the `target` option is set to be a column index, the class assigned to that column in the DataTable should be `control` to allow the CSS to display a visual show / hide control to the end user.
																																																														</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													</type>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type></type><<<>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>AAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type><<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><////type><///////////////////////////////type></////////////////////////////////////////////////////////////type></AAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></type>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<default value="inline"/>>>>default value="inline"/>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>default value="inline"/>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>default value="inline"/><default value="inline"/><<<>>><default value="inline"/><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="inline"/><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="inline"/>AAA<default value="inline"/>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<default value="inline"/>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><default value="inline"/><<<<default value="inline"/><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<default value="inline"/><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<default value="inline"/><AAAdefault value="inline"/><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault value="inline"/><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault value="inline"/><default    value="inline"/><default                               value="inline"/><default                                                             value="inline"/><default AAAvalue="inline"/><default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue="inline"/><default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue="inline"/><default value===="inline"/><default value==============================="inline"/><default value============================================================="inline"/><default value=""""inline"/><default value="""""""""""""""""""""""""""""""inline"/><default value="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""inline"/><default value="AAAinline"/><default value="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline"/><default value="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline"/><default value="inline""""/><default value="inline"""""""""""""""""""""""""""""""/><default value="inline"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""/><default value="inline"////><default value="inline"///////////////////////////////><default value="inline"/////////////////////////////////////////////////////////////><default value="inline"/>>>><default value="inline"/>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="inline"/>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<>>>
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAA
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	



		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	






























		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	




























































		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
					Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																																														Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
					Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																																														Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAResponsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive    has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive                               has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive                                                             has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive AAAhas two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has    two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has                               two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has                                                             two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has AAAtwo built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two    built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two                               built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two                                                             built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two AAAbuilt in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbuilt in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbuilt in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built    in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built                               in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built                                                             in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built AAAin methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in    methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in                               methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in                                                             methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in AAAmethods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods    of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods                               of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods                                                             of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods AAAof managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of    managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of                               managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of                                                             managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of AAAmanaging how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanaging how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanaging how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing    how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing                               how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing                                                             how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing AAAhow the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhow the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhow the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how    the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how                               the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how                                                             the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how AAAthe child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the    child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the                               child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the                                                             child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the AAAchild row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchild row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child    row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child                               row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child                                                             row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child AAArow display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row    display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row                               display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row                                                             display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row AAAdisplay control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display    control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display                               control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display                                                             control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display AAAcontrol is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control    is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control                               is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control                                                             is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control AAAis shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is    shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is                               shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is                                                             shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is AAAshown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown    to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown                               to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown                                                             to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown AAAto the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to    the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to                               the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to                                                             the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to AAAthe end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the    end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the                               end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the                                                             end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the AAAend user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAend user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAend user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end    user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end                               user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end                                                             user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end AAAuser:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user::::

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:::::::::::::::::::::::::::::::

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:




		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:































		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:





























































		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:




		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:































		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:





























































		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

					* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

																																* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

																																																														* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

					* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

																																* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

																																																														* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		**** `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		******************************* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		************************************************************* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		*    `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		*                               `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		*                                                             `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* ````inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* ```````````````````````````````inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `````````````````````````````````````````````````````````````inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `AAAinline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline```` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline``````````````````````````````` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline````````````````````````````````````````````````````````````` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline`    - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline`                               - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline`                                                             - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` ---- where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` ------------------------------- where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` ------------------------------------------------------------- where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` -    where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` -                               where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` -                                                             where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - AAAwhere the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where    the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where                               the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where                                                             the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where AAAthe first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the    first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the                               first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the                                                             first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the AAAfirst column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first    column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first                               column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first                                                             column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first AAAcolumn in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column    in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column                               in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column                                                             in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column AAAin the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in    the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in                               the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in                                                             the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in AAAthe table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the    table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the                               table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the                                                             table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the AAAtable has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table    has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table                               has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table                                                             has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table AAAhas additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has    additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has                               additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has                                                             additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has AAAadditional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadditional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadditional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional    padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional                               padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional                                                             padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional AAApadding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApadding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApadding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding    added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding                               added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding                                                             added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding AAAadded to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadded to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadded to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added    to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added                               to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added                                                             to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added AAAto it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to    it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to                               it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to                                                             it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to AAAit and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it    and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it                               and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it                                                             and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it AAAand the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and    the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and                               the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and                                                             the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and AAAthe `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the    `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the                               `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the                                                             `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the ````:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the ```````````````````````````````:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `````````````````````````````````````````````````````````````:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `::::before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:::::::::::::::::::::::::::::::before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:AAAbefore` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbefore` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbefore` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before```` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before``````````````````````````````` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before````````````````````````````````````````````````````````````` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before`    pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before`                               pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before`                                                             pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` AAApseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo    element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo                               element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo                                                             element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo AAAelement is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element    is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element                               is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element                                                             is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element AAAis used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is    used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is                               used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is                                                             used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is AAAused to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used    to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used                               to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used                                                             to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used AAAto display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to    display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to                               display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to                                                             display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to AAAdisplay the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display    the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display                               the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display                                                             the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display AAAthe button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the    button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the                               button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the                                                             button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the AAAbutton.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbutton.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbutton.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button....
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button...............................
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.............................................................
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.



		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.






























		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.




























































		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
					* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
																																* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
																																																														* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
					* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
																																* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
																																																														* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		**** `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		******************************* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		************************************************************* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		*    `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		*                               `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		*                                                             `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* ````column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* ```````````````````````````````column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `````````````````````````````````````````````````````````````column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `AAAcolumn` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column```` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column``````````````````````````````` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column````````````````````````````````````````````````````````````` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column`    - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column`                               - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column`                                                             - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` ---- where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` ------------------------------- where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` ------------------------------------------------------------- where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` -    where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` -                               where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` -                                                             where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - AAAwhere a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where    a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where                               a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where                                                             a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where AAAa whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a    whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a                               whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a                                                             whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a AAAwhole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole    column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole                               column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole                                                             column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole AAAcolumn is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column    is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column                               is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column                                                             is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column AAAis dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is    dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is                               dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is                                                             dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is AAAdedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated    to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated                               to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated                                                             to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated AAAto the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to    the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to                               the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to                                                             the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to AAAthe show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the    show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the                               show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the                                                             show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the AAAshow / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshow / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show    / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show                               / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show                                                             / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show //// hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show /////////////////////////////// hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show ///////////////////////////////////////////////////////////// hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show /    hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show /                               hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show /                                                             hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / AAAhide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide    control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide                               control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide                                                             control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide AAAcontrol.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control....

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control...............................

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.............................................................

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.




		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.































		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.





























































		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.




		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.































		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.





























































		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

					The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

																																The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

																																																														The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

					The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

																																The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

																																																														The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		AAAThe `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The    `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The                               `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The                                                             `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The ````inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The ```````````````````````````````inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `````````````````````````````````````````````````````````````inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `AAAinline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline```` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline``````````````````````````````` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline````````````````````````````````````````````````````````````` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline`    style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline`                               style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline`                                                             style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` AAAstyle is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstyle is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstyle is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style    is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style                               is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style                                                             is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style AAAis useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is    useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is                               useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is                                                             useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is AAAuseful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful    if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful                               if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful                                                             if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful AAAif you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if    you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if                               you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if                                                             you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if AAAyou already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you    already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you                               already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you                                                             already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you AAAalready have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalready have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalready have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already    have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already                               have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already                                                             have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already AAAhave a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have    a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have                               a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have                                                             a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have AAAa table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a    table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a                               table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a                                                             table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a AAAtable that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table    that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table                               that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table                                                             that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table AAAthat you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that    you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that                               you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that                                                             you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that AAAyou quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you    quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you                               quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you                                                             quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you AAAquickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAquickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAquickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly    want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly                               want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly                                                             want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly AAAwant to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwant to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwant to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want    to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want                               to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want                                                             to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want AAAto add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to    add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to                               add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to                                                             add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to AAAadd Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadd Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadd Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add    Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add                               Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add                                                             Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add AAAResponsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive    to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive                               to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive                                                             to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive AAAto without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to    without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to                               without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to                                                             without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to AAAwithout changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwithout changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwithout changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without    changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without                               changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without                                                             changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without AAAchanging its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchanging its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchanging its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing    its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing                               its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing                                                             its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing AAAits structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAits structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAits structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its    structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its                               structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its                                                             structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its AAAstructure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstructure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstructure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,,,, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,    while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,                               while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure,                                                             while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, AAAwhile the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhile the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhile the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while    the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while                               the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while                                                             the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while AAAthe `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the    `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the                               `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the                                                             `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the ````column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the ```````````````````````````````column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `````````````````````````````````````````````````````````````column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `AAAcolumn` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column```` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column``````````````````````````````` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column````````````````````````````````````````````````````````````` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column`    type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column`                               type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column`                                                             type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` AAAtype can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type    can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type                               can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type                                                             can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type AAAcan be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can    be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can                               be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can                                                             be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can AAAbe useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be    useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be                               useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be                                                             useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be AAAuseful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful    if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful                               if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful                                                             if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful AAAif you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if    you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if                               you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if                                                             you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if AAAyou don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you    don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you                               don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you                                                             don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you AAAdon't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdon't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdon't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don''''t want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don'''''''''''''''''''''''''''''''t want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''t want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don'AAAt want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't    want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't                               want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't                                                             want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't AAAwant the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwant the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwant the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want    the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want                               the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want                                                             the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want AAAthe first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the    first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the                               first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the                                                             first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the AAAfirst column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfirst column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first    column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first                               column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first                                                             column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first AAAcolumn's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column''''s layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column'''''''''''''''''''''''''''''''s layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''s layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column'AAAs layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's    layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's                               layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's                                                             layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's AAAlayout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlayout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlayout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout    to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout                               to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout                                                             to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout AAAto be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to    be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to                               be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to                                                             be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to AAAbe modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be    modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be                               modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be                                                             modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be AAAmodified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmodified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmodified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified    by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified                               by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified                                                             by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified AAAby the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by    the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by                               the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by                                                             the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by AAAthe padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the    padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the                               padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the                                                             padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the AAApadding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApadding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApadding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding    required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding                               required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding                                                             required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding AAArequired to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required    to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required                               to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required                                                             to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required AAAto make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to    make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to                               make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to                                                             make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to AAAmake space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmake space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmake space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make    space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make                               space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make                                                             space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make AAAspace for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAspace for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAspace for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space    for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space                               for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space                                                             for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space AAAfor the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for    the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for                               the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for                                                             the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for AAAthe inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the    inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the                               inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the                                                             inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the AAAinline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline    display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline                               display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline                                                             display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline AAAdisplay.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display....

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display...............................

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.............................................................

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.




		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.





























































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.




		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.





























































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

					Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

																																Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

																																																														Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

					Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

																																Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

																																																														Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		AAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please    note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please                               note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please                                                             note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please AAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note    that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note                               that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note                                                             that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note AAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that    as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that                               as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that                                                             as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that AAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as    with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as                               with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as                                                             with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as AAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with    all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with                               all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with                                                             all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with AAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all    other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all                               other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all                                                             other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all AAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other    configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other                               configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other                                                             configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other AAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration    options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration                               options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration                                                             options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration AAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options    for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options                               for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options                                                             for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options AAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for    Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for                               Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for                                                             Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for AAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,    this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,                               this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive,                                                             this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, AAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this    option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this                               option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this                                                             option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this AAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option    is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option                               is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option                                                             is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option AAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is    an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is                               an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is                                                             an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is AAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an    extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an                               extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an                                                             extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an AAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension    to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension                               to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension                                                             to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to    the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to                               the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to                                                             the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the    [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the                               [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the                                                             [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default    set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default                               set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default                                                             set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set    of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set                               of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set                                                             of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of    DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of                               DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of                                                             DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables    options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables                               options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables                                                             options](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]((((/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](((((((((((((((((((((((((((((((/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](////reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](///////////////////////////////reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/////////////////////////////////////////////////////////////reference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAreference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference/option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference////option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference///////////////////////////////option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/////////////////////////////////////////////////////////////option). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAoption). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)))). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option))))))))))))))))))))))))))))))). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))). This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).... This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)............................... This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)............................................................. This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).    This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).                               This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).                                                             This property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAThis property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This    property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This                               property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This                                                             property should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAproperty should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperty should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperty should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property    should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property                               should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property                                                             should be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAshould be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should    be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should                               be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should                                                             be set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAbe set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be    set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be                               set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be                                                             set in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAset in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set    in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set                               in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set                                                             in the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAin the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in    the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in                               the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in                                                             the DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAthe DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the    DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the                               DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the                                                             DataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAADataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables    initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables                               initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables                                                             initialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAinitialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation    object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation                               object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation                                                             object.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAobject.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject.
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object....
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object...............................
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.............................................................
	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.



	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.






























	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.




























































	
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
				
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
																															
		Responsive has two built in methods of managing how the child row display control is shown to the end user:

		* `inline` - where the first column in the table has additional padding added to it and the `:before` pseudo element is used to display the button.
		* `column` - where a whole column is dedicated to the show / hide control.

		The `inline` style is useful if you already have a table that you quickly want to add Responsive to without changing its structure, while the `column` type can be useful if you don't want the first column's layout to be modified by the padding required to make space for the inline display.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
																																																													</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<example title="Use the `column` control type">>>>example title="Use the `column` control type">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Use the `column` control type">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Use the `column` control type"><example title="Use the `column` control type"><<<>>><example title="Use the `column` control type"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Use the `column` control type"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Use the `column` control type">AAA<example title="Use the `column` control type">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Use the `column` control type">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><example title="Use the `column` control type"><<<<example title="Use the `column` control type"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Use the `column` control type"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Use the `column` control type"><AAAexample title="Use the `column` control type"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Use the `column` control type"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Use the `column` control type"><example    title="Use the `column` control type"><example                               title="Use the `column` control type"><example                                                             title="Use the `column` control type"><example AAAtitle="Use the `column` control type"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Use the `column` control type"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Use the `column` control type"><example title===="Use the `column` control type"><example title==============================="Use the `column` control type"><example title============================================================="Use the `column` control type"><example title=""""Use the `column` control type"><example title="""""""""""""""""""""""""""""""Use the `column` control type"><example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Use the `column` control type"><example title="AAAUse the `column` control type"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse the `column` control type"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUse the `column` control type"><example title="Use    the `column` control type"><example title="Use                               the `column` control type"><example title="Use                                                             the `column` control type"><example title="Use AAAthe `column` control type"><example title="Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `column` control type"><example title="Use AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `column` control type"><example title="Use the    `column` control type"><example title="Use the                               `column` control type"><example title="Use the                                                             `column` control type"><example title="Use the ````column` control type"><example title="Use the ```````````````````````````````column` control type"><example title="Use the `````````````````````````````````````````````````````````````column` control type"><example title="Use the `AAAcolumn` control type"><example title="Use the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` control type"><example title="Use the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn` control type"><example title="Use the `column```` control type"><example title="Use the `column``````````````````````````````` control type"><example title="Use the `column````````````````````````````````````````````````````````````` control type"><example title="Use the `column`    control type"><example title="Use the `column`                               control type"><example title="Use the `column`                                                             control type"><example title="Use the `column` AAAcontrol type"><example title="Use the `column` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol type"><example title="Use the `column` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol type"><example title="Use the `column` control    type"><example title="Use the `column` control                               type"><example title="Use the `column` control                                                             type"><example title="Use the `column` control AAAtype"><example title="Use the `column` control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype"><example title="Use the `column` control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype"><example title="Use the `column` control type""""><example title="Use the `column` control type"""""""""""""""""""""""""""""""><example title="Use the `column` control type"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><example title="Use the `column` control type">>>><example title="Use the `column` control type">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Use the `column` control type">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>AAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![[[[CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![AAACDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[[[[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[




$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[































$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[





























































$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[




$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[































$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[





























































$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$$$$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$(((('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$(''''#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('####example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('###############################example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#############################################################example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#AAAexample').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example'''').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example''''''''''''''''''''''''''''''').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example')))).DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example'))))))))))))))))))))))))))))))).DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example')....DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example')...............................DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').............................................................DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').AAADataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable(((( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable((((((((((((((((((((((((((((((( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable(    {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable(                               {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable(                                                             {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {{{{
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {



	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {






























	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {




























































	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
				responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
																															responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
																																																													responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAresponsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:::: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:    {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:                               {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:                                                             {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {



		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {






























		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {




























































		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
					details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																																														details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
					details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																																														details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAdetails: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details:::: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details::::::::::::::::::::::::::::::: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details:    {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details:                               {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details:                                                             {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {{{{
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {



			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {






























			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {




























































			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
						type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																	type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																																															type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
						type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																	type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																																															type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
						type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																	type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
																																																															type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			AAAtype: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type:::: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type::::::::::::::::::::::::::::::: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type:    'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type:                               'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type:                                                             'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: ''''column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: '''''''''''''''''''''''''''''''column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'AAAcolumn'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column''''
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'''''''''''''''''''''''''''''''
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'



		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'






























		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'




























































		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
					}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
																																}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
																																																														}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
					}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
																																}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
																																																														}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}}}}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}



	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}






























	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}




























































	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
				},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
																															},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
																																																													},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	}}}},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},,,,
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},



	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},






























	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},




























































	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
				columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
																															columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
																																																													columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	AAAcolumnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs:::: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs::::::::::::::::::::::::::::::: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs:    [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs:                               [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs:                                                             [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [[[[ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [    {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [                               {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [                                                             {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {{{{
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {



		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {






























		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {




























































		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
					className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
																																className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
																																																														className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
					className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
																																className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
																																																														className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		AAAclassName: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclassName: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclassName: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className:::: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className::::::::::::::::::::::::::::::: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className:    'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className:                               'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className:                                                             'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: ''''control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: '''''''''''''''''''''''''''''''control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'AAAcontrol',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control'''',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control''''''''''''''''''''''''''''''',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',,,,
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',



		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',






























		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',




























































		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
					orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
																																orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
																																																														orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
					orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
																																orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
																																																														orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		AAAorderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable:::: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable::::::::::::::::::::::::::::::: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable:    false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable:                               false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable:                                                             false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: AAAfalse,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfalse,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfalse,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,,,,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,



		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,






























		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,




























































		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
					targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
																																targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
																																																														targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
					targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
																																targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
																																																														targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		AAAtargets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtargets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtargets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets::::   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:::::::::::::::::::::::::::::::   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:      0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                 0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                                               0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:      0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                 0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                                               0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:      0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                 0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:                                                               0
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   1110
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   1111111111111111111111111111110
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   1111111111111111111111111111111111111111111111111111111111110
	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0



	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0






























	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0




























































	} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
				} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
																															} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
																																																													} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}}}} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}    ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}                               ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	}                                                             ],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ]]]],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],,,,
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],



	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],






























	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],




























































	order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
				order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
																															order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
																																																													order: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	AAAorder: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order:::: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order::::::::::::::::::::::::::::::: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order:    [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order:                               [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order:                                                             [ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [[[[ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ 1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [    1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [                               1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [                                                             1, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1111, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1111111111111111111111111111111, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1111111111111111111111111111111111111111111111111111111111111, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,,,, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,    'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,                               'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1,                                                             'asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, ''''asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, '''''''''''''''''''''''''''''''asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''asc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'AAAasc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAasc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAasc' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc'''' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc''''''''''''''''''''''''''''''' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc'    ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc'                               ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc'                                                             ]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]]]]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]



} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]






























} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]




























































} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}    );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}                               );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
}                                                             );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} ))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} )))))))))))))))))))))))))))))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );




]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );





























































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );




]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );





























































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		details: {
			type: 'column'
		}
	},
	columnDefs: [ {
		className: 'control',
		orderable: false,
		targets:   0
	} ],
	order: [ 1, 'asc' ]
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example></example><<<>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>AAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example><<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><////example><///////////////////////////////example></////////////////////////////////////////////////////////////example></AAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></example>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































</dt-option>>>>/dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-option></dt-option><<<>>></dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option>AAA</dt-option>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-option>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option><<<</dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-option><////dt-option><///////////////////////////////dt-option></////////////////////////////////////////////////////////////dt-option></AAAdt-option></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option></dt----option></dt-------------------------------option></dt-------------------------------------------------------------option></dt-AAAoption></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption></dt-option>>>></dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>