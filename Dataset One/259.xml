<?xml version="1.0" encoding="UTF-8" ?>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>AAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><????xml version="1.0" encoding="UTF-8" ?><???????????????????????????????xml version="1.0" encoding="UTF-8" ?><?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?><?AAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?xml    version="1.0" encoding="UTF-8" ?><?xml                               version="1.0" encoding="UTF-8" ?><?xml                                                             version="1.0" encoding="UTF-8" ?><?xml AAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml version===="1.0" encoding="UTF-8" ?><?xml version==============================="1.0" encoding="UTF-8" ?><?xml version============================================================="1.0" encoding="UTF-8" ?><?xml version=""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="1111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1....0" encoding="UTF-8" ?><?xml version="1...............................0" encoding="UTF-8" ?><?xml version="1.............................................................0" encoding="UTF-8" ?><?xml version="1.1110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.0"""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0"    encoding="UTF-8" ?><?xml version="1.0"                               encoding="UTF-8" ?><?xml version="1.0"                                                             encoding="UTF-8" ?><?xml version="1.0" AAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" encoding===="UTF-8" ?><?xml version="1.0" encoding==============================="UTF-8" ?><?xml version="1.0" encoding============================================================="UTF-8" ?><?xml version="1.0" encoding=""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="AAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="UTF----8" ?><?xml version="1.0" encoding="UTF-------------------------------8" ?><?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?><?xml version="1.0" encoding="UTF-1118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-8"""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8"    ?><?xml version="1.0" encoding="UTF-8"                               ?><?xml version="1.0" encoding="UTF-8"                                                             ?><?xml version="1.0" encoding="UTF-8" ????><?xml version="1.0" encoding="UTF-8" ???????????????????????????????><?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????><?xml version="1.0" encoding="UTF-8" ?>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">>>>dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-option library="Responsive"><dt-option library="Responsive"><<<>>><dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">AAA<dt-option library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-option library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><dt-option library="Responsive"><<<<dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-option library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-option library="Responsive"><AAAdt-option library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option library="Responsive"><dt----option library="Responsive"><dt-------------------------------option library="Responsive"><dt-------------------------------------------------------------option library="Responsive"><dt-AAAoption library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption library="Responsive"><dt-option    library="Responsive"><dt-option                               library="Responsive"><dt-option                                                             library="Responsive"><dt-option AAAlibrary="Responsive"><dt-option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-option library===="Responsive"><dt-option library==============================="Responsive"><dt-option library============================================================="Responsive"><dt-option library=""""Responsive"><dt-option library="""""""""""""""""""""""""""""""Responsive"><dt-option library="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive"><dt-option library="AAAResponsive"><dt-option library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-option library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-option library="Responsive""""><dt-option library="Responsive"""""""""""""""""""""""""""""""><dt-option library="Responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><dt-option library="Responsive">>>><dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-option library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<name>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name><name><<<>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>AAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><AAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><name>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.breakpointsresponsive.breakpoints<<<>>>responsive.breakpoints<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.breakpoints<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.breakpointsAAAresponsive.breakpointsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.breakpointsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsresponsive.breakpointsAAAresponsive.breakpointsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.breakpointsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.breakpointsresponsive....breakpointsresponsive...............................breakpointsresponsive.............................................................breakpointsresponsive.AAAbreakpointsresponsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpointsresponsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints</name>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name></name><<<>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>AAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name><<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><////name><///////////////////////////////name></////////////////////////////////////////////////////////////name></AAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></name>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<summary>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary><summary><<<>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>AAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><AAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><summary>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instance<<<>>>Set the breakpoints for a Responsive instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the breakpoints for a Responsive instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Set the breakpoints for a Responsive instanceAAASet the breakpoints for a Responsive instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the breakpoints for a Responsive instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceSet the breakpoints for a Responsive instanceAAASet the breakpoints for a Responsive instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the breakpoints for a Responsive instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet the breakpoints for a Responsive instanceSet    the breakpoints for a Responsive instanceSet                               the breakpoints for a Responsive instanceSet                                                             the breakpoints for a Responsive instanceSet AAAthe breakpoints for a Responsive instanceSet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoints for a Responsive instanceSet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoints for a Responsive instanceSet the    breakpoints for a Responsive instanceSet the                               breakpoints for a Responsive instanceSet the                                                             breakpoints for a Responsive instanceSet the AAAbreakpoints for a Responsive instanceSet the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints for a Responsive instanceSet the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints for a Responsive instanceSet the breakpoints    for a Responsive instanceSet the breakpoints                               for a Responsive instanceSet the breakpoints                                                             for a Responsive instanceSet the breakpoints AAAfor a Responsive instanceSet the breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor a Responsive instanceSet the breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor a Responsive instanceSet the breakpoints for    a Responsive instanceSet the breakpoints for                               a Responsive instanceSet the breakpoints for                                                             a Responsive instanceSet the breakpoints for AAAa Responsive instanceSet the breakpoints for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa Responsive instanceSet the breakpoints for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa Responsive instanceSet the breakpoints for a    Responsive instanceSet the breakpoints for a                               Responsive instanceSet the breakpoints for a                                                             Responsive instanceSet the breakpoints for a AAAResponsive instanceSet the breakpoints for a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive instanceSet the breakpoints for a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive instanceSet the breakpoints for a Responsive    instanceSet the breakpoints for a Responsive                               instanceSet the breakpoints for a Responsive                                                             instanceSet the breakpoints for a Responsive AAAinstanceSet the breakpoints for a Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstanceSet the breakpoints for a Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance</summary>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary></summary><<<>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>AAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary><<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><////summary><///////////////////////////////summary></////////////////////////////////////////////////////////////summary></AAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></summary>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<since>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since><since><<<>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>AAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><AAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><since>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0Responsive 1.0.0<<<>>>Responsive 1.0.0<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Responsive 1.0.0AAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0Responsive 1.0.0AAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive 1.0.0Responsive    1.0.0Responsive                               1.0.0Responsive                                                             1.0.0Responsive 1111.0.0Responsive 1111111111111111111111111111111.0.0Responsive 1111111111111111111111111111111111111111111111111111111111111.0.0Responsive 1....0.0Responsive 1...............................0.0Responsive 1.............................................................0.0Responsive 1.1110.0Responsive 1.1111111111111111111111111111110.0Responsive 1.1111111111111111111111111111111111111111111111111111111111110.0Responsive 1.0....0Responsive 1.0...............................0Responsive 1.0.............................................................0Responsive 1.0.1110Responsive 1.0.1111111111111111111111111111110Responsive 1.0.1111111111111111111111111111111111111111111111111111111111110</since>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since></since><<<>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>AAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since><<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><////since><///////////////////////////////since></////////////////////////////////////////////////////////////since></AAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></since>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<type type="array">>>>type type="array">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="array">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="array"><type type="array"><<<>>><type type="array"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="array"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="array">AAA<type type="array">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="array">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><type type="array"><<<<type type="array"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="array"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="array"><AAAtype type="array"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="array"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="array"><type    type="array"><type                               type="array"><type                                                             type="array"><type AAAtype="array"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="array"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="array"><type type===="array"><type type==============================="array"><type type============================================================="array"><type type=""""array"><type type="""""""""""""""""""""""""""""""array"><type type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""array"><type type="AAAarray"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray"><type type="array""""><type type="array"""""""""""""""""""""""""""""""><type type="array"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><type type="array">>>><type type="array">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="array">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			
			<<<>>>
			<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			AAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			



			






























			




























































			
						
																																	
																																																															
						
																																	
																																																															
						
																																	
																																																															<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>>![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<>>><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>AAA<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><!!!![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![[[[CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![AAACDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[[[[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[



			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[






























			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[




























































			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
						An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																	An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																																															An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
						An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																	An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																																															An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
						An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																	An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
																																																															An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			AAAAn array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An    array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An                               array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An                                                             array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An AAAarray of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array    of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array                               of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array                                                             of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array AAAof objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of    objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of                               objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of                                                             objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of AAAobjects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobjects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobjects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,,,, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,    where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,                               where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects,                                                             where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, AAAwhere each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where    each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where                               each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where                                                             each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where AAAeach object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each    object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each                               object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each                                                             object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each AAAobject contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object    contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object                               contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object                                                             contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object AAAcontains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains    two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains                               two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains                                                             two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains AAAtwo properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two    properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two                               properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two                                                             properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two AAAproperties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties    that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties                               that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties                                                             that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties AAAthat describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that    describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that                               describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that                                                             describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that AAAdescribe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescribe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescribe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe    each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe                               each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe                                                             each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe AAAeach breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each    breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each                               breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each                                                             breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each AAAbreakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint::::

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:::::::::::::::::::::::::::::::

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:




			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:































			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:





























































			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:




			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:































			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:





























































			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

						* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																	* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																																															* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

						* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																	* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																																															* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

						* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																	* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

																																																															* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			**** `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			******************************* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			************************************************************* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			*    `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			*                               `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			*                                                             `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* ````name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* ```````````````````````````````name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `````````````````````````````````````````````````````````````name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `AAAname` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name```` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name``````````````````````````````` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name````````````````````````````````````````````````````````````` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name`    - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name`                               - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name`                                                             - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` ---- the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` ------------------------------- the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` ------------------------------------------------------------- the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` -    the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` -                               the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` -                                                             the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - AAAthe breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the    breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the                               breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the                                                             breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the AAAbreakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint    name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint                               name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint                                                             name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint AAAname allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name    allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name                               allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name                                                             allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name AAAallowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing    class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing                               class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing                                                             class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing AAAclass targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class    targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class                               targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class                                                             targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class AAAtargeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtargeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtargeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting.... This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting............................... This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting............................................................. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting.    This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting.                               This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting.                                                             This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. AAAThis can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This    can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This                               can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This                                                             can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This AAAcan be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can    be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can                               be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can                                                             be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can AAAbe a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be    a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be                               a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be                                                             a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be AAAa single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a    single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a                               single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a                                                             single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a AAAsingle word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsingle word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsingle word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single    word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single                               word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single                                                             word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single AAAword, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAword, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAword, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,,,, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,    or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,                               or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word,                                                             or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, AAAor append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or    append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or                               append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or                                                             append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or AAAappend `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAappend `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAappend `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append    `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append                               `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append                                                             `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append ````\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append ```````````````````````````````\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `````````````````````````````````````````````````````````````\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\\\\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\----[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-------------------------------[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-------------------------------------------------------------[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[[[[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[AAAa-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a----z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-------------------------------z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-------------------------------------------------------------z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-AAAz]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAz]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAz]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]]]]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]```` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]``````````````````````````````` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]````````````````````````````````````````````````````````````` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]`    to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]`                               to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]`                                                             to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` AAAto provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to    provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to                               provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to                                                             provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to AAAprovide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide    sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide                               sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide                                                             sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide AAAsub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub----breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-------------------------------breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-------------------------------------------------------------breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-AAAbreakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints    as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints                               as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints                                                             as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints AAAas the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as    the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as                               the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as                                                             the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as AAAthe default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the    default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the                               default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the                                                             default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the AAAdefault does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default    does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default                               does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default                                                             does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default AAAdoes to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdoes to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdoes to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does    to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does                               to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does                                                             to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does AAAto allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to    allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to                               allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to                                                             allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to AAAallow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,,,, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,    for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,                               for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow,                                                             for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, AAAfor example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for    example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for                               example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for                                                             example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for AAAexample, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,,,, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,    tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,                               tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example,                                                             tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, AAAtablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,,,, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,    tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,                               tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet,                                                             tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, AAAtablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet    landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet                               landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet                                                             landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet AAAlandscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlandscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlandscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape    or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape                               or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape                                                             or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape AAAor tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or    tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or                               tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or                                                             tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or AAAtablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet    portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet                               portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet                                                             portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet AAAportrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAportrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAportrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait    breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait                               breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait                                                             breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait AAAbreakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints....
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints...............................
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.............................................................
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.



			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.






























			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.




























































			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
						* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																	* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																																															* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
						* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																	* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																																															* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
						* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																	* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
																																																															* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			**** `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			******************************* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			************************************************************* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			*    `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			*                               `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			*                                                             `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* ````width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* ```````````````````````````````width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `````````````````````````````````````````````````````````````width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `AAAwidth` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width```` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width``````````````````````````````` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width````````````````````````````````````````````````````````````` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width`    - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width`                               - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width`                                                             - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` ---- the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` ------------------------------- the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` ------------------------------------------------------------- the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` -    the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` -                               the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` -                                                             the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - AAAthe width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the    width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the                               width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the                                                             width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the AAAwidth (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width    (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width                               (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width                                                             (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width ((((pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (((((((((((((((((((((((((((((((pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (AAApixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels)))) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels))))))))))))))))))))))))))))))) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels)    of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels)                               of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels)                                                             of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) AAAof the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of    the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of                               the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of                                                             the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of AAAthe page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the    page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the                               page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the                                                             page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the AAApage viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApage viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApage viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page    viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page                               viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page                                                             viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page AAAviewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAviewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAviewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport    at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport                               at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport                                                             at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport AAAat which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at    which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at                               which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at                                                             which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at AAAwhich this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which    this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which                               this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which                                                             this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which AAAthis breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this    breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this                               breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this                                                             breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this AAAbreakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint    will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint                               will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint                                                             will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint AAAwill apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will    apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will                               apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will                                                             apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will AAAapply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply.... The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply............................... The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply............................................................. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply.    The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply.                               The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply.                                                             The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. AAAThe value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The    value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The                               value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The                                                             value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The AAAvalue given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value    given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value                               given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value                                                             given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value AAAgiven is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgiven is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgiven is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given    is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given                               is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given                                                             is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given AAAis the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is    the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is                               the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is                                                             the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is AAAthe maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the    maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the                               maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the                                                             maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the AAAmaximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmaximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmaximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum    size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum                               size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum                                                             size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum AAAsize at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsize at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsize at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size    at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size                               at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size                                                             at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size AAAat which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at    which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at                               which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at                                                             which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at AAAwhich this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which    this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which                               this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which                                                             this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which AAAthis breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this    breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this                               breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this                                                             breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this AAAbreakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint    will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint                               will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint                                                             will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint AAAwill be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will    be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will                               be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will                                                             be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will AAAbe applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be    applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be                               applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be                                                             applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be AAAapplied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapplied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapplied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,,,, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,    and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,                               and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied,                                                             and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, AAAand it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and    it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and                               it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and                                                             it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and AAAit will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it    will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it                               will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it                                                             will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it AAAwill be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will    be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will                               be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will                                                             be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will AAAbe used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be    used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be                               used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be                                                             used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be AAAused until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used    until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used                               until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used                                                             until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used AAAuntil the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuntil the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuntil the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until    the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until                               the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until                                                             the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until AAAthe next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the    next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the                               next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the                                                             next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the AAAnext breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnext breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnext breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next    breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next                               breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next                                                             breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next AAAbreakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint    is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint                               is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint                                                             is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint AAAis found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is    found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is                               found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is                                                             found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is AAAfound. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfound. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfound. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found.... For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found............................... For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found............................................................. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found.    For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found.                               For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found.                                                             For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. AAAFor example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFor example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFor example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For    example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For                               example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For                                                             example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For AAAexample, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,,,, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,    if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,                               if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example,                                                             if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, AAAif using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if    using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if                               using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if                                                             using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if AAAusing the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using    the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using                               the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using                                                             the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using AAAthe default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the    default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the                               default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the                                                             default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the AAAdefault breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default    breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default                               breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default                                                             breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default AAAbreakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints    (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints                               (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints                                                             (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints ((((above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (((((((((((((((((((((((((((((((above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (AAAabove), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAabove), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAabove), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above)))), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above))))))))))))))))))))))))))))))), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),,,, the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),    the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),                               the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above),                                                             the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), AAAthe `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the    `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the                               `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the                                                             `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the ````tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the ```````````````````````````````tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `````````````````````````````````````````````````````````````tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `AAAtablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet----l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-------------------------------l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-------------------------------------------------------------l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-AAAl` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l```` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l``````````````````````````````` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l````````````````````````````````````````````````````````````` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l`    breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l`                               breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l`                                                             breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` AAAbreakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint    will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint                               will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint                                                             will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint AAAwill be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will    be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will                               be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will                                                             be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will AAAbe applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be    applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be                               applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be                                                             applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be AAAapplied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapplied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapplied for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied    for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied                               for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied                                                             for `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied AAAfor `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for    `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for                               `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for                                                             `768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for ````768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for ```````````````````````````````768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `````````````````````````````````````````````````````````````768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `111768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `111111111111111111111111111111768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `111111111111111111111111111111111111111111111111111111111111768 < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768    < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768                               < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768                                                             < x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <<<< x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <    x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <                               x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 <                                                             x <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < AAAx <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x    <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x                               <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x                                                             <= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <<<<= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <==== 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <=============================== 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <============================================================= 1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <=    1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <=                               1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <=                                                             1024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1111024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1111111111111111111111111111111024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1111111111111111111111111111111111111111111111111111111111111024` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024```` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024``````````````````````````````` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024````````````````````````````````````````````````````````````` (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024`    (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024`                               (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024`                                                             (where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` ((((where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (((((((((((((((((((((((((((((((where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((where `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (AAAwhere `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhere `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where    `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where                               `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where                                                             `x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where ````x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where ```````````````````````````````x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `````````````````````````````````````````````````````````````x` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `AAAx` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x```` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x``````````````````````````````` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x````````````````````````````````````````````````````````````` is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x`    is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x`                               is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x`                                                             is the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` AAAis the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is    the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is                               the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is                                                             the viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is AAAthe viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the    viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the                               viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the                                                             viewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the AAAviewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAviewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAviewport width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport    width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport                               width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport                                                             width).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport AAAwidth).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width)))).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width))))))))))))))))))))))))))))))).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width)....
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width)...............................
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).............................................................
			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).



			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).






























			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).




























































			]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
						]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																	]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																																															]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
						]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																	]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																																															]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
						]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																	]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
																																																															]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[
			An array of objects, where each object contains two properties that describe each breakpoint:

			* `name` - the breakpoint name allowing class targeting. This can be a single word, or append `\-[a-z]` to provide sub-breakpoints as the default does to allow, for example, tablet, tablet landscape or tablet portrait breakpoints.
			* `width` - the width (pixels) of the page viewport at which this breakpoint will apply. The value given is the maximum size at which this breakpoint will be applied, and it will be used until the next breakpoint is found. For example, if using the default breakpoints (above), the `tablet-l` breakpoint will be applied for `768 < x <= 1024` (where `x` is the viewport width).
			]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													</type>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type></type><<<>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>AAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type><<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><////type><///////////////////////////////type></////////////////////////////////////////////////////////////type></AAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></type>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<default value="$.fn.dataTable.Responsive.breakpoints">>>>default value="$.fn.dataTable.Responsive.breakpoints">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>default value="$.fn.dataTable.Responsive.breakpoints">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><<<>>><default value="$.fn.dataTable.Responsive.breakpoints"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="$.fn.dataTable.Responsive.breakpoints"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="$.fn.dataTable.Responsive.breakpoints">AAA<default value="$.fn.dataTable.Responsive.breakpoints">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<default value="$.fn.dataTable.Responsive.breakpoints">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><default value="$.fn.dataTable.Responsive.breakpoints"><<<<default value="$.fn.dataTable.Responsive.breakpoints"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<default value="$.fn.dataTable.Responsive.breakpoints"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<default value="$.fn.dataTable.Responsive.breakpoints"><AAAdefault value="$.fn.dataTable.Responsive.breakpoints"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault value="$.fn.dataTable.Responsive.breakpoints"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault value="$.fn.dataTable.Responsive.breakpoints"><default    value="$.fn.dataTable.Responsive.breakpoints"><default                               value="$.fn.dataTable.Responsive.breakpoints"><default                                                             value="$.fn.dataTable.Responsive.breakpoints"><default AAAvalue="$.fn.dataTable.Responsive.breakpoints"><default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue="$.fn.dataTable.Responsive.breakpoints"><default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvalue="$.fn.dataTable.Responsive.breakpoints"><default value===="$.fn.dataTable.Responsive.breakpoints"><default value==============================="$.fn.dataTable.Responsive.breakpoints"><default value============================================================="$.fn.dataTable.Responsive.breakpoints"><default value=""""$.fn.dataTable.Responsive.breakpoints"><default value="""""""""""""""""""""""""""""""$.fn.dataTable.Responsive.breakpoints"><default value="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""$.fn.dataTable.Responsive.breakpoints"><default value="$$$$.fn.dataTable.Responsive.breakpoints"><default value="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints"><default value="$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints"><default value="$....fn.dataTable.Responsive.breakpoints"><default value="$...............................fn.dataTable.Responsive.breakpoints"><default value="$.............................................................fn.dataTable.Responsive.breakpoints"><default value="$.AAAfn.dataTable.Responsive.breakpoints"><default value="$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints"><default value="$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints"><default value="$.fn....dataTable.Responsive.breakpoints"><default value="$.fn...............................dataTable.Responsive.breakpoints"><default value="$.fn.............................................................dataTable.Responsive.breakpoints"><default value="$.fn.AAAdataTable.Responsive.breakpoints"><default value="$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints"><default value="$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints"><default value="$.fn.dataTable....Responsive.breakpoints"><default value="$.fn.dataTable...............................Responsive.breakpoints"><default value="$.fn.dataTable.............................................................Responsive.breakpoints"><default value="$.fn.dataTable.AAAResponsive.breakpoints"><default value="$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints"><default value="$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints"><default value="$.fn.dataTable.Responsive....breakpoints"><default value="$.fn.dataTable.Responsive...............................breakpoints"><default value="$.fn.dataTable.Responsive.............................................................breakpoints"><default value="$.fn.dataTable.Responsive.AAAbreakpoints"><default value="$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints"><default value="$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints"><default value="$.fn.dataTable.Responsive.breakpoints""""><default value="$.fn.dataTable.Responsive.breakpoints"""""""""""""""""""""""""""""""><default value="$.fn.dataTable.Responsive.breakpoints"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><default value="$.fn.dataTable.Responsive.breakpoints">>>><default value="$.fn.dataTable.Responsive.breakpoints">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><default value="$.fn.dataTable.Responsive.breakpoints">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	<<<>>>
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	AAA
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	



		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	






























		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	




























































		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
					The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
																																The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
																																																														The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
					The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
																																The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
																																																														The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		AAAThe default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The    default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The                               default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The                                                             default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The AAAdefault breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default    breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default                               breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default                                                             breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default AAAbreakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints    used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints                               used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints                                                             used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints AAAused by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used    by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used                               by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used                                                             by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used AAAby Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by    Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by                               Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by                                                             Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by AAAResponsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive    are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive                               are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive                                                             are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive AAAare defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are    defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are                               defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are                                                             defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are AAAdefined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined    by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined                               by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined                                                             by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined AAAby the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by    the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by                               the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by                                                             the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by AAAthe static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the    static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the                               static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the                                                             static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the AAAstatic array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstatic array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAstatic array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static    array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static                               array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static                                                             array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static AAAarray defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array    defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array                               defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array                                                             defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array AAAdefined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined    in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined                               in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined                                                             in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined AAAin this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in    this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in                               this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in                                                             this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in AAAthis object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this    object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this                               object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this                                                             object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this AAAobject. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object.... This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object............................... This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object............................................................. This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object.    This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object.                               This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object.                                                             This provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. AAAThis provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This    provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This                               provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This                                                             provides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This AAAprovides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides    the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides                               the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides                                                             the ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides AAAthe ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the    ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the                               ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the                                                             ability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the AAAability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability    to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability                               to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability                                                             to set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability AAAto set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to    set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to                               set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to                                                             set common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to AAAset common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set    common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set                               common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set                                                             common breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set AAAcommon breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcommon breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcommon breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common    breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common                               breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common                                                             breakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common AAAbreakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints    that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints                               that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints                                                             that are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints AAAthat are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that    are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that                               are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that                                                             are used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that AAAare used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are    used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are                               used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are                                                             used by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are AAAused by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used    by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used                               by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used                                                             by all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used AAAby all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by    all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by                               all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by                                                             all tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by AAAall tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all    tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all                               tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all                                                             tables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all AAAtables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtables easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables    easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables                               easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables                                                             easily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables AAAeasily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeasily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeasily, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,,,, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,    if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,                               if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily,                                                             if required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, AAAif required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if    required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if                               required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if                                                             required.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if AAArequired.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired.
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required....
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required...............................
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.............................................................
	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.



	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.






























	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.




























































	
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
				
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
																															
		The default breakpoints used by Responsive are defined by the static array defined in this object. This provides the ability to set common breakpoints that are used by all tables easily, if required.
																																																													</default>>>>/default>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/default>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/default></default><<<>>></default><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></default><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></default>AAA</default>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</default>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default></default><<<</default><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</default><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</default><////default><///////////////////////////////default></////////////////////////////////////////////////////////////default></AAAdefault></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault></default>>>></default>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></default>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<>>>
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAA
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	



		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	






























		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	




























































		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
					The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																																														The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
					The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
																																																														The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAThe visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The    visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The                               visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The                                                             visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The AAAvisibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility    of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility                               of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility                                                             of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility AAAof columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of    columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of                               columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of                                                             columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of AAAcolumns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns    in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns                               in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns                                                             in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns AAAin a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in    a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in                               a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in                                                             a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in AAAa DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a    DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a                               DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a                                                             DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a AAADataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable    with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable                               with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable                                                             with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable AAAwith Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with    Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with                               Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with                                                             Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with AAAResponsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive    enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive                               enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive                                                             enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive AAAenabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAenabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAenabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled    can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled                               can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled                                                             can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled AAAcan be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can    be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can                               be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can                                                             be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can AAAbe controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be    controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be                               controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be                                                             controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be AAAcontrolled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrolled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrolled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled    by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled                               by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled                                                             by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled AAAby breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by    breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by                               breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by                                                             breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by AAAbreakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints    and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints                               and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints                                                             and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints AAAand class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and    class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and                               class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and                                                             class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and AAAclass names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class    names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class                               names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class                                                             names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class AAAnames matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnames matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnames matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names    matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names                               matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names                                                             matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names AAAmatching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmatching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmatching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching    those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching                               those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching                                                             those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching AAAthose breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthose breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthose breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those    breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those                               breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those                                                             breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those AAAbreakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints    (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints                               (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints                                                             (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints ((((and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (((((((((((((((((((((((((((((((and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (AAAand other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and    other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and                               other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and                                                             other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and AAAother logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other    logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other                               logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other                                                             logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other AAAlogical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlogical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlogical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical    operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical                               operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical                                                             operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical AAAoperations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoperations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoperations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations)))) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations))))))))))))))))))))))))))))))) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations)    . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations)                               . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations)                                                             . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) .... This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) ............................... This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) ............................................................. This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) .    This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) .                               This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) .                                                             This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . AAAThis provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This    provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This                               provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This                                                             provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This AAAprovides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides    the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides                               the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides                                                             the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides AAAthe ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the    ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the                               ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the                                                             ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the AAAability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability    to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability                               to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability                                                             to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability AAAto exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to    exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to                               exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to                                                             exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to AAAexactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly    control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly                               control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly                                                             control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly AAAcontrol which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control    which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control                               which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control                                                             which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control AAAwhich columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which    columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which                               columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which                                                             columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which AAAcolumns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns    in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns                               in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns                                                             in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns AAAin a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in    a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in                               a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in                                                             a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in AAAa table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a    table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a                               table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a                                                             table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a AAAtable will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table    will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table                               will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table                                                             will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table AAAwill be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will    be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will                               be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will                                                             be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will AAAbe visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be    visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be                               visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be                                                             visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be AAAvisible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible    in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible                               in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible                                                             in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible AAAin each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in    each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in                               each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in                                                             each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in AAAeach device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each    device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each                               device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each                                                             device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each AAAdevice type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdevice type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdevice type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device    type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device                               type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device                                                             type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device AAAtype. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type.... [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type............................... [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type............................................................. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type.    [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type.                               [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type.                                                             [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [[[[See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [AAASee the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAASee the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASee the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See    the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See                               the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See                                                             the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See AAAthe Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the    Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the                               Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the                                                             Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the AAAResponsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive    manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive                               manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive                                                             manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive AAAmanual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual]]]](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual]((((/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](((((((((((((((((((((((((((((((/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](////extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](///////////////////////////////extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/////////////////////////////////////////////////////////////extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/AAAextensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions////responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions///////////////////////////////responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/////////////////////////////////////////////////////////////responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/AAAresponsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive////classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive///////////////////////////////classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/////////////////////////////////////////////////////////////classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/AAAclasses) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes)))) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes))))))))))))))))))))))))))))))) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes)    for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes)                               for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes)                                                             for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) AAAfor more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for    more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for                               more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for                                                             more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for AAAmore information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmore information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmore information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more    information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more                               information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more                                                             information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more AAAinformation.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information....

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information...............................

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.............................................................

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.




		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.































		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.





























































		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.




		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.































		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.





























































		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

					The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

																																The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

																																																														The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

					The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

																																The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

																																																														The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		AAAThe breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The    breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The                               breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The                                                             breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The AAAbreakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints    that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints                               that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints                                                             that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints AAAthat are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that    are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that                               are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that                                                             are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that AAAare used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are    used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are                               used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are                                                             used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are AAAused by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used    by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used                               by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used                                                             by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used AAAby a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by    a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by                               a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by                                                             a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by AAAa Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a    Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a                               Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a                                                             Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a AAAResponsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive    instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive                               instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive                                                             instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive AAAinstance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance    are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance                               are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance                                                             are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance AAAare unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are    unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are                               unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are                                                             unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are AAAunique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAunique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAunique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique    to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique                               to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique                                                             to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique AAAto that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to    that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to                               that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to                                                             that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to AAAthat instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that    instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that                               instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that                                                             instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that AAAinstance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance    (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance                               (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance                                                             (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance ((((i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (((((((((((((((((((((((((((((((i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (AAAi.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i....e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i...............................e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.............................................................e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.AAAe. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e.... each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e............................... each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e............................................................. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e.    each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e.                               each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e.                                                             each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. AAAeach table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeach table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each    table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each                               table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each                                                             table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each AAAtable) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table)))) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table))))))))))))))))))))))))))))))) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table)    allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table)                               allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table)                                                             allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) AAAallowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing    different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing                               different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing                                                             different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing AAAdifferent breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdifferent breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdifferent breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different    breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different                               breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different                                                             breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different AAAbreakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints    to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints                               to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints                                                             to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints AAAto be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to    be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to                               be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to                                                             be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to AAAbe set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be    set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be                               set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be                                                             set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be AAAset for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set    for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set                               for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set                                                             for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set AAAfor different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for    different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for                               different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for                                                             different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for AAAdifferent tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdifferent tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdifferent tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different    tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different                               tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different                                                             tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different AAAtables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables    is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables                               is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables                                                             is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables AAAis needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is    needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is                               needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is                                                             needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is AAAneeded.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAneeded.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAneeded.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed....

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed...............................

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.............................................................

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.




		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.































		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.





























































		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.




		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.































		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.





























































		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

					The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

																																The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

																																																														The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

					The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

																																The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

																																																														The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		AAAThe default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The    default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The                               default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The                                                             default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The AAAdefault breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default    breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default                               breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default                                                             breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default AAAbreakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints    defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints                               defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints                                                             defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints AAAdefined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined    by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined                               by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined                                                             by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined AAAby `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by    `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by                               `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by                                                             `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by ````$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by ```````````````````````````````$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `````````````````````````````````````````````````````````````$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$$$$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$....fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$...............................fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.............................................................fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.AAAfn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn....dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn...............................dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.............................................................dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.AAAdataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable....Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable...............................Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.............................................................Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.AAAResponsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive....breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive...............................breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.............................................................breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.AAAbreakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints```` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints``````````````````````````````` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints````````````````````````````````````````````````````````````` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints`    is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints`                               is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints`                                                             is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` AAAis:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is::::

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:::::::::::::::::::::::::::::::

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:




		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:































		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:





























































		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:




		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:































		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:





























































		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

					```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

																																```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

																																																														```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

					```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

																																```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

																																																														```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		``````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		`````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```````````````````````````````````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		``````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		`````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```````````````````````````````````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		``````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		`````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```````````````````````````````````````````````````````````````js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```AAAjs
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js



		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js






























		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js




























































		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
					[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
																																[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
																																																														[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
					[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
																																[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
																																																														[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[[[[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[



			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[






























			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[




























































			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
						{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																	{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																																															{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
						{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																	{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																																															{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
						{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																	{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
																																																															{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{{{{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{    name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{                               name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{                                                             name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ AAAname: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name:::: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name::::::::::::::::::::::::::::::: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name:    'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name:                               'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name:                                                             'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: ''''desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: '''''''''''''''''''''''''''''''desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'AAAdesktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop'''',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop''''''''''''''''''''''''''''''',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',,,,  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',     width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',                                width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',                                                              width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',     width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',                                width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',                                                              width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  AAAwidth: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width:::: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width::::::::::::::::::::::::::::::: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width:    Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width:                               Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width:                                                             Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: AAAInfinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity    },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity                               },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity                                                             },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity }}}},
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },,,,
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },



			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },






























			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },




























































			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
						{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																	{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																																															{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
						{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																	{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																																															{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
						{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																	{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
																																																															{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{{{{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{    name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{                               name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{                                                             name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ AAAname: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name:::: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name::::::::::::::::::::::::::::::: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name:    'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name:                               'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name:                                                             'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: ''''tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: '''''''''''''''''''''''''''''''tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'AAAtablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet----l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-------------------------------l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-------------------------------------------------------------l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-AAAl', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l'''', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l''''''''''''''''''''''''''''''', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',,,, width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',    width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',                               width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l',                                                             width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', AAAwidth: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width:::: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width::::::::::::::::::::::::::::::: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width:    1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width:                               1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width:                                                             1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1111024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1111111111111111111111111111111024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1111111111111111111111111111111111111111111111111111111111111024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024    },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024                               },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024                                                             },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 }}}},
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },,,,
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },



			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },






























			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },




























































			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
						{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																	{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																																															{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
						{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																	{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																																															{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
						{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																	{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
																																																															{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{{{{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{    name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{                               name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{                                                             name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ AAAname: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name:::: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name::::::::::::::::::::::::::::::: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name:    'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name:                               'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name:                                                             'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: ''''tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: '''''''''''''''''''''''''''''''tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'AAAtablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet----p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-------------------------------p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-------------------------------------------------------------p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-AAAp', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p'''', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p''''''''''''''''''''''''''''''', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',,,, width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',    width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',                               width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p',                                                             width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', AAAwidth: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width:::: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width::::::::::::::::::::::::::::::: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width:    768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width:                               768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width:                                                             768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 111768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 111111111111111111111111111111768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 111111111111111111111111111111111111111111111111111111111111768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768    },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768                               },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768                                                             },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 }}}},
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },,,,
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },



			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },






























			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },




























































			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
						{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																	{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																																															{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
						{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																	{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																																															{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
						{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																	{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
																																																															{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{{{{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{    name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{                               name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{                                                             name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ AAAname: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name:::: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name::::::::::::::::::::::::::::::: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name:    'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name:                               'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name:                                                             'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: ''''mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: '''''''''''''''''''''''''''''''mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'AAAmobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile----l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-------------------------------l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-------------------------------------------------------------l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-AAAl', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l'''', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l''''''''''''''''''''''''''''''', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',,,, width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',    width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',                               width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l',                                                             width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', AAAwidth: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width:::: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width::::::::::::::::::::::::::::::: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width:    480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width:                               480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width:                                                             480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 111480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 111111111111111111111111111111480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 111111111111111111111111111111111111111111111111111111111111480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480    },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480                               },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480                                                             },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 }}}},
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },,,,
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },



			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },






























			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },




























































			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
						{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																	{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																																															{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
						{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																	{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																																															{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
						{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																	{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
																																																															{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{{{{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{    name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{                               name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{                                                             name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ AAAname: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name:::: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name::::::::::::::::::::::::::::::: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name:    'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name:                               'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name:                                                             'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: ''''mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: '''''''''''''''''''''''''''''''mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'AAAmobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile----p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-------------------------------p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-------------------------------------------------------------p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-AAAp', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p'''', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p''''''''''''''''''''''''''''''', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',,,, width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',    width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',                               width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p',                                                             width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', AAAwidth: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width:::: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width::::::::::::::::::::::::::::::: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width:    320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width:                               320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width:                                                             320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 111320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 111111111111111111111111111111320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 111111111111111111111111111111111111111111111111111111111111320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320    }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320                               }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320                                                             }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }}}}
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }



		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }






























		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }




























































		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
					]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
																																]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
																																																														]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
					]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
																																]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
																																																														]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]]]]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]



		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]






























		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]




























































		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
					```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
																																```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
																																																														```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
					```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
																																```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
																																																														```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		``````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		`````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```````````````````````````````````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		``````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		`````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```````````````````````````````````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		``````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		`````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```````````````````````````````````````````````````````````````

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```




		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```































		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```





























































		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```




		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```































		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```





























































		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

					Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

																																Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

																																																														Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

					Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

																																Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

																																																														Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		AAANote that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note    that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note                               that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note                                                             that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note AAAthat if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that    if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that                               if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that                                                             if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that AAAif you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if    you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if                               you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if                                                             you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if AAAyou define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you    define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you                               define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you                                                             define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you AAAdefine your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefine your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefine your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define    your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define                               your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define                                                             your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define AAAyour own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyour own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyour own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your    own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your                               own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your                                                             own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your AAAown array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAown array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAown array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own    array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own                               array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own                                                             array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own AAAarray of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array    of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array                               of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array                                                             of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array AAAof breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of    breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of                               breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of                                                             breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of AAAbreakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,,,, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,    ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,                               ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints,                                                             ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, AAAordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering    of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering                               of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering                                                             of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering AAAof the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of    the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of                               the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of                                                             the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of AAAthe breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the    breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the                               breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the                                                             breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the AAAbreakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints    is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints                               is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints                                                             is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints AAAis not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is    not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is                               not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is                                                             not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is AAAnot important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not    important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not                               important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not                                                             important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not AAAimportant. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimportant. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimportant. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important.... Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important............................... Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important............................................................. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important.    Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important.                               Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important.                                                             Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. AAAResponsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive    will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive                               will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive                                                             will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive AAAwill automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will    automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will                               automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will                                                             automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will AAAautomatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAautomatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAautomatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically    sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically                               sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically                                                             sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically AAAsort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort    the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort                               the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort                                                             the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort AAAthe array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the    array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the                               array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the                                                             array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the AAAarray into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAarray into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array    into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array                               into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array                                                             into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array AAAinto its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinto its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinto its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into    its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into                               its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into                                                             its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into AAAits required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAits required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAits required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its    required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its                               required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its                                                             required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its AAArequired internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required    internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required                               internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required                                                             internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required AAAinternal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinternal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinternal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal    order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal                               order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal                                                             order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal AAAorder before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order    before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order                               before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order                                                             before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order AAAbefore using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbefore using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbefore using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before    using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before                               using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before                                                             using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before AAAusing it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using    it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using                               it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using                                                             it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using AAAit.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it....

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it...............................

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.............................................................

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.




		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.





























































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.




		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.





























































		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

					Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

																																Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

																																																														Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

					Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

																																Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

																																																														Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		AAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPlease note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please    note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please                               note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please                                                             note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please AAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnote that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note    that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note                               that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note                                                             that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note AAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that    as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that                               as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that                                                             as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that AAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as    with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as                               with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as                                                             with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as AAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with    all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with                               all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with                                                             all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with AAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAall other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all    other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all                               other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all                                                             other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all AAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other    configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other                               configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other                                                             configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other AAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconfiguration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration    options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration                               options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration                                                             options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration AAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options    for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options                               for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options                                                             for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options AAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for    Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for                               Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for                                                             Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for AAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,    this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,                               this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive,                                                             this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, AAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this    option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this                               option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this                                                             option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this AAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option    is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option                               is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option                                                             is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option AAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is    an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is                               an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is                                                             an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is AAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an    extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an                               extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an                                                             extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an AAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension    to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension                               to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension                                                             to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to    the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to                               the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to                                                             the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the    [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the                               [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the                                                             [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default    set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default                               set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default                                                             set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set    of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set                               of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set                                                             of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of    DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of                               DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of                                                             DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables    options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables                               options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables                                                             options](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoptions](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options]((((/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](((((((((((((((((((((((((((((((/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](////reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](///////////////////////////////reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/////////////////////////////////////////////////////////////reference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAreference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference/option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference////option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference///////////////////////////////option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/////////////////////////////////////////////////////////////option). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAoption). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)))). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option))))))))))))))))))))))))))))))). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))). This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).... This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)............................... This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option)............................................................. This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).    This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).                               This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option).                                                             This property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAThis property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This    property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This                               property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This                                                             property should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAproperty should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperty should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperty should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property    should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property                               should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property                                                             should be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAshould be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshould be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should    be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should                               be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should                                                             be set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAbe set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be    set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be                               set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be                                                             set in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAset in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAset in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set    in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set                               in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set                                                             in the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAin the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in    the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in                               the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in                                                             the DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAthe DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the    DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the                               DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the                                                             DataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAADataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables    initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables                               initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables                                                             initialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAinitialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation    object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation                               object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation                                                             object.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAobject.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject.
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object....
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object...............................
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.............................................................
	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.



	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.






























	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.




























































	
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
				
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
																															
		The visibility of columns in a DataTable with Responsive enabled can be controlled by breakpoints and class names matching those breakpoints (and other logical operations) . This provides the ability to exactly control which columns in a table will be visible in each device type. [See the Responsive manual](/extensions/responsive/classes) for more information.

		The breakpoints that are used by a Responsive instance are unique to that instance (i.e. each table) allowing different breakpoints to be set for different tables is needed.

		The default breakpoints defined by `$.fn.dataTable.Responsive.breakpoints` is:

		```js
		[
			{ name: 'desktop',  width: Infinity },
			{ name: 'tablet-l', width: 1024 },
			{ name: 'tablet-p', width: 768 },
			{ name: 'mobile-l', width: 480 },
			{ name: 'mobile-p', width: 320 }
		]
		```

		Note that if you define your own array of breakpoints, ordering of the breakpoints is not important. Responsive will automatically sort the array into its required internal order before using it.

		Please note that as with all other configuration options for Responsive, this option is an extension to the [default set of DataTables options](/reference/option). This property should be set in the DataTables initialisation object.
																																																													</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<example title="Set custom breakpoints in the DataTables initialisation">>>>example title="Set custom breakpoints in the DataTables initialisation">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Set custom breakpoints in the DataTables initialisation">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><<<>>><example title="Set custom breakpoints in the DataTables initialisation"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints in the DataTables initialisation"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints in the DataTables initialisation">AAA<example title="Set custom breakpoints in the DataTables initialisation">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Set custom breakpoints in the DataTables initialisation">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><example title="Set custom breakpoints in the DataTables initialisation"><<<<example title="Set custom breakpoints in the DataTables initialisation"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Set custom breakpoints in the DataTables initialisation"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Set custom breakpoints in the DataTables initialisation"><AAAexample title="Set custom breakpoints in the DataTables initialisation"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Set custom breakpoints in the DataTables initialisation"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Set custom breakpoints in the DataTables initialisation"><example    title="Set custom breakpoints in the DataTables initialisation"><example                               title="Set custom breakpoints in the DataTables initialisation"><example                                                             title="Set custom breakpoints in the DataTables initialisation"><example AAAtitle="Set custom breakpoints in the DataTables initialisation"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Set custom breakpoints in the DataTables initialisation"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Set custom breakpoints in the DataTables initialisation"><example title===="Set custom breakpoints in the DataTables initialisation"><example title==============================="Set custom breakpoints in the DataTables initialisation"><example title============================================================="Set custom breakpoints in the DataTables initialisation"><example title=""""Set custom breakpoints in the DataTables initialisation"><example title="""""""""""""""""""""""""""""""Set custom breakpoints in the DataTables initialisation"><example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Set custom breakpoints in the DataTables initialisation"><example title="AAASet custom breakpoints in the DataTables initialisation"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet custom breakpoints in the DataTables initialisation"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet custom breakpoints in the DataTables initialisation"><example title="Set    custom breakpoints in the DataTables initialisation"><example title="Set                               custom breakpoints in the DataTables initialisation"><example title="Set                                                             custom breakpoints in the DataTables initialisation"><example title="Set AAAcustom breakpoints in the DataTables initialisation"><example title="Set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom breakpoints in the DataTables initialisation"><example title="Set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom breakpoints in the DataTables initialisation"><example title="Set custom    breakpoints in the DataTables initialisation"><example title="Set custom                               breakpoints in the DataTables initialisation"><example title="Set custom                                                             breakpoints in the DataTables initialisation"><example title="Set custom AAAbreakpoints in the DataTables initialisation"><example title="Set custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints in the DataTables initialisation"><example title="Set custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints in the DataTables initialisation"><example title="Set custom breakpoints    in the DataTables initialisation"><example title="Set custom breakpoints                               in the DataTables initialisation"><example title="Set custom breakpoints                                                             in the DataTables initialisation"><example title="Set custom breakpoints AAAin the DataTables initialisation"><example title="Set custom breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation"><example title="Set custom breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the DataTables initialisation"><example title="Set custom breakpoints in    the DataTables initialisation"><example title="Set custom breakpoints in                               the DataTables initialisation"><example title="Set custom breakpoints in                                                             the DataTables initialisation"><example title="Set custom breakpoints in AAAthe DataTables initialisation"><example title="Set custom breakpoints in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation"><example title="Set custom breakpoints in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe DataTables initialisation"><example title="Set custom breakpoints in the    DataTables initialisation"><example title="Set custom breakpoints in the                               DataTables initialisation"><example title="Set custom breakpoints in the                                                             DataTables initialisation"><example title="Set custom breakpoints in the AAADataTables initialisation"><example title="Set custom breakpoints in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation"><example title="Set custom breakpoints in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables initialisation"><example title="Set custom breakpoints in the DataTables    initialisation"><example title="Set custom breakpoints in the DataTables                               initialisation"><example title="Set custom breakpoints in the DataTables                                                             initialisation"><example title="Set custom breakpoints in the DataTables AAAinitialisation"><example title="Set custom breakpoints in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation"><example title="Set custom breakpoints in the DataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialisation"><example title="Set custom breakpoints in the DataTables initialisation""""><example title="Set custom breakpoints in the DataTables initialisation"""""""""""""""""""""""""""""""><example title="Set custom breakpoints in the DataTables initialisation"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><example title="Set custom breakpoints in the DataTables initialisation">>>><example title="Set custom breakpoints in the DataTables initialisation">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints in the DataTables initialisation">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>AAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![[[[CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![AAACDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[[[[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[




$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[































$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[





























































$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[




$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[































$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[





























































$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$$$$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$(((('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$(''''#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('####example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('###############################example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#############################################################example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#AAAexample').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example'''').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example''''''''''''''''''''''''''''''').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example')))).DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example'))))))))))))))))))))))))))))))).DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example')....DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example')...............................DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').............................................................DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').AAADataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable(((( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable((((((((((((((((((((((((((((((( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable(    {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable(                               {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable(                                                             {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {{{{
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {



	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {






























	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {




























































	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
				responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
																															responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
																																																													responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAresponsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:::: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:    {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:                               {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive:                                                             {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {



		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {






























		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {




























































		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
					breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																																														breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
					breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
																																																														breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAbreakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints:::: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints::::::::::::::::::::::::::::::: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints:    [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints:                               [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints:                                                             [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [[[[
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [



			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [






























			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [




























































			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
						{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																	{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																																															{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
						{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																	{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																																															{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
						{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																	{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
																																																															{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{{{{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{    name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{                               name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{                                                             name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ AAAname: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name:::: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name::::::::::::::::::::::::::::::: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name:    'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name:                               'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name:                                                             'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: ''''desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: '''''''''''''''''''''''''''''''desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'AAAdesktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop'''', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop''''''''''''''''''''''''''''''', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',,,, width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',    width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',                               width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop',                                                             width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', AAAwidth: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width:::: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width::::::::::::::::::::::::::::::: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width:    Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width:                               Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width:                                                             Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: AAAInfinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity    },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity                               },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity                                                             },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity }}}},
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },,,,
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },



			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },






























			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },




























































			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
						{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																	{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																																															{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
						{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																	{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																																															{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
						{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																	{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
																																																															{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{{{{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{    name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{                               name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{                                                             name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ AAAname: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name:::: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name::::::::::::::::::::::::::::::: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name:    'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name:                               'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name:                                                             'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: ''''tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: '''''''''''''''''''''''''''''''tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'AAAtablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet'''',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet''''''''''''''''''''''''''''''',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',,,,  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',     width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',                                width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',                                                              width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',     width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',                                width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',                                                              width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  AAAwidth: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width:::: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width::::::::::::::::::::::::::::::: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width:    1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width:                               1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width:                                                             1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1111024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1111111111111111111111111111111024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1111111111111111111111111111111111111111111111111111111111111024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024    },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024                               },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024                                                             },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 }}}},
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },,,,
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },



			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },






























			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },




























































			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
						{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																	{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																																															{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
						{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																	{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																																															{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
						{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																	{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
																																																															{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{{{{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{    name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{                               name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{                                                             name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ AAAname: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name:::: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name::::::::::::::::::::::::::::::: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name:    'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name:                               'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name:                                                             'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: ''''fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: '''''''''''''''''''''''''''''''fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'AAAfablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet'''',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet''''''''''''''''''''''''''''''',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',,,,  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',     width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',                                width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',                                                              width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',     width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',                                width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',                                                              width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  AAAwidth: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width:::: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width::::::::::::::::::::::::::::::: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width:    768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width:                               768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width:                                                             768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 111768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 111111111111111111111111111111768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 111111111111111111111111111111111111111111111111111111111111768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768    },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768                               },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768                                                             },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 }}}},
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },,,,
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },



			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },






























			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },




























































			{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
						{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																	{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																																															{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
						{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																	{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																																															{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
						{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																	{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
																																																															{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{{{{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{    name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{                               name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{                                                             name: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ AAAname: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name:::: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name::::::::::::::::::::::::::::::: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name:    'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name:                               'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name:                                                             'phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: ''''phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: '''''''''''''''''''''''''''''''phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''phone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'AAAphone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAphone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAphone',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone'''',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone''''''''''''''''''''''''''''''',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',,,,   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,   width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',      width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                 width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                                               width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',      width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                 width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                                               width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',      width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                 width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',                                                               width: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   AAAwidth: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width:::: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width::::::::::::::::::::::::::::::: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width:    480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width:                               480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width:                                                             480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 111480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 111111111111111111111111111111480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 111111111111111111111111111111111111111111111111111111111111480 }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480    }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480                               }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480                                                             }
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }}}}
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }



		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }






























		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }




























































		]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
					]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
																																]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
																																																														]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
					]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
																																]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
																																																														]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]]]]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]



	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]






























	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]




























































	}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
				}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
																															}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
																																																													}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}}}}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}



} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}






























} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}




























































} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}    );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}                               );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
}                                                             );

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} ))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} )))))))))))))))))))))))))))))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );




]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );





























































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );




]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );





























































]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$('#example').DataTable( {
	responsive: {
		breakpoints: [
			{ name: 'desktop', width: Infinity },
			{ name: 'tablet',  width: 1024 },
			{ name: 'fablet',  width: 768 },
			{ name: 'phone',   width: 480 }
		]
	}
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example></example><<<>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>AAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example><<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><////example><///////////////////////////////example></////////////////////////////////////////////////////////////example></AAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></example>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<example title="Set custom breakpoints using the defaults">>>>example title="Set custom breakpoints using the defaults">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Set custom breakpoints using the defaults">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><<<>>><example title="Set custom breakpoints using the defaults"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints using the defaults"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints using the defaults">AAA<example title="Set custom breakpoints using the defaults">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Set custom breakpoints using the defaults">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><example title="Set custom breakpoints using the defaults"><<<<example title="Set custom breakpoints using the defaults"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Set custom breakpoints using the defaults"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Set custom breakpoints using the defaults"><AAAexample title="Set custom breakpoints using the defaults"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Set custom breakpoints using the defaults"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Set custom breakpoints using the defaults"><example    title="Set custom breakpoints using the defaults"><example                               title="Set custom breakpoints using the defaults"><example                                                             title="Set custom breakpoints using the defaults"><example AAAtitle="Set custom breakpoints using the defaults"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Set custom breakpoints using the defaults"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Set custom breakpoints using the defaults"><example title===="Set custom breakpoints using the defaults"><example title==============================="Set custom breakpoints using the defaults"><example title============================================================="Set custom breakpoints using the defaults"><example title=""""Set custom breakpoints using the defaults"><example title="""""""""""""""""""""""""""""""Set custom breakpoints using the defaults"><example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Set custom breakpoints using the defaults"><example title="AAASet custom breakpoints using the defaults"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet custom breakpoints using the defaults"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASet custom breakpoints using the defaults"><example title="Set    custom breakpoints using the defaults"><example title="Set                               custom breakpoints using the defaults"><example title="Set                                                             custom breakpoints using the defaults"><example title="Set AAAcustom breakpoints using the defaults"><example title="Set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom breakpoints using the defaults"><example title="Set AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom breakpoints using the defaults"><example title="Set custom    breakpoints using the defaults"><example title="Set custom                               breakpoints using the defaults"><example title="Set custom                                                             breakpoints using the defaults"><example title="Set custom AAAbreakpoints using the defaults"><example title="Set custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints using the defaults"><example title="Set custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints using the defaults"><example title="Set custom breakpoints    using the defaults"><example title="Set custom breakpoints                               using the defaults"><example title="Set custom breakpoints                                                             using the defaults"><example title="Set custom breakpoints AAAusing the defaults"><example title="Set custom breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the defaults"><example title="Set custom breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the defaults"><example title="Set custom breakpoints using    the defaults"><example title="Set custom breakpoints using                               the defaults"><example title="Set custom breakpoints using                                                             the defaults"><example title="Set custom breakpoints using AAAthe defaults"><example title="Set custom breakpoints using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe defaults"><example title="Set custom breakpoints using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe defaults"><example title="Set custom breakpoints using the    defaults"><example title="Set custom breakpoints using the                               defaults"><example title="Set custom breakpoints using the                                                             defaults"><example title="Set custom breakpoints using the AAAdefaults"><example title="Set custom breakpoints using the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefaults"><example title="Set custom breakpoints using the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefaults"><example title="Set custom breakpoints using the defaults""""><example title="Set custom breakpoints using the defaults"""""""""""""""""""""""""""""""><example title="Set custom breakpoints using the defaults"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><example title="Set custom breakpoints using the defaults">>>><example title="Set custom breakpoints using the defaults">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Set custom breakpoints using the defaults">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>>![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>AAA<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><!!!![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![[[[CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![AAACDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[[[[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[




$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[































$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[





























































$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[




$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[































$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[





























































$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$$$$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$....fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$...............................fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.............................................................fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.AAAfn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn....dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn...............................dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.............................................................dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.AAAdataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable....Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable...............................Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.............................................................Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.AAAResponsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive....breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive...............................breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.............................................................breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.AAAbreakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints    = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints                               = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints                                                             = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints ==== [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints =============================== [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints ============================================================= [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints =    [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints =                               [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints =                                                             [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [[[[
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [



	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [






























	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [




























































	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
				{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
																															{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
																																																													{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{{{{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{    name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{                               name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{                                                             name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ AAAname: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name:::: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name::::::::::::::::::::::::::::::: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name:    'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name:                               'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name:                                                             'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: ''''desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: '''''''''''''''''''''''''''''''desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'AAAdesktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdesktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop'''', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop''''''''''''''''''''''''''''''', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',,,, width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',    width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',                               width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop',                                                             width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', AAAwidth: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width:::: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width::::::::::::::::::::::::::::::: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width:    Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width:                               Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width:                                                             Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: AAAInfinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAInfinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity    },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity                               },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity                                                             },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity }}}},
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },,,,
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },



	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },






























	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },




























































	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
				{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
																															{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
																																																													{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{{{{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{    name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{                               name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{                                                             name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ AAAname: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name:::: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name::::::::::::::::::::::::::::::: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name:    'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name:                               'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name:                                                             'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: ''''tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: '''''''''''''''''''''''''''''''tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'AAAtablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet'''',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet''''''''''''''''''''''''''''''',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',,,,  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',     width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',                                width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',                                                              width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',     width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',                                width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',                                                              width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  AAAwidth: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width:::: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width::::::::::::::::::::::::::::::: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width:    1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width:                               1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width:                                                             1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1111024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1111111111111111111111111111111024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1111111111111111111111111111111111111111111111111111111111111024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024    },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024                               },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024                                                             },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 }}}},
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },,,,
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },



	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },






























	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },




























































	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
				{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
																															{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
																																																													{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{{{{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{    name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{                               name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{                                                             name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ AAAname: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name:::: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name::::::::::::::::::::::::::::::: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name:    'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name:                               'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name:                                                             'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: ''''fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: '''''''''''''''''''''''''''''''fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'AAAfablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet'''',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet''''''''''''''''''''''''''''''',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',,,,  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',     width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',                                width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',                                                              width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',     width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',                                width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',                                                              width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  AAAwidth: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width:::: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width::::::::::::::::::::::::::::::: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width:    768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width:                               768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width:                                                             768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 111768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 111111111111111111111111111111768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 111111111111111111111111111111111111111111111111111111111111768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768    },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768                               },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768                                                             },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 }}}},
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },,,,
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },



	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },






























	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },




























































	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
				{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
																															{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
																																																													{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{{{{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{    name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{                               name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{                                                             name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ AAAname: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name:::: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name::::::::::::::::::::::::::::::: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name:    'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name:                               'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name:                                                             'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: ''''phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: '''''''''''''''''''''''''''''''phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'AAAphone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAphone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAphone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone'''',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone''''''''''''''''''''''''''''''',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',,,,   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',      width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                 width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                                               width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',      width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                 width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                                               width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',      width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                 width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',                                                               width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   AAAwidth: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width:::: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width::::::::::::::::::::::::::::::: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width:    480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width:                               480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width:                                                             480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 111480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 111111111111111111111111111111480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 111111111111111111111111111111111111111111111111111111111111480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480    }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480                               }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480                                                             }
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }}}}
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }



];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }






























];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }




























































];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
]]]];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];;;;

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];




$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];































$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];





























































$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];




$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];































$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];





























































$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$$$$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$(((('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$(''''#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('####example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('###############################example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#############################################################example').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#AAAexample').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example'''').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example''''''''''''''''''''''''''''''').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example')))).DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example'))))))))))))))))))))))))))))))).DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example')....DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example')...............................DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').............................................................DataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').AAADataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable(((( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable((((((((((((((((((((((((((((((( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable(    {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable(                               {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable(                                                             {
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {{{{
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {



	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {






























	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {




























































	responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
				responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
																															responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
																																																													responsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	AAAresponsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive:::: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive:    true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive:                               true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive:                                                             true
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: AAAtrue
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtrue
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtrue
} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true



} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true






























} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true




























































} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}}}} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}    );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}                               );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
}                                                             );

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} ))));

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} )))))))))))))))))))))))))))))));

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );;;;

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );




]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );































]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );





























































]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );




]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );































]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );





























































]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$.fn.dataTable.Responsive.breakpoints = [
	{ name: 'desktop', width: Infinity },
	{ name: 'tablet',  width: 1024 },
	{ name: 'fablet',  width: 768 },
	{ name: 'phone',   width: 480 }
];

$('#example').DataTable( {
	responsive: true
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example></example><<<>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>AAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example><<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><////example><///////////////////////////////example></////////////////////////////////////////////////////////////example></AAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></example>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































</dt-option>>>>/dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-option></dt-option><<<>>></dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option>AAA</dt-option>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-option>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option></dt-option><<<</dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-option><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-option><////dt-option><///////////////////////////////dt-option></////////////////////////////////////////////////////////////dt-option></AAAdt-option></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-option></dt----option></dt-------------------------------option></dt-------------------------------------------------------------option></dt-AAAoption></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption></dt-option>>>></dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-option>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>