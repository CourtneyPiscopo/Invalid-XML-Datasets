<?xml version="1.0" encoding="UTF-8" ?>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>AAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><????xml version="1.0" encoding="UTF-8" ?><???????????????????????????????xml version="1.0" encoding="UTF-8" ?><?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?><?AAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?xml    version="1.0" encoding="UTF-8" ?><?xml                               version="1.0" encoding="UTF-8" ?><?xml                                                             version="1.0" encoding="UTF-8" ?><?xml AAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml version===="1.0" encoding="UTF-8" ?><?xml version==============================="1.0" encoding="UTF-8" ?><?xml version============================================================="1.0" encoding="UTF-8" ?><?xml version=""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="1111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1....0" encoding="UTF-8" ?><?xml version="1...............................0" encoding="UTF-8" ?><?xml version="1.............................................................0" encoding="UTF-8" ?><?xml version="1.1110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.0"""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0"    encoding="UTF-8" ?><?xml version="1.0"                               encoding="UTF-8" ?><?xml version="1.0"                                                             encoding="UTF-8" ?><?xml version="1.0" AAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" encoding===="UTF-8" ?><?xml version="1.0" encoding==============================="UTF-8" ?><?xml version="1.0" encoding============================================================="UTF-8" ?><?xml version="1.0" encoding=""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="AAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="UTF----8" ?><?xml version="1.0" encoding="UTF-------------------------------8" ?><?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?><?xml version="1.0" encoding="UTF-1118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-8"""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8"    ?><?xml version="1.0" encoding="UTF-8"                               ?><?xml version="1.0" encoding="UTF-8"                                                             ?><?xml version="1.0" encoding="UTF-8" ????><?xml version="1.0" encoding="UTF-8" ???????????????????????????????><?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????><?xml version="1.0" encoding="UTF-8" ?>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">>>>dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive"><dt-api library="Responsive"><<<>>><dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">AAA<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><<<<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive"><AAAdt-api library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive"><dt----api library="Responsive"><dt-------------------------------api library="Responsive"><dt-------------------------------------------------------------api library="Responsive"><dt-AAAapi library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive"><dt-api    library="Responsive"><dt-api                               library="Responsive"><dt-api                                                             library="Responsive"><dt-api AAAlibrary="Responsive"><dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-api library===="Responsive"><dt-api library==============================="Responsive"><dt-api library============================================================="Responsive"><dt-api library=""""Responsive"><dt-api library="""""""""""""""""""""""""""""""Responsive"><dt-api library="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive"><dt-api library="AAAResponsive"><dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-api library="Responsive""""><dt-api library="Responsive"""""""""""""""""""""""""""""""><dt-api library="Responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><dt-api library="Responsive">>>><dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<name>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name><name><<<>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>AAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><AAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><name>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index()responsive.index()<<<>>>responsive.index()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index()AAAresponsive.index()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()responsive.index()AAAresponsive.index()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index()responsive....index()responsive...............................index()responsive.............................................................index()responsive.AAAindex()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex()responsive.index(((()responsive.index((((((((((((((((((((((((((((((()responsive.index((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()responsive.index())))responsive.index()))))))))))))))))))))))))))))))responsive.index()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</name>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name></name><<<>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>AAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name><<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><////name><///////////////////////////////name></////////////////////////////////////////////////////////////name></AAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></name>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<summary>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary><summary><<<>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>AAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><AAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><summary>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Obtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details element<<<>>>Obtain the cell index from a `-tag li` details element<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Obtain the cell index from a `-tag li` details element<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Obtain the cell index from a `-tag li` details elementAAAObtain the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAObtain the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementObtain the cell index from a `-tag li` details elementAAAObtain the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAObtain the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAObtain the cell index from a `-tag li` details elementObtain    the cell index from a `-tag li` details elementObtain                               the cell index from a `-tag li` details elementObtain                                                             the cell index from a `-tag li` details elementObtain AAAthe cell index from a `-tag li` details elementObtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index from a `-tag li` details elementObtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index from a `-tag li` details elementObtain the    cell index from a `-tag li` details elementObtain the                               cell index from a `-tag li` details elementObtain the                                                             cell index from a `-tag li` details elementObtain the AAAcell index from a `-tag li` details elementObtain the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index from a `-tag li` details elementObtain the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index from a `-tag li` details elementObtain the cell    index from a `-tag li` details elementObtain the cell                               index from a `-tag li` details elementObtain the cell                                                             index from a `-tag li` details elementObtain the cell AAAindex from a `-tag li` details elementObtain the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex from a `-tag li` details elementObtain the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex from a `-tag li` details elementObtain the cell index    from a `-tag li` details elementObtain the cell index                               from a `-tag li` details elementObtain the cell index                                                             from a `-tag li` details elementObtain the cell index AAAfrom a `-tag li` details elementObtain the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom a `-tag li` details elementObtain the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom a `-tag li` details elementObtain the cell index from    a `-tag li` details elementObtain the cell index from                               a `-tag li` details elementObtain the cell index from                                                             a `-tag li` details elementObtain the cell index from AAAa `-tag li` details elementObtain the cell index from AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `-tag li` details elementObtain the cell index from AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `-tag li` details elementObtain the cell index from a    `-tag li` details elementObtain the cell index from a                               `-tag li` details elementObtain the cell index from a                                                             `-tag li` details elementObtain the cell index from a ````-tag li` details elementObtain the cell index from a ```````````````````````````````-tag li` details elementObtain the cell index from a `````````````````````````````````````````````````````````````-tag li` details elementObtain the cell index from a `----tag li` details elementObtain the cell index from a `-------------------------------tag li` details elementObtain the cell index from a `-------------------------------------------------------------tag li` details elementObtain the cell index from a `-AAAtag li` details elementObtain the cell index from a `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` details elementObtain the cell index from a `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` details elementObtain the cell index from a `-tag    li` details elementObtain the cell index from a `-tag                               li` details elementObtain the cell index from a `-tag                                                             li` details elementObtain the cell index from a `-tag AAAli` details elementObtain the cell index from a `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` details elementObtain the cell index from a `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` details elementObtain the cell index from a `-tag li```` details elementObtain the cell index from a `-tag li``````````````````````````````` details elementObtain the cell index from a `-tag li````````````````````````````````````````````````````````````` details elementObtain the cell index from a `-tag li`    details elementObtain the cell index from a `-tag li`                               details elementObtain the cell index from a `-tag li`                                                             details elementObtain the cell index from a `-tag li` AAAdetails elementObtain the cell index from a `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails elementObtain the cell index from a `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails elementObtain the cell index from a `-tag li` details    elementObtain the cell index from a `-tag li` details                               elementObtain the cell index from a `-tag li` details                                                             elementObtain the cell index from a `-tag li` details AAAelementObtain the cell index from a `-tag li` details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelementObtain the cell index from a `-tag li` details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement</summary>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary></summary><<<>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>AAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary><<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><////summary><///////////////////////////////summary></////////////////////////////////////////////////////////////summary></AAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></summary>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<since>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since><since><<<>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>AAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><AAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><since>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.31.0.3<<<>>>1.0.3<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.3<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.3AAA1.0.3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1.0.3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31.0.31111.0.31111111111111111111111111111111.0.31111111111111111111111111111111111111111111111111111111111111.0.31....0.31...............................0.31.............................................................0.31.1110.31.1111111111111111111111111111110.31.1111111111111111111111111111111111111111111111111111111111110.31.0....31.0...............................31.0.............................................................31.0.11131.0.11111111111111111111111111111131.0.1111111111111111111111111111111111111111111111111111111111113</since>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since></since><<<>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>AAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since><<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><////since><///////////////////////////////since></////////////////////////////////////////////////////////////since></AAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></since>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<type type="function">>>>type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function"><type type="function"><<<>>><type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function">AAA<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><<<<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function"><AAAtype type="function"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function"><type    type="function"><type                               type="function"><type                                                             type="function"><type AAAtype="function"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function"><type type===="function"><type type==============================="function"><type type============================================================="function"><type type=""""function"><type type="""""""""""""""""""""""""""""""function"><type type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""function"><type type="AAAfunction"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction"><type type="function""""><type type="function"""""""""""""""""""""""""""""""><type type="function"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><type type="function">>>><type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<signature>>>>signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature><signature><<<>>><signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature>AAA<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><<<<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature><AAAsignature><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature><signature>>>><signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index( li )responsive.index( li )<<<>>>responsive.index( li )<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index( li )<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.index( li )AAAresponsive.index( li )AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( li )AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )responsive.index( li )AAAresponsive.index( li )AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( li )AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( li )responsive....index( li )responsive...............................index( li )responsive.............................................................index( li )responsive.AAAindex( li )responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex( li )responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex( li )responsive.index(((( li )responsive.index((((((((((((((((((((((((((((((( li )responsive.index((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( li )responsive.index(    li )responsive.index(                               li )responsive.index(                                                             li )responsive.index( AAAli )responsive.index( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli )responsive.index( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli )responsive.index( li    )responsive.index( li                               )responsive.index( li                                                             )responsive.index( li ))))responsive.index( li )))))))))))))))))))))))))))))))responsive.index( li )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</signature>>>>/signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature></signature><<<>>></signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature>AAA</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature><<<</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature><////signature><///////////////////////////////signature></////////////////////////////////////////////////////////////signature></AAAsignature></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature></signature>>>></signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Calculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details element<<<>>>Calculate the cell index from a `-tag li` details element<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Calculate the cell index from a `-tag li` details element<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Calculate the cell index from a `-tag li` details elementAAACalculate the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACalculate the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementCalculate the cell index from a `-tag li` details elementAAACalculate the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACalculate the cell index from a `-tag li` details elementAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACalculate the cell index from a `-tag li` details elementCalculate    the cell index from a `-tag li` details elementCalculate                               the cell index from a `-tag li` details elementCalculate                                                             the cell index from a `-tag li` details elementCalculate AAAthe cell index from a `-tag li` details elementCalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index from a `-tag li` details elementCalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index from a `-tag li` details elementCalculate the    cell index from a `-tag li` details elementCalculate the                               cell index from a `-tag li` details elementCalculate the                                                             cell index from a `-tag li` details elementCalculate the AAAcell index from a `-tag li` details elementCalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index from a `-tag li` details elementCalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index from a `-tag li` details elementCalculate the cell    index from a `-tag li` details elementCalculate the cell                               index from a `-tag li` details elementCalculate the cell                                                             index from a `-tag li` details elementCalculate the cell AAAindex from a `-tag li` details elementCalculate the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex from a `-tag li` details elementCalculate the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex from a `-tag li` details elementCalculate the cell index    from a `-tag li` details elementCalculate the cell index                               from a `-tag li` details elementCalculate the cell index                                                             from a `-tag li` details elementCalculate the cell index AAAfrom a `-tag li` details elementCalculate the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom a `-tag li` details elementCalculate the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom a `-tag li` details elementCalculate the cell index from    a `-tag li` details elementCalculate the cell index from                               a `-tag li` details elementCalculate the cell index from                                                             a `-tag li` details elementCalculate the cell index from AAAa `-tag li` details elementCalculate the cell index from AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `-tag li` details elementCalculate the cell index from AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `-tag li` details elementCalculate the cell index from a    `-tag li` details elementCalculate the cell index from a                               `-tag li` details elementCalculate the cell index from a                                                             `-tag li` details elementCalculate the cell index from a ````-tag li` details elementCalculate the cell index from a ```````````````````````````````-tag li` details elementCalculate the cell index from a `````````````````````````````````````````````````````````````-tag li` details elementCalculate the cell index from a `----tag li` details elementCalculate the cell index from a `-------------------------------tag li` details elementCalculate the cell index from a `-------------------------------------------------------------tag li` details elementCalculate the cell index from a `-AAAtag li` details elementCalculate the cell index from a `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` details elementCalculate the cell index from a `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` details elementCalculate the cell index from a `-tag    li` details elementCalculate the cell index from a `-tag                               li` details elementCalculate the cell index from a `-tag                                                             li` details elementCalculate the cell index from a `-tag AAAli` details elementCalculate the cell index from a `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` details elementCalculate the cell index from a `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` details elementCalculate the cell index from a `-tag li```` details elementCalculate the cell index from a `-tag li``````````````````````````````` details elementCalculate the cell index from a `-tag li````````````````````````````````````````````````````````````` details elementCalculate the cell index from a `-tag li`    details elementCalculate the cell index from a `-tag li`                               details elementCalculate the cell index from a `-tag li`                                                             details elementCalculate the cell index from a `-tag li` AAAdetails elementCalculate the cell index from a `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails elementCalculate the cell index from a `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails elementCalculate the cell index from a `-tag li` details    elementCalculate the cell index from a `-tag li` details                               elementCalculate the cell index from a `-tag li` details                                                             elementCalculate the cell index from a `-tag li` details AAAelementCalculate the cell index from a `-tag li` details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelementCalculate the cell index from a `-tag li` details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAelement</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<parameter type="node|jQuery" name="li">>>>parameter type="node|jQuery" name="li">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>parameter type="node|jQuery" name="li">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><<<>>><parameter type="node|jQuery" name="li"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><parameter type="node|jQuery" name="li"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><parameter type="node|jQuery" name="li">AAA<parameter type="node|jQuery" name="li">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<parameter type="node|jQuery" name="li">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><parameter type="node|jQuery" name="li"><<<<parameter type="node|jQuery" name="li"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<parameter type="node|jQuery" name="li"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<parameter type="node|jQuery" name="li"><AAAparameter type="node|jQuery" name="li"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAparameter type="node|jQuery" name="li"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAparameter type="node|jQuery" name="li"><parameter    type="node|jQuery" name="li"><parameter                               type="node|jQuery" name="li"><parameter                                                             type="node|jQuery" name="li"><parameter AAAtype="node|jQuery" name="li"><parameter AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="node|jQuery" name="li"><parameter AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="node|jQuery" name="li"><parameter type===="node|jQuery" name="li"><parameter type==============================="node|jQuery" name="li"><parameter type============================================================="node|jQuery" name="li"><parameter type=""""node|jQuery" name="li"><parameter type="""""""""""""""""""""""""""""""node|jQuery" name="li"><parameter type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""node|jQuery" name="li"><parameter type="AAAnode|jQuery" name="li"><parameter type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode|jQuery" name="li"><parameter type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode|jQuery" name="li"><parameter type="node||||jQuery" name="li"><parameter type="node|||||||||||||||||||||||||||||||jQuery" name="li"><parameter type="node|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||jQuery" name="li"><parameter type="node|AAAjQuery" name="li"><parameter type="node|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQuery" name="li"><parameter type="node|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQuery" name="li"><parameter type="node|jQuery"""" name="li"><parameter type="node|jQuery""""""""""""""""""""""""""""""" name="li"><parameter type="node|jQuery""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" name="li"><parameter type="node|jQuery"    name="li"><parameter type="node|jQuery"                               name="li"><parameter type="node|jQuery"                                                             name="li"><parameter type="node|jQuery" AAAname="li"><parameter type="node|jQuery" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname="li"><parameter type="node|jQuery" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname="li"><parameter type="node|jQuery" name===="li"><parameter type="node|jQuery" name==============================="li"><parameter type="node|jQuery" name============================================================="li"><parameter type="node|jQuery" name=""""li"><parameter type="node|jQuery" name="""""""""""""""""""""""""""""""li"><parameter type="node|jQuery" name="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""li"><parameter type="node|jQuery" name="AAAli"><parameter type="node|jQuery" name="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli"><parameter type="node|jQuery" name="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli"><parameter type="node|jQuery" name="li""""><parameter type="node|jQuery" name="li"""""""""""""""""""""""""""""""><parameter type="node|jQuery" name="li"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><parameter type="node|jQuery" name="li">>>><parameter type="node|jQuery" name="li">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><parameter type="node|jQuery" name="li">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		<<<>>>
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		AAA
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		



			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		






























			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		




























































			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
						The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																	The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																																															The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
						The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																	The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																																															The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
						The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																	The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
																																																															The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			AAAThe `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The    `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The                               `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The                                                             `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The ````-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The ```````````````````````````````-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `````````````````````````````````````````````````````````````-tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `----tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-------------------------------tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-------------------------------------------------------------tag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-AAAtag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtag li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag    li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag                               li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag                                                             li` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag AAAli` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li```` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li``````````````````````````````` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li````````````````````````````````````````````````````````````` node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li`    node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li`                               node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li`                                                             node (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` AAAnode (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node    (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node                               (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node                                                             (or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node ((((or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (((((((((((((((((((((((((((((((or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((or a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (AAAor a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or    a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or                               a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or                                                             a jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or AAAa jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a    jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a                               jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a                                                             jQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a AAAjQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQuery collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery    collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery                               collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery                                                             collection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery AAAcollection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcollection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcollection containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection    containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection                               containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection                                                             containing the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection AAAcontaining the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontaining the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontaining the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing    the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing                               the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing                                                             the node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing AAAthe node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the    node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the                               node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the                                                             node) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the AAAnode) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node)))) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node))))))))))))))))))))))))))))))) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node)    to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node)                               to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node)                                                             to get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) AAAto get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to    get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to                               get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to                                                             get the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to AAAget the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAget the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAget the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get    the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get                               the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get                                                             the cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get AAAthe cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the    cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the                               cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the                                                             cell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the AAAcell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell    index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell                               index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell                                                             index for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell AAAindex for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index    for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index                               for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index                                                             for.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index AAAfor.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor.
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for....
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for...............................
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.............................................................
		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.



		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.






























		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.




























































		
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
					
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
																																
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
																																																														
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
					
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
																																
			The `-tag li` node (or a jQuery collection containing the node) to get the cell index for.
																																																														</parameter>>>>/parameter>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/parameter>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/parameter></parameter><<<>>></parameter><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></parameter><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></parameter>AAA</parameter>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</parameter>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter></parameter><<<</parameter><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</parameter><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</parameter><////parameter><///////////////////////////////parameter></////////////////////////////////////////////////////////////parameter></AAAparameter></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAparameter></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAparameter></parameter>>>></parameter>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></parameter>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<returns type="object">>>>returns type="object">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="object">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="object"><returns type="object"><<<>>><returns type="object"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="object"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="object">AAA<returns type="object">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<returns type="object">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><returns type="object"><<<<returns type="object"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="object"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="object"><AAAreturns type="object"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="object"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="object"><returns    type="object"><returns                               type="object"><returns                                                             type="object"><returns AAAtype="object"><returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="object"><returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="object"><returns type===="object"><returns type==============================="object"><returns type============================================================="object"><returns type=""""object"><returns type="""""""""""""""""""""""""""""""object"><returns type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""object"><returns type="AAAobject"><returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject"><returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject"><returns type="object""""><returns type="object"""""""""""""""""""""""""""""""><returns type="object"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><returns type="object">>>><returns type="object">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="object">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.<<<>>>Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell    object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell                               object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell                                                             object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell AAAobject that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object    that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object                               that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object                                                             that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object AAAthat contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that    contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that                               contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that                                                             contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that AAAcontains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains    the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains                               the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains                                                             the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains AAAthe properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the    properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the                               properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the                                                             properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the AAAproperties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAproperties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties    `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties                               `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties                                                             `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties ````row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties ```````````````````````````````row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `````````````````````````````````````````````````````````````row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `AAArow` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row```` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row``````````````````````````````` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row````````````````````````````````````````````````````````````` and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row`    and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row`                               and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row`                                                             and `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` AAAand `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and    `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and                               `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and                                                             `column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and ````column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and ```````````````````````````````column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `````````````````````````````````````````````````````````````column`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `AAAcolumn`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn`. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column````. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column```````````````````````````````. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`````````````````````````````````````````````````````````````. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`.... This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`............................... This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`............................................................. This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`.    This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`.                               This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`.                                                             This object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. AAAThis object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This    object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This                               object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This                                                             object can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This AAAobject can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object    can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object                               can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object                                                             can be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object AAAcan be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can    be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can                               be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can                                                             be used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can AAAbe used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be    used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be                               used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be                                                             used as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be AAAused as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used    as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used                               as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used                                                             as a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used AAAas a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as    a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as                               a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as                                                             a DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as AAAa DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a    DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a                               DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a                                                             DataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a AAADataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables    `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables                               `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables                                                             `dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables ````dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables ```````````````````````````````dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `````````````````````````````````````````````````````````````dt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `AAAdt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt----type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-------------------------------type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-------------------------------------------------------------type cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-AAAtype cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type    cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type                               cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type                                                             cell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type AAAcell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell-selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell----selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-------------------------------selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-------------------------------------------------------------selector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-AAAselector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAselector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAselector`.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector````.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector```````````````````````````````.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`````````````````````````````````````````````````````````````.Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`....Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`...............................Cell object that contains the properties `row` and `column`. This object can be used as a DataTables `dt-type cell-selector`.............................................................</returns>>>>/returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns></returns><<<>>></returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns>AAA</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns><<<</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns><////returns><///////////////////////////////returns></////////////////////////////////////////////////////////////returns></AAAreturns></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns></returns>>>></returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													</type>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type></type><<<>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>AAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type><<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><////type><///////////////////////////////type></////////////////////////////////////////////////////////////type></AAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></type>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	<<<>>>
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	AAA
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	



		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	






























		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	




























































		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
					When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
																																When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
																																																														When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
					When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
																																When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
																																																														When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		AAAWhen working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWhen working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWhen working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When    working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When                               working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When                                                             working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When AAAworking with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAworking with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAworking with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working    with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working                               with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working                                                             with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working AAAwith Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with    Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with                               Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with                                                             Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with AAAResponsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive''''s details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive'''''''''''''''''''''''''''''''s details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''s details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive'AAAs details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's    details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's                               details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's                                                             details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's AAAdetails rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details    rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details                               rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details                                                             rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details AAArows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows    it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows                               it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows                                                             it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows AAAit can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it    can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it                               can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it                                                             can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it AAAcan often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can    often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can                               often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can                                                             often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can AAAoften be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoften be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoften be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often    be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often                               be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often                                                             be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often AAAbe useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be    useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be                               useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be                                                             useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be AAAuseful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful    to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful                               to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful                                                             to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful AAAto obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to    obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to                               obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to                                                             obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to AAAobtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain    a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain                               a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain                                                             a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain AAAa reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a    reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a                               reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a                                                             reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a AAAreference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference    to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference                               to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference                                                             to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference AAAto the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to    the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to                               the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to                                                             the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to AAAthe cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the    cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the                               cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the                                                             cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the AAAcell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,,,, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,    row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,                               row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell,                                                             row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, AAArow or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row    or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row                               or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row                                                             or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row AAAor column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or    column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or                               column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or                                                             column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or AAAcolumn that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column    that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column                               that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column                                                             that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column AAAthat the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that    the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that                               the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that                                                             the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that AAAthe data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the    data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the                               data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the                                                             data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the AAAdata shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdata shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdata shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data    shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data                               shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data                                                             shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data AAAshown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown    in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown                               in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown                                                             in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown AAAin the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in    the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in                               the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in                                                             the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in AAAthe details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the    details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the                               details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the                                                             details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the AAAdetails row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details    row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details                               row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details                                                             row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details AAArow comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArow comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row    comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row                               comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row                                                             comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row AAAcomes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcomes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcomes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes    from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes                               from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes                                                             from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes AAAfrom. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfrom. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from.... This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from............................... This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from............................................................. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from.    This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from.                               This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from.                                                             This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. AAAThis method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This    method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This                               method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This                                                             method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This AAAmethod provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method    provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method                               provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method                                                             provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method AAAprovides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides    that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides                               that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides                                                             that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides AAAthat ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that    ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that                               ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that                                                             ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that AAAability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,,,, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,    returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,                               returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability,                                                             returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, AAAreturning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning    an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning                               an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning                                                             an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning AAAan object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAan object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an    object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an                               object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an                                                             object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an AAAobject that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobject that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object    that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object                               that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object                                                             that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object AAAthat can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that    can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that                               can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that                                                             can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that AAAcan be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can    be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can                               be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can                                                             be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can AAAbe used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be    used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be                               used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be                                                             used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be AAAused as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used    as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used                               as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used                                                             as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used AAAas a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as    a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as                               a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as                                                             a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as AAAa `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a    `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a                               `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a                                                             `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a ````dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a ```````````````````````````````dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `````````````````````````````````````````````````````````````dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `AAAdt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt----type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-------------------------------type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-------------------------------------------------------------type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-AAAtype cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type    cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type                               cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type                                                             cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type AAAcell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell----selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-------------------------------selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-------------------------------------------------------------selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-AAAselector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAselector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAselector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector```` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector``````````````````````````````` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector````````````````````````````````````````````````````````````` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector`    with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector`                               with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector`                                                             with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` AAAwith the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwith the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with    the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with                               the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with                                                             the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with AAAthe `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the    `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the                               `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the                                                             `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the ````dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the ```````````````````````````````dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `````````````````````````````````````````````````````````````dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `AAAdt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt----api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-------------------------------api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-------------------------------------------------------------api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-AAAapi cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api    cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api                               cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api                                                             cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api AAAcell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell(((()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell((((((((((((((((((((((((((((((()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell())))` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()))))))))))))))))))))))))))))))` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()```` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()``````````````````````````````` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()````````````````````````````````````````````````````````````` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()`    method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()`                               method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()`                                                             method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` AAAmethod.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method....

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method...............................

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.............................................................

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.




		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.































		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.





























































		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.




		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.































		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.





























































		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

					Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

																																Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

																																																														Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

					Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

																																Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

																																																														Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		AAANote that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANote that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note    that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note                               that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note                                                             that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note AAAthat this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that    this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that                               this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that                                                             this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that AAAthis method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this    method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this                               method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this                                                             method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this AAAmethod requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method    requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method                               requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method                                                             requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method AAArequires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires    the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires                               the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires                                                             the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires AAAthe default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the    default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the                               default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the                                                             default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the AAAdefault renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdefault renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default    renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default                               renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default                                                             renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default AAArenderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArenderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArenderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer    to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer                               to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer                                                             to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer AAAto be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to    be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to                               be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to                                                             be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to AAAbe used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be    used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be                               used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be                                                             used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be AAAused for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used    for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used                               for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used                                                             for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used AAAfor `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for    `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for                               `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for                                                             `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for ````r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for ```````````````````````````````r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `````````````````````````````````````````````````````````````r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `AAAr-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r----init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-------------------------------init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-------------------------------------------------------------init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-AAAinit responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init    responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init                               responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init                                                             responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init AAAresponsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive....details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive...............................details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.............................................................details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.AAAdetails.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetails.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details....renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details...............................renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.............................................................renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.AAArenderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArenderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArenderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer````. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer```````````````````````````````. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`````````````````````````````````````````````````````````````. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`.... If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`............................... If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`............................................................. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`.    If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`.                               If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`.                                                             If a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. AAAIf a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIf a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIf a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If    a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If                               a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If                                                             a custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If AAAa custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a    custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a                               custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a                                                             custom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a AAAcustom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcustom method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom    method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom                               method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom                                                             method is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom AAAmethod is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method    is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method                               is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method                                                             is used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method AAAis used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is    used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is                               used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is                                                             used it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is AAAused it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used    it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used                               it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used                                                             it will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used AAAit will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it    will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it                               will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it                                                             will not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it AAAwill not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will    not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will                               not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will                                                             not be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will AAAnot be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnot be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not    be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not                               be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not                                                             be able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not AAAbe able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be    able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be                               able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be                                                             able to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be AAAable to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAable to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAable to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able    to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able                               to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able                                                             to obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able AAAto obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to    obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to                               obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to                                                             obtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to AAAobtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAobtain the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain    the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain                               the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain                                                             the information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain AAAthe information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the    information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the                               information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the                                                             information required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the AAAinformation required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information    required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information                               required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information                                                             required to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information AAArequired to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArequired to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required    to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required                               to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required                                                             to calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required AAAto calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to    calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to                               calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to                                                             calculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to AAAcalculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalculate the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate    the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate                               the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate                                                             the indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate AAAthe indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the    indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the                               indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the                                                             indexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the AAAindexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindexes.
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes....
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes...............................
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.............................................................
	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.



	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.






























	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.




























































	
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
				
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
																															
		When working with Responsive's details rows it can often be useful to obtain a reference to the cell, row or column that the data shown in the details row comes from. This method provides that ability, returning an object that can be used as a `dt-type cell-selector` with the `dt-api cell()` method.

		Note that this method requires the default renderer to be used for `r-init responsive.details.renderer`. If a custom method is used it will not be able to obtain the information required to calculate the indexes.
																																																													</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<example title="Add a class name to the host cell for data when clicked on">>>>example title="Add a class name to the host cell for data when clicked on">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Add a class name to the host cell for data when clicked on">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><<<>>><example title="Add a class name to the host cell for data when clicked on"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Add a class name to the host cell for data when clicked on"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Add a class name to the host cell for data when clicked on">AAA<example title="Add a class name to the host cell for data when clicked on">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Add a class name to the host cell for data when clicked on">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><example title="Add a class name to the host cell for data when clicked on"><<<<example title="Add a class name to the host cell for data when clicked on"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Add a class name to the host cell for data when clicked on"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Add a class name to the host cell for data when clicked on"><AAAexample title="Add a class name to the host cell for data when clicked on"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Add a class name to the host cell for data when clicked on"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Add a class name to the host cell for data when clicked on"><example    title="Add a class name to the host cell for data when clicked on"><example                               title="Add a class name to the host cell for data when clicked on"><example                                                             title="Add a class name to the host cell for data when clicked on"><example AAAtitle="Add a class name to the host cell for data when clicked on"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Add a class name to the host cell for data when clicked on"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Add a class name to the host cell for data when clicked on"><example title===="Add a class name to the host cell for data when clicked on"><example title==============================="Add a class name to the host cell for data when clicked on"><example title============================================================="Add a class name to the host cell for data when clicked on"><example title=""""Add a class name to the host cell for data when clicked on"><example title="""""""""""""""""""""""""""""""Add a class name to the host cell for data when clicked on"><example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Add a class name to the host cell for data when clicked on"><example title="AAAAdd a class name to the host cell for data when clicked on"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdd a class name to the host cell for data when clicked on"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdd a class name to the host cell for data when clicked on"><example title="Add    a class name to the host cell for data when clicked on"><example title="Add                               a class name to the host cell for data when clicked on"><example title="Add                                                             a class name to the host cell for data when clicked on"><example title="Add AAAa class name to the host cell for data when clicked on"><example title="Add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa class name to the host cell for data when clicked on"><example title="Add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa class name to the host cell for data when clicked on"><example title="Add a    class name to the host cell for data when clicked on"><example title="Add a                               class name to the host cell for data when clicked on"><example title="Add a                                                             class name to the host cell for data when clicked on"><example title="Add a AAAclass name to the host cell for data when clicked on"><example title="Add a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name to the host cell for data when clicked on"><example title="Add a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name to the host cell for data when clicked on"><example title="Add a class    name to the host cell for data when clicked on"><example title="Add a class                               name to the host cell for data when clicked on"><example title="Add a class                                                             name to the host cell for data when clicked on"><example title="Add a class AAAname to the host cell for data when clicked on"><example title="Add a class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname to the host cell for data when clicked on"><example title="Add a class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname to the host cell for data when clicked on"><example title="Add a class name    to the host cell for data when clicked on"><example title="Add a class name                               to the host cell for data when clicked on"><example title="Add a class name                                                             to the host cell for data when clicked on"><example title="Add a class name AAAto the host cell for data when clicked on"><example title="Add a class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the host cell for data when clicked on"><example title="Add a class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto the host cell for data when clicked on"><example title="Add a class name to    the host cell for data when clicked on"><example title="Add a class name to                               the host cell for data when clicked on"><example title="Add a class name to                                                             the host cell for data when clicked on"><example title="Add a class name to AAAthe host cell for data when clicked on"><example title="Add a class name to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe host cell for data when clicked on"><example title="Add a class name to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe host cell for data when clicked on"><example title="Add a class name to the    host cell for data when clicked on"><example title="Add a class name to the                               host cell for data when clicked on"><example title="Add a class name to the                                                             host cell for data when clicked on"><example title="Add a class name to the AAAhost cell for data when clicked on"><example title="Add a class name to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhost cell for data when clicked on"><example title="Add a class name to the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhost cell for data when clicked on"><example title="Add a class name to the host    cell for data when clicked on"><example title="Add a class name to the host                               cell for data when clicked on"><example title="Add a class name to the host                                                             cell for data when clicked on"><example title="Add a class name to the host AAAcell for data when clicked on"><example title="Add a class name to the host AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell for data when clicked on"><example title="Add a class name to the host AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell for data when clicked on"><example title="Add a class name to the host cell    for data when clicked on"><example title="Add a class name to the host cell                               for data when clicked on"><example title="Add a class name to the host cell                                                             for data when clicked on"><example title="Add a class name to the host cell AAAfor data when clicked on"><example title="Add a class name to the host cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor data when clicked on"><example title="Add a class name to the host cell AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor data when clicked on"><example title="Add a class name to the host cell for    data when clicked on"><example title="Add a class name to the host cell for                               data when clicked on"><example title="Add a class name to the host cell for                                                             data when clicked on"><example title="Add a class name to the host cell for AAAdata when clicked on"><example title="Add a class name to the host cell for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdata when clicked on"><example title="Add a class name to the host cell for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdata when clicked on"><example title="Add a class name to the host cell for data    when clicked on"><example title="Add a class name to the host cell for data                               when clicked on"><example title="Add a class name to the host cell for data                                                             when clicked on"><example title="Add a class name to the host cell for data AAAwhen clicked on"><example title="Add a class name to the host cell for data AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhen clicked on"><example title="Add a class name to the host cell for data AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhen clicked on"><example title="Add a class name to the host cell for data when    clicked on"><example title="Add a class name to the host cell for data when                               clicked on"><example title="Add a class name to the host cell for data when                                                             clicked on"><example title="Add a class name to the host cell for data when AAAclicked on"><example title="Add a class name to the host cell for data when AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclicked on"><example title="Add a class name to the host cell for data when AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclicked on"><example title="Add a class name to the host cell for data when clicked    on"><example title="Add a class name to the host cell for data when clicked                               on"><example title="Add a class name to the host cell for data when clicked                                                             on"><example title="Add a class name to the host cell for data when clicked AAAon"><example title="Add a class name to the host cell for data when clicked AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon"><example title="Add a class name to the host cell for data when clicked AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon"><example title="Add a class name to the host cell for data when clicked on""""><example title="Add a class name to the host cell for data when clicked on"""""""""""""""""""""""""""""""><example title="Add a class name to the host cell for data when clicked on"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><example title="Add a class name to the host cell for data when clicked on">>>><example title="Add a class name to the host cell for data when clicked on">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Add a class name to the host cell for data when clicked on">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>>![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>AAA<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><!!!![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![[[[CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![AAACDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[[[[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[




var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[































var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[





























































var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[




var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[































var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[





























































var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

AAAvar table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var    table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var                               table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var                                                             table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var AAAtable = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table    = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table                               = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table                                                             = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table ==== $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table =============================== $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table ============================================================= $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table =    $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table =                               $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table =                                                             $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $$$$('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $(((('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $((((((((((((((((((((((((((((((('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $(''''#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('''''''''''''''''''''''''''''''#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('####example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('###############################example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#############################################################example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#AAAexample').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example'''').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example''''''''''''''''''''''''''''''').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example')))).DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example'))))))))))))))))))))))))))))))).DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example')....DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example')...............................DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').............................................................DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').AAADataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable(((();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable((((((((((((((((((((((((((((((();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable())));

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable()))))))))))))))))))))))))))))));

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();;;;

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();




$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();































$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();





























































$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();




$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();































$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();





























































$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$$$$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$(((('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$((((((((((((((((((((((((((((((('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$(''''#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('''''''''''''''''''''''''''''''#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('####example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('###############################example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#############################################################example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#AAAexample').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example'''').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example''''''''''''''''''''''''''''''').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example')))).on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example'))))))))))))))))))))))))))))))).on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example')....on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example')...............................on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').............................................................on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').AAAon( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on(((( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on((((((((((((((((((((((((((((((( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on(    'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on(                               'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on(                                                             'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( ''''click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( '''''''''''''''''''''''''''''''click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'AAAclick', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclick', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclick', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click'''', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click''''''''''''''''''''''''''''''', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',,,, 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',    'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',                               'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click',                                                             'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', ''''li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', '''''''''''''''''''''''''''''''li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'AAAli', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAli', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li'''', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li''''''''''''''''''''''''''''''', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',,,, function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',    function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',                               function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li',                                                             function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', AAAfunction () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function    () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function                               () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function                                                             () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function (((() {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ((((((((((((((((((((((((((((((() {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((() {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ()))) {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ())))))))))))))))))))))))))))))) {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ()    {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ()                               {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function ()                                                             {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {{{{
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {



	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {






























	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {




























































	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
				var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
																															var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
																																																													var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	AAAvar cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var    cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var                               cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var                                                             cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var AAAcellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx    = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx                               = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx                                                             = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx ==== table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx =============================== table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx ============================================================= table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx =    table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx =                               table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx =                                                             table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = AAAtable.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table....responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table...............................responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.............................................................responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.AAAresponsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive....index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive...............................index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.............................................................index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.AAAindex( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAindex( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index(((( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index((((((((((((((((((((((((((((((( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index(    this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index(                               this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index(                                                             this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( AAAthis );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this    );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this                               );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this                                                             );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this ))));

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this )))))))))))))))))))))))))))))));

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );;;;

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );




	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );































	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );





























































	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );




	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );































	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );





























































	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

				$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

																															$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

																																																													$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$$$$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$(((( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$((((((((((((((((((((((((((((((( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$(    table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$(                               table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$(                                                             table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( AAAtable.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table....cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table...............................cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.............................................................cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.AAAcell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell(((( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell((((((((((((((((((((((((((((((( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell(    cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell(                               cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell(                                                             cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( AAAcellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellIndex ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex    ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex                               ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex                                                             ).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex )))).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ))))))))))))))))))))))))))))))).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex )....node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex )...............................node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).............................................................node() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).AAAnode() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnode() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node(((() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node((((((((((((((((((((((((((((((() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((() )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node()))) )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node())))))))))))))))))))))))))))))) )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node()    )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node()                               )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node()                                                             )
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() ))))
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )))))))))))))))))))))))))))))))
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )



		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )






























		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )




























































		.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
					.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
																																.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
																																																														.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
					.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
																																.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
																																																														.addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		....addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		...............................addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.............................................................addClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.AAAaddClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaddClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaddClass( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass(((( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass((((((((((((((((((((((((((((((( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass(    'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass(                               'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass(                                                             'highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( ''''highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( '''''''''''''''''''''''''''''''highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''highlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'AAAhighlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhighlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhighlight' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight'''' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight''''''''''''''''''''''''''''''' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight'    );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight'                               );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight'                                                             );
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' ))));
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' )))))))))))))))))))))))))))))));
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );;;;
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );



} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );






























} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );




























































} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}}}} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}    );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}                               );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
}                                                             );

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} ))));

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} )))))))))))))))))))))))))))))));

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );;;;

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );




]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );































]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );





























































]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );




]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );































]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );





























































]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$('#example').on( 'click', 'li', function () {
	var cellIndx = table.responsive.index( this );

	$( table.cell( cellIndex ).node() )
		.addClass( 'highlight' );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example></example><<<>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>AAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example><<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><////example><///////////////////////////////example></////////////////////////////////////////////////////////////example></AAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></example>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api>>>>/dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api></dt-api><<<>>></dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api>AAA</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api><<<</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api><////dt-api><///////////////////////////////dt-api></////////////////////////////////////////////////////////////dt-api></AAAdt-api></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api></dt----api></dt-------------------------------api></dt-------------------------------------------------------------api></dt-AAAapi></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi></dt-api>>>></dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>