<?xml version="1.0" encoding="UTF-8" ?>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>AAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><????xml version="1.0" encoding="UTF-8" ?><???????????????????????????????xml version="1.0" encoding="UTF-8" ?><?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?><?AAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?xml    version="1.0" encoding="UTF-8" ?><?xml                               version="1.0" encoding="UTF-8" ?><?xml                                                             version="1.0" encoding="UTF-8" ?><?xml AAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml version===="1.0" encoding="UTF-8" ?><?xml version==============================="1.0" encoding="UTF-8" ?><?xml version============================================================="1.0" encoding="UTF-8" ?><?xml version=""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="1111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1....0" encoding="UTF-8" ?><?xml version="1...............................0" encoding="UTF-8" ?><?xml version="1.............................................................0" encoding="UTF-8" ?><?xml version="1.1110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.0"""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0"    encoding="UTF-8" ?><?xml version="1.0"                               encoding="UTF-8" ?><?xml version="1.0"                                                             encoding="UTF-8" ?><?xml version="1.0" AAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" encoding===="UTF-8" ?><?xml version="1.0" encoding==============================="UTF-8" ?><?xml version="1.0" encoding============================================================="UTF-8" ?><?xml version="1.0" encoding=""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="AAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="UTF----8" ?><?xml version="1.0" encoding="UTF-------------------------------8" ?><?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?><?xml version="1.0" encoding="UTF-1118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-8"""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8"    ?><?xml version="1.0" encoding="UTF-8"                               ?><?xml version="1.0" encoding="UTF-8"                                                             ?><?xml version="1.0" encoding="UTF-8" ????><?xml version="1.0" encoding="UTF-8" ???????????????????????????????><?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????><?xml version="1.0" encoding="UTF-8" ?>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">>>>dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-api library="Responsive"><dt-api library="Responsive"><<<>>><dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">AAA<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-api library="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><dt-api library="Responsive"><<<<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-api library="Responsive"><AAAdt-api library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api library="Responsive"><dt----api library="Responsive"><dt-------------------------------api library="Responsive"><dt-------------------------------------------------------------api library="Responsive"><dt-AAAapi library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi library="Responsive"><dt-api    library="Responsive"><dt-api                               library="Responsive"><dt-api                                                             library="Responsive"><dt-api AAAlibrary="Responsive"><dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlibrary="Responsive"><dt-api library===="Responsive"><dt-api library==============================="Responsive"><dt-api library============================================================="Responsive"><dt-api library=""""Responsive"><dt-api library="""""""""""""""""""""""""""""""Responsive"><dt-api library="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive"><dt-api library="AAAResponsive"><dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-api library="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><dt-api library="Responsive""""><dt-api library="Responsive"""""""""""""""""""""""""""""""><dt-api library="Responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><dt-api library="Responsive">>>><dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-api library="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<name>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>name><name><<<>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>AAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><name><<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<name><AAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname><name>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()responsive.rebuild()<<<>>>responsive.rebuild()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()AAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()AAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()responsive....rebuild()responsive...............................rebuild()responsive.............................................................rebuild()responsive.AAArebuild()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild()responsive.rebuild(((()responsive.rebuild((((((((((((((((((((((((((((((()responsive.rebuild((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()responsive.rebuild())))responsive.rebuild()))))))))))))))))))))))))))))))responsive.rebuild()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</name>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/name></name><<<>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>AAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name></name><<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</name><////name><///////////////////////////////name></////////////////////////////////////////////////////////////name></AAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname></name>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></name>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<summary>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>summary><summary><<<>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>AAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><summary><<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<summary><AAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary><summary>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cells<<<>>>Recalculate the column breakpoints based on the class information of the column header cells<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cells<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cellsAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsRecalculate    the column breakpoints based on the class information of the column header cellsRecalculate                               the column breakpoints based on the class information of the column header cellsRecalculate                                                             the column breakpoints based on the class information of the column header cellsRecalculate AAAthe column breakpoints based on the class information of the column header cellsRecalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoints based on the class information of the column header cellsRecalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoints based on the class information of the column header cellsRecalculate the    column breakpoints based on the class information of the column header cellsRecalculate the                               column breakpoints based on the class information of the column header cellsRecalculate the                                                             column breakpoints based on the class information of the column header cellsRecalculate the AAAcolumn breakpoints based on the class information of the column header cellsRecalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoints based on the class information of the column header cellsRecalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoints based on the class information of the column header cellsRecalculate the column    breakpoints based on the class information of the column header cellsRecalculate the column                               breakpoints based on the class information of the column header cellsRecalculate the column                                                             breakpoints based on the class information of the column header cellsRecalculate the column AAAbreakpoints based on the class information of the column header cellsRecalculate the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints based on the class information of the column header cellsRecalculate the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints based on the class information of the column header cellsRecalculate the column breakpoints    based on the class information of the column header cellsRecalculate the column breakpoints                               based on the class information of the column header cellsRecalculate the column breakpoints                                                             based on the class information of the column header cellsRecalculate the column breakpoints AAAbased on the class information of the column header cellsRecalculate the column breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbased on the class information of the column header cellsRecalculate the column breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbased on the class information of the column header cellsRecalculate the column breakpoints based    on the class information of the column header cellsRecalculate the column breakpoints based                               on the class information of the column header cellsRecalculate the column breakpoints based                                                             on the class information of the column header cellsRecalculate the column breakpoints based AAAon the class information of the column header cellsRecalculate the column breakpoints based AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the class information of the column header cellsRecalculate the column breakpoints based AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the class information of the column header cellsRecalculate the column breakpoints based on    the class information of the column header cellsRecalculate the column breakpoints based on                               the class information of the column header cellsRecalculate the column breakpoints based on                                                             the class information of the column header cellsRecalculate the column breakpoints based on AAAthe class information of the column header cellsRecalculate the column breakpoints based on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class information of the column header cellsRecalculate the column breakpoints based on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class information of the column header cellsRecalculate the column breakpoints based on the    class information of the column header cellsRecalculate the column breakpoints based on the                               class information of the column header cellsRecalculate the column breakpoints based on the                                                             class information of the column header cellsRecalculate the column breakpoints based on the AAAclass information of the column header cellsRecalculate the column breakpoints based on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass information of the column header cellsRecalculate the column breakpoints based on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass information of the column header cellsRecalculate the column breakpoints based on the class    information of the column header cellsRecalculate the column breakpoints based on the class                               information of the column header cellsRecalculate the column breakpoints based on the class                                                             information of the column header cellsRecalculate the column breakpoints based on the class AAAinformation of the column header cellsRecalculate the column breakpoints based on the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation of the column header cellsRecalculate the column breakpoints based on the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation of the column header cellsRecalculate the column breakpoints based on the class information    of the column header cellsRecalculate the column breakpoints based on the class information                               of the column header cellsRecalculate the column breakpoints based on the class information                                                             of the column header cellsRecalculate the column breakpoints based on the class information AAAof the column header cellsRecalculate the column breakpoints based on the class information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column header cellsRecalculate the column breakpoints based on the class information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column header cellsRecalculate the column breakpoints based on the class information of    the column header cellsRecalculate the column breakpoints based on the class information of                               the column header cellsRecalculate the column breakpoints based on the class information of                                                             the column header cellsRecalculate the column breakpoints based on the class information of AAAthe column header cellsRecalculate the column breakpoints based on the class information of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column header cellsRecalculate the column breakpoints based on the class information of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column header cellsRecalculate the column breakpoints based on the class information of the    column header cellsRecalculate the column breakpoints based on the class information of the                               column header cellsRecalculate the column breakpoints based on the class information of the                                                             column header cellsRecalculate the column breakpoints based on the class information of the AAAcolumn header cellsRecalculate the column breakpoints based on the class information of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn header cellsRecalculate the column breakpoints based on the class information of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn header cellsRecalculate the column breakpoints based on the class information of the column    header cellsRecalculate the column breakpoints based on the class information of the column                               header cellsRecalculate the column breakpoints based on the class information of the column                                                             header cellsRecalculate the column breakpoints based on the class information of the column AAAheader cellsRecalculate the column breakpoints based on the class information of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader cellsRecalculate the column breakpoints based on the class information of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader cellsRecalculate the column breakpoints based on the class information of the column header    cellsRecalculate the column breakpoints based on the class information of the column header                               cellsRecalculate the column breakpoints based on the class information of the column header                                                             cellsRecalculate the column breakpoints based on the class information of the column header AAAcellsRecalculate the column breakpoints based on the class information of the column header AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellsRecalculate the column breakpoints based on the class information of the column header AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcells</summary>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/summary></summary><<<>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>AAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary></summary><<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</summary><////summary><///////////////////////////////summary></////////////////////////////////////////////////////////////summary></AAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsummary></summary>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></summary>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													<since>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>since><since><<<>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>AAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><since><<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<since><AAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince><since>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.41.0.4<<<>>>1.0.4<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.4<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.0.4AAA1.0.4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1.0.4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41.0.41111.0.41111111111111111111111111111111.0.41111111111111111111111111111111111111111111111111111111111111.0.41....0.41...............................0.41.............................................................0.41.1110.41.1111111111111111111111111111110.41.1111111111111111111111111111111111111111111111111111111111110.41.0....41.0...............................41.0.............................................................41.0.11141.0.11111111111111111111111111111141.0.1111111111111111111111111111111111111111111111111111111111114</since>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/since></since><<<>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>AAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since></since><<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</since><////since><///////////////////////////////since></////////////////////////////////////////////////////////////since></AAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsince></since>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></since>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<type type="function">>>>type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>type type="function"><type type="function"><<<>>><type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function">AAA<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="function">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><type type="function"><<<<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<type type="function"><AAAtype type="function"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype type="function"><type    type="function"><type                               type="function"><type                                                             type="function"><type AAAtype="function"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function"><type AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="function"><type type===="function"><type type==============================="function"><type type============================================================="function"><type type=""""function"><type type="""""""""""""""""""""""""""""""function"><type type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""function"><type type="AAAfunction"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction"><type type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction"><type type="function""""><type type="function"""""""""""""""""""""""""""""""><type type="function"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><type type="function">>>><type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><type type="function">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<signature>>>>signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>signature><signature><<<>>><signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature>AAA<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><signature><<<<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<signature><AAAsignature><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature><signature>>>><signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()responsive.rebuild()<<<>>>responsive.rebuild()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>responsive.rebuild()AAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()responsive.rebuild()AAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild()responsive....rebuild()responsive...............................rebuild()responsive.............................................................rebuild()responsive.AAArebuild()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild()responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild()responsive.rebuild(((()responsive.rebuild((((((((((((((((((((((((((((((()responsive.rebuild((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()responsive.rebuild())))responsive.rebuild()))))))))))))))))))))))))))))))responsive.rebuild()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</signature>>>>/signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/signature></signature><<<>>></signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature>AAA</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</signature>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature></signature><<<</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</signature><////signature><///////////////////////////////signature></////////////////////////////////////////////////////////////signature></AAAsignature></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsignature></signature>>>></signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></signature>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cells<<<>>>Recalculate the column breakpoints based on the class information of the column header cells<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cells<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Recalculate the column breakpoints based on the class information of the column header cellsAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsRecalculate the column breakpoints based on the class information of the column header cellsAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARecalculate the column breakpoints based on the class information of the column header cellsRecalculate    the column breakpoints based on the class information of the column header cellsRecalculate                               the column breakpoints based on the class information of the column header cellsRecalculate                                                             the column breakpoints based on the class information of the column header cellsRecalculate AAAthe column breakpoints based on the class information of the column header cellsRecalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoints based on the class information of the column header cellsRecalculate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoints based on the class information of the column header cellsRecalculate the    column breakpoints based on the class information of the column header cellsRecalculate the                               column breakpoints based on the class information of the column header cellsRecalculate the                                                             column breakpoints based on the class information of the column header cellsRecalculate the AAAcolumn breakpoints based on the class information of the column header cellsRecalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoints based on the class information of the column header cellsRecalculate the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoints based on the class information of the column header cellsRecalculate the column    breakpoints based on the class information of the column header cellsRecalculate the column                               breakpoints based on the class information of the column header cellsRecalculate the column                                                             breakpoints based on the class information of the column header cellsRecalculate the column AAAbreakpoints based on the class information of the column header cellsRecalculate the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints based on the class information of the column header cellsRecalculate the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoints based on the class information of the column header cellsRecalculate the column breakpoints    based on the class information of the column header cellsRecalculate the column breakpoints                               based on the class information of the column header cellsRecalculate the column breakpoints                                                             based on the class information of the column header cellsRecalculate the column breakpoints AAAbased on the class information of the column header cellsRecalculate the column breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbased on the class information of the column header cellsRecalculate the column breakpoints AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbased on the class information of the column header cellsRecalculate the column breakpoints based    on the class information of the column header cellsRecalculate the column breakpoints based                               on the class information of the column header cellsRecalculate the column breakpoints based                                                             on the class information of the column header cellsRecalculate the column breakpoints based AAAon the class information of the column header cellsRecalculate the column breakpoints based AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the class information of the column header cellsRecalculate the column breakpoints based AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the class information of the column header cellsRecalculate the column breakpoints based on    the class information of the column header cellsRecalculate the column breakpoints based on                               the class information of the column header cellsRecalculate the column breakpoints based on                                                             the class information of the column header cellsRecalculate the column breakpoints based on AAAthe class information of the column header cellsRecalculate the column breakpoints based on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class information of the column header cellsRecalculate the column breakpoints based on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class information of the column header cellsRecalculate the column breakpoints based on the    class information of the column header cellsRecalculate the column breakpoints based on the                               class information of the column header cellsRecalculate the column breakpoints based on the                                                             class information of the column header cellsRecalculate the column breakpoints based on the AAAclass information of the column header cellsRecalculate the column breakpoints based on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass information of the column header cellsRecalculate the column breakpoints based on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass information of the column header cellsRecalculate the column breakpoints based on the class    information of the column header cellsRecalculate the column breakpoints based on the class                               information of the column header cellsRecalculate the column breakpoints based on the class                                                             information of the column header cellsRecalculate the column breakpoints based on the class AAAinformation of the column header cellsRecalculate the column breakpoints based on the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation of the column header cellsRecalculate the column breakpoints based on the class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation of the column header cellsRecalculate the column breakpoints based on the class information    of the column header cellsRecalculate the column breakpoints based on the class information                               of the column header cellsRecalculate the column breakpoints based on the class information                                                             of the column header cellsRecalculate the column breakpoints based on the class information AAAof the column header cellsRecalculate the column breakpoints based on the class information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column header cellsRecalculate the column breakpoints based on the class information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof the column header cellsRecalculate the column breakpoints based on the class information of    the column header cellsRecalculate the column breakpoints based on the class information of                               the column header cellsRecalculate the column breakpoints based on the class information of                                                             the column header cellsRecalculate the column breakpoints based on the class information of AAAthe column header cellsRecalculate the column breakpoints based on the class information of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column header cellsRecalculate the column breakpoints based on the class information of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column header cellsRecalculate the column breakpoints based on the class information of the    column header cellsRecalculate the column breakpoints based on the class information of the                               column header cellsRecalculate the column breakpoints based on the class information of the                                                             column header cellsRecalculate the column breakpoints based on the class information of the AAAcolumn header cellsRecalculate the column breakpoints based on the class information of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn header cellsRecalculate the column breakpoints based on the class information of the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn header cellsRecalculate the column breakpoints based on the class information of the column    header cellsRecalculate the column breakpoints based on the class information of the column                               header cellsRecalculate the column breakpoints based on the class information of the column                                                             header cellsRecalculate the column breakpoints based on the class information of the column AAAheader cellsRecalculate the column breakpoints based on the class information of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader cellsRecalculate the column breakpoints based on the class information of the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader cellsRecalculate the column breakpoints based on the class information of the column header    cellsRecalculate the column breakpoints based on the class information of the column header                               cellsRecalculate the column breakpoints based on the class information of the column header                                                             cellsRecalculate the column breakpoints based on the class information of the column header AAAcellsRecalculate the column breakpoints based on the class information of the column header AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcellsRecalculate the column breakpoints based on the class information of the column header AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcells</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
		<<<>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		AAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



		






























		




























































		
					
																																
																																																														
					
																																
																																																														<returns type="DataTables.Api">>>>returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>returns type="DataTables.Api"><returns type="DataTables.Api"><<<>>><returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="DataTables.Api">AAA<returns type="DataTables.Api">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<returns type="DataTables.Api">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><returns type="DataTables.Api"><<<<returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="DataTables.Api"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<returns type="DataTables.Api"><AAAreturns type="DataTables.Api"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="DataTables.Api"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns type="DataTables.Api"><returns    type="DataTables.Api"><returns                               type="DataTables.Api"><returns                                                             type="DataTables.Api"><returns AAAtype="DataTables.Api"><returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="DataTables.Api"><returns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="DataTables.Api"><returns type===="DataTables.Api"><returns type==============================="DataTables.Api"><returns type============================================================="DataTables.Api"><returns type=""""DataTables.Api"><returns type="""""""""""""""""""""""""""""""DataTables.Api"><returns type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""DataTables.Api"><returns type="AAADataTables.Api"><returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables.Api"><returns type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables.Api"><returns type="DataTables....Api"><returns type="DataTables...............................Api"><returns type="DataTables.............................................................Api"><returns type="DataTables.AAAApi"><returns type="DataTables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApi"><returns type="DataTables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApi"><returns type="DataTables.Api""""><returns type="DataTables.Api"""""""""""""""""""""""""""""""><returns type="DataTables.Api"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><returns type="DataTables.Api">>>><returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><returns type="DataTables.Api">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DataTables API instanceDataTables API instance<<<>>>DataTables API instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DataTables API instance<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DataTables API instanceAAADataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceDataTables API instanceAAADataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instanceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTables API instanceDataTables    API instanceDataTables                               API instanceDataTables                                                             API instanceDataTables AAAAPI instanceDataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPI instanceDataTables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPI instanceDataTables API    instanceDataTables API                               instanceDataTables API                                                             instanceDataTables API AAAinstanceDataTables API AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstanceDataTables API AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance</returns>>>>/returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/returns></returns><<<>>></returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns>AAA</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</returns>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns></returns><<<</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</returns><////returns><///////////////////////////////returns></////////////////////////////////////////////////////////////returns></AAAreturns></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAreturns></returns>>>></returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></returns>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	<<<>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	AAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	






























	




























































	
				
																															
																																																													</type>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/type></type><<<>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>AAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type></type><<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</type><////type><///////////////////////////////type></////////////////////////////////////////////////////////////type></AAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype></type>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></type>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<description>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>description><description><<<>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>AAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><description><<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<description><AAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription><description>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	<<<>>>
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	AAA
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	



		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	






























		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	




























































		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
					It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
																																It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
																																																														It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
					It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
																																It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
																																																														It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		AAAIt can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIt can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIt can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It    can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It                               can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It                                                             can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It AAAcan be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can    be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can                               be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can                                                             be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can AAAbe useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be    useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be                               useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be                                                             useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be AAAuseful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuseful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful    to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful                               to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful                                                             to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful AAAto be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to    be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to                               be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to                                                             be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to AAAbe able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be    able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be                               able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be                                                             able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be AAAable to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAable to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAable to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able    to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able                               to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able                                                             to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able AAAto control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to    control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to                               control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to                                                             control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to AAAcontrol the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control    the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control                               the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control                                                             the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control AAAthe column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the    column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the                               column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the                                                             column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the AAAcolumn breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column    breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column                               breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column                                                             breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column AAAbreakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbreakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint    information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint                               information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint                                                             information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint AAAinformation that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinformation that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information    that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information                               that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information                                                             that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information AAAthat Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that    Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that                               Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that                                                             Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that AAAResponsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive    responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive                               responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive                                                             responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive AAAresponds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds    to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds                               to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds                                                             to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds AAAto after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to    after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to                               after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to                                                             after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to AAAafter a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAafter a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after    a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after                               a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after                                                             a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after AAAa DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a    DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a                               DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a                                                             DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a AAADataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable    has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable                               has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable                                                             has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable AAAhas been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhas been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has    been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has                               been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has                                                             been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has AAAbeen initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbeen initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbeen initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been    initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been                               initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been                                                             initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been AAAinitialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised.... For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised............................... For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised............................................................. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised.    For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised.                               For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised.                                                             For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. AAAFor example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFor example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFor example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For    example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For                               example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For                                                             example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For AAAexample you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example    you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example                               you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example                                                             you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example AAAyou may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyou may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you    may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you                               may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you                                                             may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you AAAmay wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmay wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmay wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may    wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may                               wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may                                                             wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may AAAwish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish    to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish                               to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish                                                             to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish AAAto provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to    provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to                               provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to                                                             provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to AAAprovide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide    user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide                               user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide                                                             user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide AAAuser control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuser control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user    control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user                               control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user                                                             control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user AAAcontrol over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontrol over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control    over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control                               over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control                                                             over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control AAAover which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAover which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAover which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over    which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over                               which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over                                                             which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over AAAwhich columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwhich columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which    columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which                               columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which                                                             columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which AAAcolumns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns    are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns                               are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns                                                             are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns AAAare visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are    visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are                               visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are                                                             visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are AAAvisible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvisible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible.... This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible............................... This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible............................................................. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible.    This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible.                               This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible.                                                             This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. AAAThis can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThis can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This    can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This                               can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This                                                             can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This AAAcan be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can    be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can                               be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can                                                             be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can AAAbe done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be    done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be                               done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be                                                             done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be AAAdone using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdone using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdone using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done    using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done                               using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done                                                             using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done AAAusing code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using    code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using                               code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using                                                             code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using AAAcode that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcode that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcode that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code    that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code                               that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code                                                             that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code AAAthat will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthat will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that    will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that                               will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that                                                             will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that AAAwill add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will    add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will                               add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will                                                             add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will AAAadd or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadd or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadd or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add    or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add                               or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add                                                             or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add AAAor remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or    remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or                               remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or                                                             remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or AAAremove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAremove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAremove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove    the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove                               the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove                                                             the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove AAAthe class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the    class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the                               class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the                                                             class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the AAAclass `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class    `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class                               `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class                                                             `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class ````never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class ```````````````````````````````never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `````````````````````````````````````````````````````````````never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `AAAnever` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnever` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnever` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never```` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never``````````````````````````````` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never````````````````````````````````````````````````````````````` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never`    ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never`                               ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never`                                                             ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` (((([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ((((((((((((((((((((((((((((((([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([[[[the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([AAAthe other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the    other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the                               other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the                                                             other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the AAAother classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other    classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other                               classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other                                                             classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other AAAclasses](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes]]]](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes]((((http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](((((((((((((((((((((((((((((((http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](AAAhttp://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhttp://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhttp://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http:::://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http::::::::::::::::::::::::::::::://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://///datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http:////////////////////////////////datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://////////////////////////////////////////////////////////////datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://///datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http:////////////////////////////////datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://////////////////////////////////////////////////////////////datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://AAAdatatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables....net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables...............................net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.............................................................net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.AAAnet/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnet/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnet/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net////extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net///////////////////////////////extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/////////////////////////////////////////////////////////////extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/AAAextensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAextensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions////responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions///////////////////////////////responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/////////////////////////////////////////////////////////////responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/AAAresponsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive////classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive///////////////////////////////classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/////////////////////////////////////////////////////////////classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/AAAclasses) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes)))) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes))))))))))))))))))))))))))))))) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes)    can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes)                               can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes)                                                             can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) AAAcan also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcan also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can    also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can                               also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can                                                             also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can AAAalso be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalso be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalso be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also    be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also                               be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also                                                             be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also AAAbe used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be    used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be                               used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be                                                             used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be AAAused) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAused) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used)))) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used))))))))))))))))))))))))))))))) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used)    and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used)                               and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used)                                                             and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) AAAand then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and    then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and                               then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and                                                             then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and AAAthen calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthen calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthen calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then    calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then                               calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then                                                             calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then AAAcalling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcalling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling    this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling                               this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling                                                             this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling AAAthis method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this    method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this                               method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this                                                             method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this AAAmethod.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethod.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method....

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method...............................

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.............................................................

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.




		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.































		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.





























































		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.




		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.































		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.





























































		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

					You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

																																You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

																																																														You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

					You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

																																You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

																																																														You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		AAAYou will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYou will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYou will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You    will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You                               will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You                                                             will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You AAAwill also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will    also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will                               also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will                                                             also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will AAAalso likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalso likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAalso likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also    likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also                               likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also                                                             likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also AAAlikely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlikely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlikely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely    wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely                               wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely                                                             wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely AAAwish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish    to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish                               to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish                                                             to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish AAAto immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to    immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to                               immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to                                                             immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to AAAimmediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimmediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimmediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately    call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately                               call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately                                                             call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately AAAcall `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcall `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcall `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call    `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call                               `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call                                                             `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call ````r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call ```````````````````````````````r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `````````````````````````````````````````````````````````````r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `AAAr-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r----api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-------------------------------api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-------------------------------------------------------------api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-AAAapi responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api    responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api                               responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api                                                             responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api AAAresponsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive....recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive...............................recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.............................................................recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.AAArecalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc(((()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc((((((((((((((((((((((((((((((()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc())))` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()))))))))))))))))))))))))))))))` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()```` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()``````````````````````````````` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()````````````````````````````````````````````````````````````` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()`    to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()`                               to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()`                                                             to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` AAAto have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to    have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to                               have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to                                                             have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to AAAhave Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhave Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have    Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have                               Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have                                                             Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have AAAResponsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive    update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive                               update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive                                                             update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive AAAupdate the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAupdate the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAupdate the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update    the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update                               the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update                                                             the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update AAAthe display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the    display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the                               display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the                                                             display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the AAAdisplay for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display    for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display                               for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display                                                             for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display AAAfor the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfor the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for    the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for                               the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for                                                             the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for AAAthe change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the    change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the                               change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the                                                             change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the AAAchange in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchange in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change    in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change                               in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change                                                             in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change AAAin classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in    classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in                               classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in                                                             classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in AAAclasses. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclasses. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes.... Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes............................... Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes............................................................. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes.    Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes.                               Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes.                                                             Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. AAAHaving this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHaving this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHaving this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having    this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having                               this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having                                                             this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having AAAthis as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this    as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this                               as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this                                                             as a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this AAAas a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as    a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as                               a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as                                                             a separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as AAAa separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a    separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a                               separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a                                                             separate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a AAAseparate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAseparate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAseparate call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate    call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate                               call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate                                                             call allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate AAAcall allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcall allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcall allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call    allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call                               allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call                                                             allows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call AAAallows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAallows multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows    multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows                               multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows                                                             multiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows AAAmultiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmultiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmultiple changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple    changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple                               changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple                                                             changes to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple AAAchanges to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchanges to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAchanges to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes    to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes                               to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes                                                             to be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes AAAto be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to    be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to                               be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to                                                             be drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to AAAbe drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbe drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be    drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be                               drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be                                                             drawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be AAAdrawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdrawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdrawn at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn    at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn                               at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn                                                             at the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn AAAat the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAat the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at    the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at                               the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at                                                             the same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at AAAthe same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the    same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the                               same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the                                                             same time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the AAAsame time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsame time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsame time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same    time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same                               time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same                                                             time to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same AAAtime to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtime to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtime to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time    to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time                               to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time                                                             to help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time AAAto help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAto help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to    help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to                               help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to                                                             help improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to AAAhelp improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhelp improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhelp improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help    improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help                               improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help                                                             improve performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help AAAimprove performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimprove performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAimprove performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve    performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve                               performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve                                                             performance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve AAAperformance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAperformance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAperformance.
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance....
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance...............................
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.............................................................
	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.



	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.






























	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.




























































	
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
				
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
																															
		It can be useful to be able to control the column breakpoint information that Responsive responds to after a DataTable has been initialised. For example you may wish to provide user control over which columns are visible. This can be done using code that will add or remove the class `never` ([the other classes](http://datatables.net/extensions/responsive/classes) can also be used) and then calling this method.

		You will also likely wish to immediately call `r-api responsive.recalc()` to have Responsive update the display for the change in classes. Having this as a separate call allows multiple changes to be drawn at the same time to help improve performance.
																																																													</description>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/description></description><<<>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>AAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description></description><<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</description><////description><///////////////////////////////description></////////////////////////////////////////////////////////////description></AAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdescription></description>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></description>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	

	<<<>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	AAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	































	





























































	




	































	





























































	

				

																															

																																																													<example title="Hide a column completely by adding a class name and rebuilding">>>>example title="Hide a column completely by adding a class name and rebuilding">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Hide a column completely by adding a class name and rebuilding">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><<<>>><example title="Hide a column completely by adding a class name and rebuilding"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Hide a column completely by adding a class name and rebuilding"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Hide a column completely by adding a class name and rebuilding">AAA<example title="Hide a column completely by adding a class name and rebuilding">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Hide a column completely by adding a class name and rebuilding">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><example title="Hide a column completely by adding a class name and rebuilding"><<<<example title="Hide a column completely by adding a class name and rebuilding"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Hide a column completely by adding a class name and rebuilding"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<example title="Hide a column completely by adding a class name and rebuilding"><AAAexample title="Hide a column completely by adding a class name and rebuilding"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Hide a column completely by adding a class name and rebuilding"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample title="Hide a column completely by adding a class name and rebuilding"><example    title="Hide a column completely by adding a class name and rebuilding"><example                               title="Hide a column completely by adding a class name and rebuilding"><example                                                             title="Hide a column completely by adding a class name and rebuilding"><example AAAtitle="Hide a column completely by adding a class name and rebuilding"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Hide a column completely by adding a class name and rebuilding"><example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle="Hide a column completely by adding a class name and rebuilding"><example title===="Hide a column completely by adding a class name and rebuilding"><example title==============================="Hide a column completely by adding a class name and rebuilding"><example title============================================================="Hide a column completely by adding a class name and rebuilding"><example title=""""Hide a column completely by adding a class name and rebuilding"><example title="""""""""""""""""""""""""""""""Hide a column completely by adding a class name and rebuilding"><example title="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Hide a column completely by adding a class name and rebuilding"><example title="AAAHide a column completely by adding a class name and rebuilding"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHide a column completely by adding a class name and rebuilding"><example title="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHide a column completely by adding a class name and rebuilding"><example title="Hide    a column completely by adding a class name and rebuilding"><example title="Hide                               a column completely by adding a class name and rebuilding"><example title="Hide                                                             a column completely by adding a class name and rebuilding"><example title="Hide AAAa column completely by adding a class name and rebuilding"><example title="Hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column completely by adding a class name and rebuilding"><example title="Hide AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa column completely by adding a class name and rebuilding"><example title="Hide a    column completely by adding a class name and rebuilding"><example title="Hide a                               column completely by adding a class name and rebuilding"><example title="Hide a                                                             column completely by adding a class name and rebuilding"><example title="Hide a AAAcolumn completely by adding a class name and rebuilding"><example title="Hide a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn completely by adding a class name and rebuilding"><example title="Hide a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn completely by adding a class name and rebuilding"><example title="Hide a column    completely by adding a class name and rebuilding"><example title="Hide a column                               completely by adding a class name and rebuilding"><example title="Hide a column                                                             completely by adding a class name and rebuilding"><example title="Hide a column AAAcompletely by adding a class name and rebuilding"><example title="Hide a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcompletely by adding a class name and rebuilding"><example title="Hide a column AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcompletely by adding a class name and rebuilding"><example title="Hide a column completely    by adding a class name and rebuilding"><example title="Hide a column completely                               by adding a class name and rebuilding"><example title="Hide a column completely                                                             by adding a class name and rebuilding"><example title="Hide a column completely AAAby adding a class name and rebuilding"><example title="Hide a column completely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby adding a class name and rebuilding"><example title="Hide a column completely AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAby adding a class name and rebuilding"><example title="Hide a column completely by    adding a class name and rebuilding"><example title="Hide a column completely by                               adding a class name and rebuilding"><example title="Hide a column completely by                                                             adding a class name and rebuilding"><example title="Hide a column completely by AAAadding a class name and rebuilding"><example title="Hide a column completely by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadding a class name and rebuilding"><example title="Hide a column completely by AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAadding a class name and rebuilding"><example title="Hide a column completely by adding    a class name and rebuilding"><example title="Hide a column completely by adding                               a class name and rebuilding"><example title="Hide a column completely by adding                                                             a class name and rebuilding"><example title="Hide a column completely by adding AAAa class name and rebuilding"><example title="Hide a column completely by adding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa class name and rebuilding"><example title="Hide a column completely by adding AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa class name and rebuilding"><example title="Hide a column completely by adding a    class name and rebuilding"><example title="Hide a column completely by adding a                               class name and rebuilding"><example title="Hide a column completely by adding a                                                             class name and rebuilding"><example title="Hide a column completely by adding a AAAclass name and rebuilding"><example title="Hide a column completely by adding a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name and rebuilding"><example title="Hide a column completely by adding a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name and rebuilding"><example title="Hide a column completely by adding a class    name and rebuilding"><example title="Hide a column completely by adding a class                               name and rebuilding"><example title="Hide a column completely by adding a class                                                             name and rebuilding"><example title="Hide a column completely by adding a class AAAname and rebuilding"><example title="Hide a column completely by adding a class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname and rebuilding"><example title="Hide a column completely by adding a class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname and rebuilding"><example title="Hide a column completely by adding a class name    and rebuilding"><example title="Hide a column completely by adding a class name                               and rebuilding"><example title="Hide a column completely by adding a class name                                                             and rebuilding"><example title="Hide a column completely by adding a class name AAAand rebuilding"><example title="Hide a column completely by adding a class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand rebuilding"><example title="Hide a column completely by adding a class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand rebuilding"><example title="Hide a column completely by adding a class name and    rebuilding"><example title="Hide a column completely by adding a class name and                               rebuilding"><example title="Hide a column completely by adding a class name and                                                             rebuilding"><example title="Hide a column completely by adding a class name and AAArebuilding"><example title="Hide a column completely by adding a class name and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuilding"><example title="Hide a column completely by adding a class name and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuilding"><example title="Hide a column completely by adding a class name and rebuilding""""><example title="Hide a column completely by adding a class name and rebuilding"""""""""""""""""""""""""""""""><example title="Hide a column completely by adding a class name and rebuilding"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><example title="Hide a column completely by adding a class name and rebuilding">>>><example title="Hide a column completely by adding a class name and rebuilding">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><example title="Hide a column completely by adding a class name and rebuilding">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>>![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>AAA<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><!!!![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![[[[CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![AAACDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[[[[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[




var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[































var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[





























































var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[




var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[































var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[





























































var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

AAAvar table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var    table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var                               table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var                                                             table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var AAAtable = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table    = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table                               = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table                                                             = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table ==== $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table =============================== $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table ============================================================= $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table =    $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table =                               $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table =                                                             $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $$$$('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $(((('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $((((((((((((((((((((((((((((((('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $(''''#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('''''''''''''''''''''''''''''''#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('####example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('###############################example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#############################################################example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#AAAexample').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example'''').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example''''''''''''''''''''''''''''''').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example')))).DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example'))))))))))))))))))))))))))))))).DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example')....DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example')...............................DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').............................................................DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').AAADataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable(((();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable((((((((((((((((((((((((((((((();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable())));

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable()))))))))))))))))))))))))))))));

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();;;;

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();




$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();































$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();





























































$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();




$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();































$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();





























































$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$$$$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$(((( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$((((((((((((((((((((((((((((((( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$(    table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$(                               table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$(                                                             table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( AAAtable.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table....column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table...............................column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.............................................................column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.AAAcolumn( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcolumn( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column(((( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column((((((((((((((((((((((((((((((( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column(    2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column(                               2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column(                                                             2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 1112 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 1111111111111111111111111111112 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 1111111111111111111111111111111111111111111111111111111111112 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2    ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2                               ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2                                                             ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 )))).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ))))))))))))))))))))))))))))))).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 )....header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 )...............................header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).............................................................header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).AAAheader() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAheader() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header(((() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header((((((((((((((((((((((((((((((() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header()))) ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header())))))))))))))))))))))))))))))) ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header()    ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header()                               ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header()                                                             ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() )))).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ))))))))))))))))))))))))))))))).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() )....addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() )...............................addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).............................................................addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).AAAaddClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaddClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaddClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass(((( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass((((((((((((((((((((((((((((((( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass(    'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass(                               'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass(                                                             'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( ''''never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( '''''''''''''''''''''''''''''''never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''never' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'AAAnever' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnever' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnever' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never'''' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never''''''''''''''''''''''''''''''' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never'    );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never'                               );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never'                                                             );

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' ))));

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' )))))))))))))))))))))))))))))));

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );;;;

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );




table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );































table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );





























































table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );




table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );































table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );





























































table.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

AAAtable.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table....responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table...............................responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.............................................................responsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.AAAresponsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive....rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive...............................rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.............................................................rebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.AAArebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArebuild();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild(((();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild((((((((((((((((((((((((((((((();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild())));
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild()))))))))))))))))))))))))))))));
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();;;;
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();



table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();






























table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();




























































table.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
AAAtable.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable.responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table....responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table...............................responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.............................................................responsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.AAAresponsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive.recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive....recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive...............................recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.............................................................recalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.AAArecalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArecalc();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc(((();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc((((((((((((((((((((((((((((((();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc())));

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc()))))))))))))))))))))))))))))));

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();;;;

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();




]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();































]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();





























































]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();




]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();































]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();





























































]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

var table = $('#example').DataTable();

$( table.column( 2 ).header() ).addClass( 'never' );

table.responsive.rebuild();
table.responsive.recalc();

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/example></example><<<>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>AAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example></example><<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</example><////example><///////////////////////////////example></////////////////////////////////////////////////////////////example></AAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></example>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































</dt-api>>>>/dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-api></dt-api><<<>>></dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api>AAA</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-api>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api></dt-api><<<</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-api><////dt-api><///////////////////////////////dt-api></////////////////////////////////////////////////////////////dt-api></AAAdt-api></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-api></dt----api></dt-------------------------------api></dt-------------------------------------------------------------api></dt-AAAapi></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAapi></dt-api>>>></dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-api>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>