<?xml version="1.0" encoding="UTF-8" ?>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>AAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><?xml version="1.0" encoding="UTF-8" ?><<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<?xml version="1.0" encoding="UTF-8" ?><????xml version="1.0" encoding="UTF-8" ?><???????????????????????????????xml version="1.0" encoding="UTF-8" ?><?????????????????????????????????????????????????????????????xml version="1.0" encoding="UTF-8" ?><?AAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxml version="1.0" encoding="UTF-8" ?><?xml    version="1.0" encoding="UTF-8" ?><?xml                               version="1.0" encoding="UTF-8" ?><?xml                                                             version="1.0" encoding="UTF-8" ?><?xml AAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAversion="1.0" encoding="UTF-8" ?><?xml version===="1.0" encoding="UTF-8" ?><?xml version==============================="1.0" encoding="UTF-8" ?><?xml version============================================================="1.0" encoding="UTF-8" ?><?xml version=""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""1.0" encoding="UTF-8" ?><?xml version="1111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1111111111111111111111111111111111111111111111111111111111111.0" encoding="UTF-8" ?><?xml version="1....0" encoding="UTF-8" ?><?xml version="1...............................0" encoding="UTF-8" ?><?xml version="1.............................................................0" encoding="UTF-8" ?><?xml version="1.1110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.1111111111111111111111111111111111111111111111111111111111110" encoding="UTF-8" ?><?xml version="1.0"""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" encoding="UTF-8" ?><?xml version="1.0"    encoding="UTF-8" ?><?xml version="1.0"                               encoding="UTF-8" ?><?xml version="1.0"                                                             encoding="UTF-8" ?><?xml version="1.0" AAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAencoding="UTF-8" ?><?xml version="1.0" encoding===="UTF-8" ?><?xml version="1.0" encoding==============================="UTF-8" ?><?xml version="1.0" encoding============================================================="UTF-8" ?><?xml version="1.0" encoding=""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""UTF-8" ?><?xml version="1.0" encoding="AAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUTF-8" ?><?xml version="1.0" encoding="UTF----8" ?><?xml version="1.0" encoding="UTF-------------------------------8" ?><?xml version="1.0" encoding="UTF-------------------------------------------------------------8" ?><?xml version="1.0" encoding="UTF-1118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-1111111111111111111111111111111111111111111111111111111111118" ?><?xml version="1.0" encoding="UTF-8"""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" ?><?xml version="1.0" encoding="UTF-8"    ?><?xml version="1.0" encoding="UTF-8"                               ?><?xml version="1.0" encoding="UTF-8"                                                             ?><?xml version="1.0" encoding="UTF-8" ????><?xml version="1.0" encoding="UTF-8" ???????????????????????????????><?xml version="1.0" encoding="UTF-8" ?????????????????????????????????????????????????????????????><?xml version="1.0" encoding="UTF-8" ?>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><?xml version="1.0" encoding="UTF-8" ?>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-example table-type="html-wide" table-class="display nowrap" order="3">>>>dt-example table-type="html-wide" table-class="display nowrap" order="3">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-example table-type="html-wide" table-class="display nowrap" order="3">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<>>><dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-example table-type="html-wide" table-class="display nowrap" order="3">AAA<dt-example table-type="html-wide" table-class="display nowrap" order="3">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-example table-type="html-wide" table-class="display nowrap" order="3">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<<dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-example table-type="html-wide" table-class="display nowrap" order="3"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<dt-example table-type="html-wide" table-class="display nowrap" order="3"><AAAdt-example table-type="html-wide" table-class="display nowrap" order="3"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-example table-type="html-wide" table-class="display nowrap" order="3"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-example table-type="html-wide" table-class="display nowrap" order="3"><dt----example table-type="html-wide" table-class="display nowrap" order="3"><dt-------------------------------example table-type="html-wide" table-class="display nowrap" order="3"><dt-------------------------------------------------------------example table-type="html-wide" table-class="display nowrap" order="3"><dt-AAAexample table-type="html-wide" table-class="display nowrap" order="3"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample table-type="html-wide" table-class="display nowrap" order="3"><dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample table-type="html-wide" table-class="display nowrap" order="3"><dt-example    table-type="html-wide" table-class="display nowrap" order="3"><dt-example                               table-type="html-wide" table-class="display nowrap" order="3"><dt-example                                                             table-type="html-wide" table-class="display nowrap" order="3"><dt-example AAAtable-type="html-wide" table-class="display nowrap" order="3"><dt-example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable-type="html-wide" table-class="display nowrap" order="3"><dt-example AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable-type="html-wide" table-class="display nowrap" order="3"><dt-example table----type="html-wide" table-class="display nowrap" order="3"><dt-example table-------------------------------type="html-wide" table-class="display nowrap" order="3"><dt-example table-------------------------------------------------------------type="html-wide" table-class="display nowrap" order="3"><dt-example table-AAAtype="html-wide" table-class="display nowrap" order="3"><dt-example table-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="html-wide" table-class="display nowrap" order="3"><dt-example table-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtype="html-wide" table-class="display nowrap" order="3"><dt-example table-type===="html-wide" table-class="display nowrap" order="3"><dt-example table-type==============================="html-wide" table-class="display nowrap" order="3"><dt-example table-type============================================================="html-wide" table-class="display nowrap" order="3"><dt-example table-type=""""html-wide" table-class="display nowrap" order="3"><dt-example table-type="""""""""""""""""""""""""""""""html-wide" table-class="display nowrap" order="3"><dt-example table-type="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""html-wide" table-class="display nowrap" order="3"><dt-example table-type="AAAhtml-wide" table-class="display nowrap" order="3"><dt-example table-type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhtml-wide" table-class="display nowrap" order="3"><dt-example table-type="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhtml-wide" table-class="display nowrap" order="3"><dt-example table-type="html----wide" table-class="display nowrap" order="3"><dt-example table-type="html-------------------------------wide" table-class="display nowrap" order="3"><dt-example table-type="html-------------------------------------------------------------wide" table-class="display nowrap" order="3"><dt-example table-type="html-AAAwide" table-class="display nowrap" order="3"><dt-example table-type="html-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwide" table-class="display nowrap" order="3"><dt-example table-type="html-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwide" table-class="display nowrap" order="3"><dt-example table-type="html-wide"""" table-class="display nowrap" order="3"><dt-example table-type="html-wide""""""""""""""""""""""""""""""" table-class="display nowrap" order="3"><dt-example table-type="html-wide""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" table-class="display nowrap" order="3"><dt-example table-type="html-wide"    table-class="display nowrap" order="3"><dt-example table-type="html-wide"                               table-class="display nowrap" order="3"><dt-example table-type="html-wide"                                                             table-class="display nowrap" order="3"><dt-example table-type="html-wide" AAAtable-class="display nowrap" order="3"><dt-example table-type="html-wide" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable-class="display nowrap" order="3"><dt-example table-type="html-wide" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable-class="display nowrap" order="3"><dt-example table-type="html-wide" table----class="display nowrap" order="3"><dt-example table-type="html-wide" table-------------------------------class="display nowrap" order="3"><dt-example table-type="html-wide" table-------------------------------------------------------------class="display nowrap" order="3"><dt-example table-type="html-wide" table-AAAclass="display nowrap" order="3"><dt-example table-type="html-wide" table-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass="display nowrap" order="3"><dt-example table-type="html-wide" table-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass="display nowrap" order="3"><dt-example table-type="html-wide" table-class===="display nowrap" order="3"><dt-example table-type="html-wide" table-class==============================="display nowrap" order="3"><dt-example table-type="html-wide" table-class============================================================="display nowrap" order="3"><dt-example table-type="html-wide" table-class=""""display nowrap" order="3"><dt-example table-type="html-wide" table-class="""""""""""""""""""""""""""""""display nowrap" order="3"><dt-example table-type="html-wide" table-class="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""display nowrap" order="3"><dt-example table-type="html-wide" table-class="AAAdisplay nowrap" order="3"><dt-example table-type="html-wide" table-class="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay nowrap" order="3"><dt-example table-type="html-wide" table-class="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdisplay nowrap" order="3"><dt-example table-type="html-wide" table-class="display    nowrap" order="3"><dt-example table-type="html-wide" table-class="display                               nowrap" order="3"><dt-example table-type="html-wide" table-class="display                                                             nowrap" order="3"><dt-example table-type="html-wide" table-class="display AAAnowrap" order="3"><dt-example table-type="html-wide" table-class="display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnowrap" order="3"><dt-example table-type="html-wide" table-class="display AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnowrap" order="3"><dt-example table-type="html-wide" table-class="display nowrap"""" order="3"><dt-example table-type="html-wide" table-class="display nowrap""""""""""""""""""""""""""""""" order="3"><dt-example table-type="html-wide" table-class="display nowrap""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" order="3"><dt-example table-type="html-wide" table-class="display nowrap"    order="3"><dt-example table-type="html-wide" table-class="display nowrap"                               order="3"><dt-example table-type="html-wide" table-class="display nowrap"                                                             order="3"><dt-example table-type="html-wide" table-class="display nowrap" AAAorder="3"><dt-example table-type="html-wide" table-class="display nowrap" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder="3"><dt-example table-type="html-wide" table-class="display nowrap" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAorder="3"><dt-example table-type="html-wide" table-class="display nowrap" order===="3"><dt-example table-type="html-wide" table-class="display nowrap" order==============================="3"><dt-example table-type="html-wide" table-class="display nowrap" order============================================================="3"><dt-example table-type="html-wide" table-class="display nowrap" order=""""3"><dt-example table-type="html-wide" table-class="display nowrap" order="""""""""""""""""""""""""""""""3"><dt-example table-type="html-wide" table-class="display nowrap" order="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""3"><dt-example table-type="html-wide" table-class="display nowrap" order="1113"><dt-example table-type="html-wide" table-class="display nowrap" order="1111111111111111111111111111113"><dt-example table-type="html-wide" table-class="display nowrap" order="1111111111111111111111111111111111111111111111111111111111113"><dt-example table-type="html-wide" table-class="display nowrap" order="3""""><dt-example table-type="html-wide" table-class="display nowrap" order="3"""""""""""""""""""""""""""""""><dt-example table-type="html-wide" table-class="display nowrap" order="3"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><dt-example table-type="html-wide" table-class="display nowrap" order="3">>>><dt-example table-type="html-wide" table-class="display nowrap" order="3">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><dt-example table-type="html-wide" table-class="display nowrap" order="3">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































<css lib="datatables responsive">>>>css lib="datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>css lib="datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>css lib="datatables responsive"><css lib="datatables responsive"><<<>>><css lib="datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><css lib="datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><css lib="datatables responsive">AAA<css lib="datatables responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<css lib="datatables responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><css lib="datatables responsive"><<<<css lib="datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<css lib="datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<css lib="datatables responsive"><AAAcss lib="datatables responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss lib="datatables responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss lib="datatables responsive"><css    lib="datatables responsive"><css                               lib="datatables responsive"><css                                                             lib="datatables responsive"><css AAAlib="datatables responsive"><css AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="datatables responsive"><css AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="datatables responsive"><css lib===="datatables responsive"><css lib==============================="datatables responsive"><css lib============================================================="datatables responsive"><css lib=""""datatables responsive"><css lib="""""""""""""""""""""""""""""""datatables responsive"><css lib="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""datatables responsive"><css lib="AAAdatatables responsive"><css lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables responsive"><css lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables responsive"><css lib="datatables    responsive"><css lib="datatables                               responsive"><css lib="datatables                                                             responsive"><css lib="datatables AAAresponsive"><css lib="datatables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive"><css lib="datatables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive"><css lib="datatables responsive""""><css lib="datatables responsive"""""""""""""""""""""""""""""""><css lib="datatables responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><css lib="datatables responsive">>>><css lib="datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><css lib="datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	div.container { max-width: 1200px }

	div.container { max-width: 1200px }
<<<>>>
	div.container { max-width: 1200px }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	div.container { max-width: 1200px }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	div.container { max-width: 1200px }
AAA
	div.container { max-width: 1200px }
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	div.container { max-width: 1200px }
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }

	div.container { max-width: 1200px }




	div.container { max-width: 1200px }































	div.container { max-width: 1200px }





























































	div.container { max-width: 1200px }

				div.container { max-width: 1200px }

																															div.container { max-width: 1200px }

																																																													div.container { max-width: 1200px }

	AAAdiv.container { max-width: 1200px }

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdiv.container { max-width: 1200px }

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdiv.container { max-width: 1200px }

	div....container { max-width: 1200px }

	div...............................container { max-width: 1200px }

	div.............................................................container { max-width: 1200px }

	div.AAAcontainer { max-width: 1200px }

	div.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontainer { max-width: 1200px }

	div.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcontainer { max-width: 1200px }

	div.container    { max-width: 1200px }

	div.container                               { max-width: 1200px }

	div.container                                                             { max-width: 1200px }

	div.container {{{{ max-width: 1200px }

	div.container {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ max-width: 1200px }

	div.container {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{ max-width: 1200px }

	div.container {    max-width: 1200px }

	div.container {                               max-width: 1200px }

	div.container {                                                             max-width: 1200px }

	div.container { AAAmax-width: 1200px }

	div.container { AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmax-width: 1200px }

	div.container { AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmax-width: 1200px }

	div.container { max----width: 1200px }

	div.container { max-------------------------------width: 1200px }

	div.container { max-------------------------------------------------------------width: 1200px }

	div.container { max-AAAwidth: 1200px }

	div.container { max-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1200px }

	div.container { max-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwidth: 1200px }

	div.container { max-width:::: 1200px }

	div.container { max-width::::::::::::::::::::::::::::::: 1200px }

	div.container { max-width::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 1200px }

	div.container { max-width:    1200px }

	div.container { max-width:                               1200px }

	div.container { max-width:                                                             1200px }

	div.container { max-width: 1111200px }

	div.container { max-width: 1111111111111111111111111111111200px }

	div.container { max-width: 1111111111111111111111111111111111111111111111111111111111111200px }

	div.container { max-width: 1200AAApx }

	div.container { max-width: 1200AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApx }

	div.container { max-width: 1200AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApx }

	div.container { max-width: 1200px    }

	div.container { max-width: 1200px                               }

	div.container { max-width: 1200px                                                             }

	div.container { max-width: 1200px }}}}

	div.container { max-width: 1200px }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

	div.container { max-width: 1200px }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

	div.container { max-width: 1200px }




	div.container { max-width: 1200px }































	div.container { max-width: 1200px }




























































</css>>>>/css>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/css>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/css></css><<<>>></css><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></css><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></css>AAA</css>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</css>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css></css><<<</css><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</css><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</css><////css><///////////////////////////////css></////////////////////////////////////////////////////////////css></AAAcss></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcss></css>>>></css>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></css>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><js lib="jquery datatables responsive">>>>js lib="jquery datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>js lib="jquery datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><<<>>><js lib="jquery datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><js lib="jquery datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><js lib="jquery datatables responsive">AAA<js lib="jquery datatables responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<js lib="jquery datatables responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><js lib="jquery datatables responsive"><<<<js lib="jquery datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<js lib="jquery datatables responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<js lib="jquery datatables responsive"><AAAjs lib="jquery datatables responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs lib="jquery datatables responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs lib="jquery datatables responsive"><js    lib="jquery datatables responsive"><js                               lib="jquery datatables responsive"><js                                                             lib="jquery datatables responsive"><js AAAlib="jquery datatables responsive"><js AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="jquery datatables responsive"><js AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="jquery datatables responsive"><js lib===="jquery datatables responsive"><js lib==============================="jquery datatables responsive"><js lib============================================================="jquery datatables responsive"><js lib=""""jquery datatables responsive"><js lib="""""""""""""""""""""""""""""""jquery datatables responsive"><js lib="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""jquery datatables responsive"><js lib="AAAjquery datatables responsive"><js lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjquery datatables responsive"><js lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjquery datatables responsive"><js lib="jquery    datatables responsive"><js lib="jquery                               datatables responsive"><js lib="jquery                                                             datatables responsive"><js lib="jquery AAAdatatables responsive"><js lib="jquery AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables responsive"><js lib="jquery AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdatatables responsive"><js lib="jquery datatables    responsive"><js lib="jquery datatables                               responsive"><js lib="jquery datatables                                                             responsive"><js lib="jquery datatables AAAresponsive"><js lib="jquery datatables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive"><js lib="jquery datatables AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive"><js lib="jquery datatables responsive""""><js lib="jquery datatables responsive"""""""""""""""""""""""""""""""><js lib="jquery datatables responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><js lib="jquery datatables responsive">>>><js lib="jquery datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><js lib="jquery datatables responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>>![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>AAA<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><!!!![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![[[[CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![AAACDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[[[[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[




$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[































$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[





























































$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[




$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[































$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[





























































$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$$$$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$((((document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(((((((((((((((((((((((((((((((document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(AAAdocument).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdocument).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdocument).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document)))).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document))))))))))))))))))))))))))))))).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document)....ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document)...............................ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).............................................................ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).AAAready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready((((function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(((((((((((((((((((((((((((((((function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(AAAfunction() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfunction() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function(((() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function((((((((((((((((((((((((((((((() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function()))) {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function())))))))))))))))))))))))))))))) {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function()    {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function()                               {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function()                                                             {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {{{{
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {



	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {






























	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {




























































	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
				var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
																															var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
																																																													var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	AAAvar table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvar table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var    table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var                               table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var                                                             table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var AAAtable = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table    = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table                               = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table                                                             = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table ==== $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table =============================== $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table ============================================================= $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table =    $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table =                               $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table =                                                             $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $$$$('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $(((('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $((((((((((((((((((((((((((((((('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $(''''#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('''''''''''''''''''''''''''''''#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('####example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('###############################example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#############################################################example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#AAAexample').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example'''').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example''''''''''''''''''''''''''''''').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example')))).DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example'))))))))))))))))))))))))))))))).DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example')....DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example')...............................DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').............................................................DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').AAADataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable(((();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable((((((((((((((((((((((((((((((();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((();

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable())));

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable()))))))))))))))))))))))))))))));

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();;;;

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();




	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();































	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();





























































	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();




	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();































	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();





























































	new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

				new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

																															new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

																																																													new $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	AAAnew $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new    $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new                               $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new                                                             $.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $$$$.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $....fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $...............................fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.............................................................fn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.AAAfn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn....dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn...............................dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.............................................................dataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.AAAdataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable....Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable...............................Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.............................................................Responsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.AAAResponsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive(((( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive((((((((((((((((((((((((((((((( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive(    table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive(                               table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive(                                                             table );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( AAAtable );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table    );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table                               );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table                                                             );
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table ))));
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table )))))))))))))))))))))))))))))));
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );;;;
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );



} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );






























} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );




























































} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}}}} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}} );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}    );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}                               );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
}                                                             );

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} ))));

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} )))))))))))))))))))))))))))))));

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );;;;

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );




]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );































]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );





























































]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );




]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );































]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );





























































]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

$(document).ready(function() {
	var table = $('#example').DataTable();

	new $.fn.dataTable.Responsive( table );
} );

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></js>>>>/js>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/js>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/js></js><<<>>></js><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></js><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></js>AAA</js>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</js>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js></js><<<</js><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</js><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</js><////js><///////////////////////////////js></////////////////////////////////////////////////////////////js></AAAjs></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjs></js>>>></js>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></js>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































<title lib="Responsive">>>>title lib="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>title lib="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>title lib="Responsive"><title lib="Responsive"><<<>>><title lib="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><title lib="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><title lib="Responsive">AAA<title lib="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<title lib="Responsive">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><title lib="Responsive"><<<<title lib="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<title lib="Responsive"><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<title lib="Responsive"><AAAtitle lib="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle lib="Responsive"><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle lib="Responsive"><title    lib="Responsive"><title                               lib="Responsive"><title                                                             lib="Responsive"><title AAAlib="Responsive"><title AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="Responsive"><title AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlib="Responsive"><title lib===="Responsive"><title lib==============================="Responsive"><title lib============================================================="Responsive"><title lib=""""Responsive"><title lib="""""""""""""""""""""""""""""""Responsive"><title lib="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Responsive"><title lib="AAAResponsive"><title lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><title lib="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive"><title lib="Responsive""""><title lib="Responsive"""""""""""""""""""""""""""""""><title lib="Responsive"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""><title lib="Responsive">>>><title lib="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><title lib="Responsive">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`new` constructor`new` constructor<<<>>>`new` constructor<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`new` constructor<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`new` constructorAAA`new` constructorAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`new` constructorAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor`new` constructor````new` constructor```````````````````````````````new` constructor`````````````````````````````````````````````````````````````new` constructor`AAAnew` constructor`AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew` constructor`AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew` constructor`new```` constructor`new``````````````````````````````` constructor`new````````````````````````````````````````````````````````````` constructor`new`    constructor`new`                               constructor`new`                                                             constructor`new` AAAconstructor`new` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconstructor`new` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconstructor</title>>>>/title>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/title>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/title></title><<<>>></title><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></title><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></title>AAA</title>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</title>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title></title><<<</title><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</title><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</title><////title><///////////////////////////////title></////////////////////////////////////////////////////////////title></AAAtitle></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtitle></title>>>></title>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></title>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































<info>>>>info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>info><info><<<>>><info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><info>AAA<info>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<info>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><info><<<<info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<info><AAAinfo><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinfo><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinfo><info>>>><info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>>![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>AAA<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><!!!![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![[[[CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![AAACDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[[[[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[




Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[































Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[





























































Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[




Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[































Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[





























































Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

AAAResponsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive    will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive                               will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive                                                             will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive AAAwill automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwill automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will    automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will                               automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will                                                             automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will AAAautomatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAautomatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAautomatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically    detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically                               detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically                                                             detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically AAAdetect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdetect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect    new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect                               new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect                                                             new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect AAAnew DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new    DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new                               DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new                                                             DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new AAADataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable    instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable                               instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable                                                             instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable AAAinstances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances    being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances                               being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances                                                             being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances AAAbeing created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbeing created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbeing created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being    created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being                               created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being                                                             created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being AAAcreated on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcreated on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcreated on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created    on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created                               on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created                                                             on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created AAAon a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on    a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on                               a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on                                                             a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on AAAa page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a    page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a                               page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a                                                             page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a AAApage and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAApage and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApage and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page    and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page                               and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page                                                             and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page AAAand initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAand initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and    initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and                               initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and                                                             initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and AAAinitialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise    itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise                               itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise                                                             itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise AAAitself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAitself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAitself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself    if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself                               if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself                                                             if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself AAAif it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAif it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if    it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if                               it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if                                                             it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if AAAit finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAit finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it    finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it                               finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it                                                             finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it AAAfinds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfinds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfinds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds    the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds                               the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds                                                             the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds AAAthe `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the    `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the                               `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the                                                             `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the ````r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the ```````````````````````````````r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `````````````````````````````````````````````````````````````r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `AAAr-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r----init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-------------------------------init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-------------------------------------------------------------init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-AAAinit responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init    responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init                               responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init                                                             responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init AAAresponsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive```` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive``````````````````````````````` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive````````````````````````````````````````````````````````````` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive`    option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive`                               option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive`                                                             option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` AAAoption or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoption or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option    or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option                               or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option                                                             or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option AAAor `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAor `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or    `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or                               `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or                                                             `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or ````responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or ```````````````````````````````responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `````````````````````````````````````````````````````````````responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `AAAresponsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAresponsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive```` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive``````````````````````````````` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive````````````````````````````````````````````````````````````` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive`    class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive`                               class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive`                                                             class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` AAAclass name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class    name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class                               name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class                                                             name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class AAAname on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAname on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name    on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name                               on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name                                                             on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name AAAon the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAon the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on    the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on                               the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on                                                             the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on AAAthe table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the    table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the                               table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the                                                             table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the AAAtable, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtable, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,,,, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,    as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,                               as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table,                                                             as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, AAAas shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as    shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as                               shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as                                                             shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as AAAshown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown    in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown                               in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown                                                             in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown AAAin the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in    the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in                               the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in                                                             the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in AAAthe other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the    other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the                               other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the                                                             other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the AAAother examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other    examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other                               examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other                                                             examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other AAAexamples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexamples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexamples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples....

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples...............................

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.............................................................

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.




The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.































The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.





























































The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.




The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.































The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.





























































The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

AAAThe third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAThe third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The    third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The                               third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The                                                             third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The AAAthird way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthird way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthird way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third    way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third                               way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third                                                             way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third AAAway of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAway of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAway of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way    of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way                               of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way                                                             of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way AAAof initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAof initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of    initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of                               initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of                                                             initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of AAAinitialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinitialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising    Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising                               Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising                                                             Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising AAAResponsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive    is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive                               is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive                                                             is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive AAAis manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAis manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is    manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is                               manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is                                                             manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is AAAmanually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmanually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually    creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually                               creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually                                                             creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually AAAcreating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcreating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcreating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating    a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating                               a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating                                                             a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating AAAa new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a    new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a                               new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a                                                             new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a AAAnew instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new    instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new                               instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new                                                             instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new AAAinstance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinstance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance    using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance                               using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance                                                             using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance AAAusing the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using    the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using                               the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using                                                             the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using AAAthe `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the    `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the                               `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the                                                             `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the ````$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the ```````````````````````````````$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `````````````````````````````````````````````````````````````$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$$$$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$....fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$...............................fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.............................................................fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.AAAfn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn....dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn...............................dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.............................................................dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.AAAdataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable....Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable...............................Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.............................................................Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.AAAResponsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAResponsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive```` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive``````````````````````````````` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive````````````````````````````````````````````````````````````` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive`    class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive`                               class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive`                                                             class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` AAAclass, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAclass, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,,,, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,    as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,                               as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class,                                                             as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, AAAas shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAas shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as    shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as                               shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as                                                             shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as AAAshown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAshown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown    in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown                               in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown                                                             in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown AAAin this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in    this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in                               this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in                                                             this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in AAAthis example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this    example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this                               example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this                                                             example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this AAAexample (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example    (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example                               (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example                                                             (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example ((((the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (((((((((((((((((((((((((((((((the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (AAAthe other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthe other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the    other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the                               other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the                                                             other two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the AAAother two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAother two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other    two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other                               two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other                                                             two methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other AAAtwo methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwo methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two    methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two                               methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two                                                             methods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two AAAmethods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmethods are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods    are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods                               are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods                                                             are provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods AAAare provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAare provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are    provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are                               provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are                                                             provided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are AAAprovided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAprovided using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided    using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided                               using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided                                                             using this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided AAAusing this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAusing this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using    this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using                               this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using                                                             this constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using AAAthis constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAthis constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this    constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this                               constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this                                                             constructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this AAAconstructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconstructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAconstructor in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor    in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor                               in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor                                                             in a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor AAAin a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAin a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in    a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in                               a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in                                                             a `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in AAAa `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a    `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a                               `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a                                                             `dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a ````dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a ```````````````````````````````dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `````````````````````````````````````````````````````````````dt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `AAAdt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt----event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-------------------------------event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-------------------------------------------------------------event init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-AAAevent init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAevent init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAevent init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event    init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event                               init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event                                                             init` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event AAAinit` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinit` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init```` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init``````````````````````````````` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init````````````````````````````````````````````````````````````` event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init`    event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init`                               event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init`                                                             event handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` AAAevent handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAevent handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAevent handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event    handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event                               handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event                                                             handler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event AAAhandler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhandler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhandler!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!!!!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!)))).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!))))))))))))))))))))))))))))))).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!)....

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!)...............................

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).............................................................

]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).




]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).































]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).





























































]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).




]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).































]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).





























































]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><![CDATA[

Responsive will automatically detect new DataTable instances being created on a page and initialise itself if it finds the `r-init responsive` option or `responsive` class name on the table, as shown in the other examples.

The third way of initialising Responsive is manually creating a new instance using the `$.fn.dataTable.Responsive` class, as shown in this example (the other two methods are provided using this constructor in a `dt-event init` event handler!).

]]>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></info>>>>/info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/info></info><<<>>></info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></info>AAA</info>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</info>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info></info><<<</info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</info><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</info><////info><///////////////////////////////info></////////////////////////////////////////////////////////////info></AAAinfo></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinfo></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAinfo></info>>>></info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></info>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































</dt-example>>>>/dt-example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>/dt-example></dt-example><<<>>></dt-example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-example>AAA</dt-example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-example>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example></dt-example><<<</dt-example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-example><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</dt-example><////dt-example><///////////////////////////////dt-example></////////////////////////////////////////////////////////////dt-example></AAAdt-example></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-example></AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdt-example></dt----example></dt-------------------------------example></dt-------------------------------------------------------------example></dt-AAAexample></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></dt-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAexample></dt-example>>>></dt-example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>></dt-example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



<<<>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA































































































































































































































































































































































































